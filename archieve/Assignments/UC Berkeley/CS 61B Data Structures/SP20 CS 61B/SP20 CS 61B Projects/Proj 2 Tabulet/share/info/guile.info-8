This is guile.info, produced by makeinfo version 5.2 from guile.texi.

This manual documents Guile version 2.0.11.

   Copyright (C) 1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005, 2009,
2010, 2011, 2012, 2013, 2014 Free Software Foundation.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled “GNU Free
Documentation License.”
INFO-DIR-SECTION The Algorithmic Language Scheme
START-INFO-DIR-ENTRY
* Guile Reference: (guile).     The Guile reference manual.
END-INFO-DIR-ENTRY


File: guile.info,  Node: VM Concepts,  Next: Stack Layout,  Prev: Why a VM?,  Up: A Virtual Machine for Guile

9.3.2 VM Concepts
-----------------

Compiled code is run by a virtual machine (VM). Each thread has its own
VM. When a compiled procedure is run, Guile looks up the virtual machine
for the current thread and executes the procedure using that VM.

   Guile’s virtual machine is a stack machine—that is, it has few
registers, and the instructions defined in the VM operate by pushing and
popping values from a stack.

   Stack memory is exclusive to the virtual machine that owns it.  In
addition to their stacks, virtual machines also have access to the
global memory (modules, global bindings, etc) that is shared among other
parts of Guile, including other VMs.

   A VM has generic instructions, such as those to reference local
variables, and instructions designed to support Guile’s languages –
mathematical instructions that support the entire numerical tower, an
inlined implementation of ‘cons’, etc.

   The registers that a VM has are as follows:

   • ip - Instruction pointer
   • sp - Stack pointer
   • fp - Frame pointer

   In other architectures, the instruction pointer is sometimes called
the “program counter” (pc).  This set of registers is pretty typical for
stack machines; their exact meanings in the context of Guile’s VM are
described in the next section.


File: guile.info,  Node: Stack Layout,  Next: Variables and the VM,  Prev: VM Concepts,  Up: A Virtual Machine for Guile

9.3.3 Stack Layout
------------------

While not strictly necessary to understand how to work with the VM, it
is instructive and sometimes entertaining to consider the structure of
the VM stack.

   Logically speaking, a VM stack is composed of “frames”.  Each frame
corresponds to the application of one compiled procedure, and contains
storage space for arguments, local variables, intermediate values, and
some bookkeeping information (such as what to do after the frame
computes its value).

   While the compiler is free to do whatever it wants to, as long as the
semantics of a computation are preserved, in practice every time you
call a function, a new frame is created.  (The notable exception of
course is the tail call case, *note Tail Calls::.)

   Within a frame, you have the data associated with the function
application itself, which is of a fixed size, and the stack space for
intermediate values.  Sometimes only the former is referred to as the
“frame”, and the latter is the “stack”, although all pending application
frames can have some intermediate computations interleaved on the stack.

   The structure of the fixed part of an application frame is as
follows:

                  Stack
        | ...              |
        | Intermed. val. 0 | <- fp + bp->nargs + bp->nlocs = SCM_FRAME_UPPER_ADDRESS (fp)
        +==================+
        | Local variable 1 |
        | Local variable 0 | <- fp + bp->nargs
        | Argument 1       |
        | Argument 0       | <- fp
        | Program          | <- fp - 1
        +------------------+
        | Return address   |
        | MV return address|
        | Dynamic link     | <- fp - 4 = SCM_FRAME_DATA_ADDRESS (fp) = SCM_FRAME_LOWER_ADDRESS (fp)
        +==================+
        |                  |

   In the above drawing, the stack grows upward.  The intermediate
values stored in the application of this frame are stored above
‘SCM_FRAME_UPPER_ADDRESS (fp)’.  ‘bp’ refers to the ‘struct scm_objcode’
data associated with the program at ‘fp - 1’.  ‘nargs’ and ‘nlocs’ are
properties of the compiled procedure, which will be discussed later.

   The individual fields of the frame are as follows:

Return address
     The ‘ip’ that was in effect before this program was applied.  When
     we return from this activation frame, we will jump back to this
     ‘ip’.

MV return address
     The ‘ip’ to return to if this application returns multiple values.
     For continuations that only accept one value, this value will be
     ‘NULL’; for others, it will be an ‘ip’ that points to a
     multiple-value return address in the calling code.  That code will
     expect the top value on the stack to be an integer—the number of
     values being returned—and that below that integer there are the
     values being returned.

Dynamic link
     This is the ‘fp’ in effect before this program was applied.  In
     effect, this and the return address are the registers that are
     always “saved”.  The dynamic link links the current frame to the
     previous frame; computing a stack trace involves traversing these
     frames.

Local variable N
     Lambda-local variables that are all allocated as part of the frame.
     This makes access to variables very cheap.

Argument N
     The calling convention of the VM requires arguments of a function
     application to be pushed on the stack, and here they are.
     References to arguments dispatch to these locations on the stack.

Program
     This is the program being applied.  For more information on how
     programs are implemented, *Note VM Programs::.


File: guile.info,  Node: Variables and the VM,  Next: VM Programs,  Prev: Stack Layout,  Up: A Virtual Machine for Guile

9.3.4 Variables and the VM
--------------------------

Consider the following Scheme code as an example:

       (define (foo a)
         (lambda (b) (list foo a b)))

   Within the lambda expression, ‘foo’ is a top-level variable, ‘a’ is a
lexically captured variable, and ‘b’ is a local variable.

   Another way to refer to ‘a’ and ‘b’ is to say that ‘a’ is a “free”
variable, since it is not defined within the lambda, and ‘b’ is a
“bound” variable.  These are the terms used in the "lambda calculus", a
mathematical notation for describing functions.  The lambda calculus is
useful because it allows one to prove statements about functions.  It is
especially good at describing scope relations, and it is for that reason
that we mention it here.

   Guile allocates all variables on the stack.  When a lexically
enclosed procedure with free variables—a "closure"—is created, it copies
those variables into its free variable vector.  References to free
variables are then redirected through the free variable vector.

   If a variable is ever ‘set!’, however, it will need to be
heap-allocated instead of stack-allocated, so that different closures
that capture the same variable can see the same value.  Also, this
allows continuations to capture a reference to the variable, instead of
to its value at one point in time.  For these reasons, ‘set!’ variables
are allocated in “boxes”—actually, in variable cells.  *Note
Variables::, for more information.  References to ‘set!’ variables are
indirected through the boxes.

   Thus perhaps counterintuitively, what would seem “closer to the
metal”, viz ‘set!’, actually forces an extra memory allocation and
indirection.

   Going back to our example, ‘b’ may be allocated on the stack, as it
is never mutated.

   ‘a’ may also be allocated on the stack, as it too is never mutated.
Within the enclosed lambda, its value will be copied into (and
referenced from) the free variables vector.

   ‘foo’ is a top-level variable, because ‘foo’ is not lexically bound
in this example.


File: guile.info,  Node: VM Programs,  Next: Instruction Set,  Prev: Variables and the VM,  Up: A Virtual Machine for Guile

9.3.5 Compiled Procedures are VM Programs
-----------------------------------------

By default, when you enter in expressions at Guile’s REPL, they are
first compiled to VM object code, then that VM object code is executed
to produce a value.  If the expression evaluates to a procedure, the
result of this process is a compiled procedure.

   A compiled procedure is a compound object, consisting of its
bytecode, a reference to any captured lexical variables, an object
array, and some metadata such as the procedure’s arity, name, and
documentation.  You can pick apart these pieces with the accessors in
‘(system vm program)’.  *Note Compiled Procedures::, for a full API
reference.

   The object array of a compiled procedure, also known as the "object
table", holds all Scheme objects whose values are known not to change
across invocations of the procedure: constant strings, symbols, etc.
The object table of a program is initialized right before a program is
loaded with ‘load-program’.  *Note Loading Instructions::, for more
information.

   Variable objects are one such type of constant object: when a global
binding is defined, a variable object is associated to it and that
object will remain constant over time, even if the value bound to it
changes.  Therefore, toplevel bindings only need to be looked up once.
Thereafter, references to the corresponding toplevel variables from
within the program are then performed via the ‘toplevel-ref’
instruction, which uses the object vector, and are almost as fast as
local variable references.

   We can see how these concepts tie together by disassembling the ‘foo’
function we defined earlier to see what is going on:

     scheme@(guile-user)> (define (foo a) (lambda (b) (list foo a b)))
     scheme@(guile-user)> ,x foo
        0    (assert-nargs-ee/locals 1)
        2    (object-ref 1)                  ;; #<procedure 8ebec20 at <current input>:0:17 (b)>
        4    (local-ref 0)                   ;; `a'
        6    (make-closure 0 1)
        9    (return)

     ----------------------------------------
     Disassembly of #<procedure 8ebec20 at <current input>:0:17 (b)>:

        0    (assert-nargs-ee/locals 1)
        2    (toplevel-ref 1)                ;; `foo'
        4    (free-ref 0)                    ;; (closure variable)
        6    (local-ref 0)                   ;; `b'
        8    (list 0 3)                      ;; 3 elements         at (unknown file):0:29
       11    (return)

   First there’s some prelude, where ‘foo’ checks that it was called
with only 1 argument.  Then at ‘ip’ 2, we load up the compiled lambda.
‘Ip’ 4 loads up ‘a’, so that it can be captured into a closure by at
‘ip’ 6—binding code (from the compiled lambda) with data (the
free-variable vector).  Finally we return the closure.

   The second stanza disassembles the compiled lambda.  After the
prelude, we note that toplevel variables are resolved relative to the
module that was current when the procedure was created.  This lookup
occurs lazily, at the first time the variable is actually referenced,
and the location of the lookup is cached so that future references are
very cheap.  *Note Top-Level Environment Instructions::, for more
details.

   Then we see a reference to a free variable, corresponding to ‘a’.
The disassembler doesn’t have enough information to give a name to that
variable, so it just marks it as being a “closure variable”.  Finally we
see the reference to ‘b’, then the ‘list’ opcode, an inline
implementation of the ‘list’ scheme routine.


File: guile.info,  Node: Instruction Set,  Prev: VM Programs,  Up: A Virtual Machine for Guile

9.3.6 Instruction Set
---------------------

There are about 180 instructions in Guile’s virtual machine.  These
instructions represent atomic units of a program’s execution.  Ideally,
they perform one task without conditional branches, then dispatch to the
next instruction in the stream.

   Instructions themselves are one byte long.  Some instructions take
parameters, which follow the instruction byte in the instruction stream.

   Sometimes the compiler can figure out that it is compiling a special
case that can be run more efficiently.  So, for example, while Guile
offers a generic test-and-branch instruction, it also offers specific
instructions for special cases, so that the following cases all have
their own test-and-branch instructions:

     (if pred then else)
     (if (not pred) then else)
     (if (null? l) then else)
     (if (not (null? l)) then else)

   In addition, some Scheme primitives have their own inline
implementations, e.g. ‘cons’, and ‘list’, as we saw in the previous
section.

   So Guile’s instruction set is a _complete_ instruction set, in that
it provides the instructions that are suited to the problem, and is not
concerned with making a minimal, orthogonal set of instructions.  More
instructions may be added over time.

* Menu:

* Lexical Environment Instructions::  
* Top-Level Environment Instructions::  
* Procedure Call and Return Instructions::  
* Function Prologue Instructions::  
* Trampoline Instructions::  
* Branch Instructions::         
* Data Constructor Instructions::   
* Loading Instructions::  
* Dynamic Environment Instructions::  
* Miscellaneous Instructions::  
* Inlined Scheme Instructions::  
* Inlined Mathematical Instructions::  
* Inlined Bytevector Instructions::  


File: guile.info,  Node: Lexical Environment Instructions,  Next: Top-Level Environment Instructions,  Up: Instruction Set

9.3.6.1 Lexical Environment Instructions
........................................

These instructions access and mutate the lexical environment of a
compiled procedure—its free and bound variables.

   Some of these instructions have ‘long-’ variants, the difference
being that they take 16-bit arguments, encoded in big-endianness,
instead of the normal 8-bit range.

   *Note Stack Layout::, for more information on the format of stack
frames.

 -- Instruction: local-ref index
 -- Instruction: long-local-ref index
     Push onto the stack the value of the local variable located at
     INDEX within the current stack frame.

     Note that arguments and local variables are all in one block.  Thus
     the first argument, if any, is at index 0, and local bindings
     follow the arguments.

 -- Instruction: local-set index
 -- Instruction: long-local-set index
     Pop the Scheme object located on top of the stack and make it the
     new value of the local variable located at INDEX within the current
     stack frame.

 -- Instruction: box index
     Pop a value off the stack, and set the INDEXnth local variable to a
     box containing that value.  A shortcut for ‘make-variable’ then
     ‘local-set’, used when binding boxed variables.

 -- Instruction: empty-box index
     Set the INDEXth local variable to a box containing a variable whose
     value is unbound.  Used when compiling some ‘letrec’ expressions.

 -- Instruction: local-boxed-ref index
 -- Instruction: local-boxed-set index
     Get or set the value of the variable located at INDEX within the
     current stack frame.  A shortcut for ‘local-ref’ then
     ‘variable-ref’ or ‘variable-set’, respectively.

 -- Instruction: free-ref index
     Push the value of the captured variable located at position INDEX
     within the program’s vector of captured variables.

 -- Instruction: free-boxed-ref index
 -- Instruction: free-boxed-set index
     Get or set a boxed free variable.  A shortcut for ‘free-ref’ then
     ‘variable-ref’ or ‘variable-set’, respectively.

     Note that there is no ‘free-set’ instruction, as variables that are
     ‘set!’ must be boxed.

 -- Instruction: make-closure num-free-vars
     Pop NUM-FREE-VARS values and a program object off the stack in that
     order, and push a new program object closing over the given free
     variables.  NUM-FREE-VARS is encoded as a two-byte big-endian
     value.

     The free variables are stored in an array, inline to the new
     program object, in the order that they were on the stack (not the
     order they are popped off).  The new closure shares state with the
     original program.  At the time of this writing, the space overhead
     of closures is 3 words, plus one word for each free variable.

 -- Instruction: fix-closure index
     Fix up the free variables array of the closure stored in the
     INDEXth local variable.  INDEX is a two-byte big-endian integer.

     This instruction will pop as many values from the stack as are in
     the corresponding closure’s free variables array.  The topmost
     value on the stack will be stored as the closure’s last free
     variable, with other values filling in free variable slots in
     order.

     ‘fix-closure’ is part of a hack for allocating mutually recursive
     procedures.  The hack is to store the procedures in their
     corresponding local variable slots, with space already allocated
     for free variables.  Then once they are all in place, this
     instruction fixes up their procedures’ free variable bindings in
     place.  This allows most ‘letrec’-bound procedures to be allocated
     unboxed on the stack.

 -- Instruction: local-bound? index
 -- Instruction: long-local-bound? index
     Push ‘#t’ on the stack if the ‘index’th local variable has been
     assigned, or ‘#f’ otherwise.  Mostly useful for handling optional
     arguments in procedure prologues.


File: guile.info,  Node: Top-Level Environment Instructions,  Next: Procedure Call and Return Instructions,  Prev: Lexical Environment Instructions,  Up: Instruction Set

9.3.6.2 Top-Level Environment Instructions
..........................................

These instructions access values in the top-level environment: bindings
that were not lexically apparent at the time that the code in question
was compiled.

   The location in which a toplevel binding is stored can be looked up
once and cached for later.  The binding itself may change over time, but
its location will stay constant.

   Currently only toplevel references within procedures are cached, as
only procedures have a place to cache them, in their object tables.

 -- Instruction: toplevel-ref index
 -- Instruction: long-toplevel-ref index
     Push the value of the toplevel binding whose location is stored in
     at position INDEX in the current procedure’s object table.  The
     ‘long-’ variant encodes the index over two bytes.

     Initially, a cell in a procedure’s object table that is used by
     ‘toplevel-ref’ is initialized to one of two forms.  The normal case
     is that the cell holds a symbol, whose binding will be looked up
     relative to the module that was current when the current program
     was created.

     Alternately, the lookup may be performed relative to a particular
     module, determined at compile-time (e.g. via ‘@’ or ‘@@’).  In that
     case, the cell in the object table holds a list: ‘(MODNAME SYM
     PUBLIC?)’.  The symbol SYM will be looked up in the module named
     MODNAME (a list of symbols).  The lookup will be performed against
     the module’s public interface, unless PUBLIC? is ‘#f’, which it is
     for example when compiling ‘@@’.

     In any case, if the symbol is unbound, an error is signalled.
     Otherwise the initial form is replaced with the looked-up variable,
     an in-place mutation of the object table.  This mechanism provides
     for lazy variable resolution, and an important cached fast-path
     once the variable has been successfully resolved.

     This instruction pushes the value of the variable onto the stack.

 -- Instruction: toplevel-set index
 -- Instruction: long-toplevel-set index
     Pop a value off the stack, and set it as the value of the toplevel
     variable stored at INDEX in the object table.  If the variable has
     not yet been looked up, we do the lookup as in ‘toplevel-ref’.

 -- Instruction: define
     Pop a symbol and a value from the stack, in that order.  Look up
     its binding in the current toplevel environment, creating the
     binding if necessary.  Set the variable to the value.

 -- Instruction: link-now
     Pop a value, X, from the stack.  Look up the binding for X,
     according to the rules for ‘toplevel-ref’, and push that variable
     on the stack.  If the lookup fails, an error will be signalled.

     This instruction is mostly used when loading programs, because it
     can do toplevel variable lookups without an object table.

 -- Instruction: variable-ref
     Dereference the variable object which is on top of the stack and
     replace it by the value of the variable it represents.

 -- Instruction: variable-set
     Pop off two objects from the stack, a variable and a value, and set
     the variable to the value.

 -- Instruction: variable-bound?
     Pop off the variable object from top of the stack and push ‘#t’ if
     it is bound, or ‘#f’ otherwise.  Mostly useful in procedure
     prologues for defining default values for boxed optional variables.

 -- Instruction: make-variable
     Replace the top object on the stack with a variable containing it.
     Used in some circumstances when compiling ‘letrec’ expressions.


File: guile.info,  Node: Procedure Call and Return Instructions,  Next: Function Prologue Instructions,  Prev: Top-Level Environment Instructions,  Up: Instruction Set

9.3.6.3 Procedure Call and Return Instructions
..............................................

 -- Instruction: new-frame
     Push a new frame on the stack, reserving space for the dynamic
     link, return address, and the multiple-values return address.  The
     frame pointer is not yet updated, because the frame is not yet
     active – it has to be patched by a ‘call’ instruction to get the
     return address.

 -- Instruction: call nargs
     Call the procedure located at ‘sp[-nargs]’ with the NARGS arguments
     located from ‘sp[-nargs + 1]’ to ‘sp[0]’.

     This instruction requires that a new frame be pushed on the stack
     before the procedure, via ‘new-frame’.  *Note Stack Layout::, for
     more information.  It patches up that frame with the current ‘ip’
     as the return address, then dispatches to the first instruction in
     the called procedure, relying on the called procedure to return one
     value to the newly-created continuation.  Because the new frame
     pointer will point to ‘sp[-nargs + 1]’, the arguments don’t have to
     be shuffled around – they are already in place.

 -- Instruction: tail-call nargs
     Transfer control to the procedure located at ‘sp[-nargs]’ with the
     NARGS arguments located from ‘sp[-nargs + 1]’ to ‘sp[0]’.

     Unlike ‘call’, which requires a new frame to be pushed onto the
     stack, ‘tail-call’ simply shuffles down the procedure and arguments
     to the current stack frame.  This instruction implements tail calls
     as required by RnRS.

 -- Instruction: apply nargs
 -- Instruction: tail-apply nargs
     Like ‘call’ and ‘tail-call’, except that the top item on the stack
     must be a list.  The elements of that list are then pushed on the
     stack and treated as additional arguments, replacing the list
     itself, then the procedure is invoked as usual.

 -- Instruction: call/nargs
 -- Instruction: tail-call/nargs
     These are like ‘call’ and ‘tail-call’, except they take the number
     of arguments from the stack instead of the instruction stream.
     These instructions are used in the implementation of multiple value
     returns, where the actual number of values is pushed on the stack.

 -- Instruction: mv-call nargs offset
     Like ‘call’, except that a multiple-value continuation is created
     in addition to a single-value continuation.

     The offset (a three-byte value) is an offset within the instruction
     stream; the multiple-value return address in the new frame (*note
     Stack Layout::) will be set to the normal return address plus this
     offset.  Instructions at that offset will expect the top value of
     the stack to be the number of values, and below that values
     themselves, pushed separately.

 -- Instruction: return
     Free the program’s frame, returning the top value from the stack to
     the current continuation.  (The stack should have exactly one value
     on it.)

     Specifically, the ‘sp’ is decremented to one below the current
     ‘fp’, the ‘ip’ is reset to the current return address, the ‘fp’ is
     reset to the value of the current dynamic link, and then the
     returned value is pushed on the stack.

 -- Instruction: return/values nvalues
 -- Instruction: return/nvalues
     Return the top NVALUES to the current continuation.  In the case of
     ‘return/nvalues’, NVALUES itself is first popped from the top of
     the stack.

     If the current continuation is a multiple-value continuation,
     ‘return/values’ pushes the number of values on the stack, then
     returns as in ‘return’, but to the multiple-value return address.

     Otherwise if the current continuation accepts only one value, i.e.
     the multiple-value return address is ‘NULL’, then we assume the
     user only wants one value, and we give them the first one.  If
     there are no values, an error is signaled.

 -- Instruction: return/values* nvalues
     Like a combination of ‘apply’ and ‘return/values’, in which the top
     value on the stack is interpreted as a list of additional values.
     This is an optimization for the common ‘(apply values ...)’ case.

 -- Instruction: truncate-values nbinds nrest
     Used in multiple-value continuations, this instruction takes the
     values that are on the stack (including the number-of-values
     marker) and truncates them for a binding construct.

     For example, a call to ‘(receive (x y . z) (foo) ...)’ would,
     logically speaking, pop off the values returned from ‘(foo)’ and
     push them as three values, corresponding to ‘x’, ‘y’, and ‘z’.  In
     that case, NBINDS would be 3, and NREST would be 1 (to indicate
     that one of the bindings was a rest argument).

     Signals an error if there is an insufficient number of values.

 -- Instruction: call/cc
 -- Instruction: tail-call/cc
     Capture the current continuation, and then call (or tail-call) the
     procedure on the top of the stack, with the continuation as the
     argument.

     ‘call/cc’ does not require a ‘new-frame’ to be pushed on the stack,
     as ‘call’ does, because it needs to capture the stack before the
     frame is pushed.

     Both the VM continuation and the C continuation are captured.


File: guile.info,  Node: Function Prologue Instructions,  Next: Trampoline Instructions,  Prev: Procedure Call and Return Instructions,  Up: Instruction Set

9.3.6.4 Function Prologue Instructions
......................................

A function call in Guile is very cheap: the VM simply hands control to
the procedure.  The procedure itself is responsible for asserting that
it has been passed an appropriate number of arguments.  This strategy
allows arbitrarily complex argument parsing idioms to be developed,
without harming the common case.

   For example, only calls to keyword-argument procedures “pay” for the
cost of parsing keyword arguments.  (At the time of this writing,
calling procedures with keyword arguments is typically two to four times
as costly as calling procedures with a fixed set of arguments.)

 -- Instruction: assert-nargs-ee n
 -- Instruction: assert-nargs-ge n
     Assert that the current procedure has been passed exactly N
     arguments, for the ‘-ee’ case, or N or more arguments, for the
     ‘-ge’ case.  N is encoded over two bytes.

     The number of arguments is determined by subtracting the frame
     pointer from the stack pointer (‘sp - (fp -1)’).  *Note Stack
     Layout::, for more details on stack frames.

 -- Instruction: br-if-nargs-ne n offset
 -- Instruction: br-if-nargs-gt n offset
 -- Instruction: br-if-nargs-lt n offset
     Jump to OFFSET if the number of arguments is not equal to, greater
     than, or less than N.  N is encoded over two bytes, and OFFSET has
     the normal three-byte encoding.

     These instructions are used to implement multiple arities, as in
     ‘case-lambda’.  *Note Case-lambda::, for more information.

 -- Instruction: bind-optionals n
     If the procedure has been called with fewer than N arguments, fill
     in the remaining arguments with an unbound value (‘SCM_UNDEFINED’).
     N is encoded over two bytes.

     The optionals can be later initialized conditionally via the
     ‘local-bound?’ instruction.

 -- Instruction: push-rest n
     Pop off excess arguments (more than N), collecting them into a
     list, and push that list.  Used to bind a rest argument, if the
     procedure has no keyword arguments.  Procedures with keyword
     arguments use ‘bind-rest’ instead.

 -- Instruction: bind-rest n idx
     Pop off excess arguments (more than N), collecting them into a
     list.  The list is then assigned to the IDXth local variable.

 -- Instruction: bind-optionals/shuffle nreq nreq-and-opt ntotal
 -- Instruction: bind-optionals/shuffle-or-br nreq nreq-and-opt ntotal
          offset
     Shuffle keyword arguments to the top of the stack, filling in the
     holes with ‘SCM_UNDEFINED’.  Each argument is encoded over two
     bytes.

     This instruction is used by procedures with keyword arguments.
     NREQ is the number of required arguments to the procedure, and
     NREQ-AND-OPT is the total number of positional arguments (required
     plus optional).  ‘bind-optionals/shuffle’ will scan the stack from
     the NREQth argument up to the NREQ-AND-OPTth, and start shuffling
     when it sees the first keyword argument or runs out of positional
     arguments.

     ‘bind-optionals/shuffle-or-br’ does the same, except that it checks
     if there are too many positional arguments before shuffling.  If
     this is the case, it jumps to OFFSET, encoded using the normal
     three-byte encoding.

     Shuffling simply moves the keyword arguments past the total number
     of arguments, NTOTAL, which includes keyword and rest arguments.
     The free slots created by the shuffle are filled in with
     ‘SCM_UNDEFINED’, so they may be conditionally initialized later in
     the function’s prologue.

 -- Instruction: bind-kwargs idx ntotal flags
     Parse keyword arguments, assigning their values to the
     corresponding local variables.  The keyword arguments should
     already have been shuffled above the NTOTALth stack slot by
     ‘bind-optionals/shuffle’.

     The parsing is driven by a keyword arguments association list,
     looked up from the IDXth element of the procedures object array.
     The alist is a list of pairs of the form ‘(KW . INDEX)’, mapping
     keyword arguments to their local variable indices.

     There are two bitflags that affect the parser, ‘allow-other-keys?’
     (‘0x1’) and ‘rest?’ (‘0x2’).  Unless ‘allow-other-keys?’ is set,
     the parser will signal an error if an unknown key is found.  If
     ‘rest?’ is set, errors parsing the keyword arguments will be
     ignored, as a later ‘bind-rest’ instruction will collect all of the
     tail arguments, including the keywords, into a list.  Otherwise if
     the keyword arguments are invalid, an error is signalled.

     IDX and NTOTAL are encoded over two bytes each, and FLAGS is
     encoded over one byte.

 -- Instruction: reserve-locals n
     Resets the stack pointer to have space for N local variables,
     including the arguments.  If this operation increments the stack
     pointer, as in a push, the new slots are filled with ‘SCM_UNBOUND’.
     If this operation decrements the stack pointer, any excess values
     are dropped.

     ‘reserve-locals’ is typically used after argument parsing to
     reserve space for local variables.

 -- Instruction: assert-nargs-ee/locals n
 -- Instruction: assert-nargs-ge/locals n
     A combination of ‘assert-nargs-ee’ and ‘reserve-locals’.  The
     number of arguments is encoded in the lower three bits of N, a
     one-byte value.  The number of additional local variables is take
     from the upper 5 bits of N.


File: guile.info,  Node: Trampoline Instructions,  Next: Branch Instructions,  Prev: Function Prologue Instructions,  Up: Instruction Set

9.3.6.5 Trampoline Instructions
...............................

Though most applicable objects in Guile are procedures implemented in
bytecode, not all are.  There are primitives, continuations, and other
procedure-like objects that have their own calling convention.  Instead
of adding special cases to the ‘call’ instruction, Guile wraps these
other applicable objects in VM trampoline procedures, then provides
special support for these objects in bytecode.

   Trampoline procedures are typically generated by Guile at runtime,
for example in response to a call to ‘scm_c_make_gsubr’.  As such, a
compiler probably shouldn’t emit code with these instructions.  However,
it’s still interesting to know how these things work, so we document
these trampoline instructions here.

 -- Instruction: subr-call nargs
     Pop off a foreign pointer (which should have been pushed on by the
     trampoline), and call it directly, with the NARGS arguments from
     the stack.  Return the resulting value or values to the calling
     procedure.

 -- Instruction: foreign-call nargs
     Pop off an internal foreign object (which should have been pushed
     on by the trampoline), and call that foreign function with the
     NARGS arguments from the stack.  Return the resulting value to the
     calling procedure.

 -- Instruction: continuation-call
     Pop off an internal continuation object (which should have been
     pushed on by the trampoline), and reinstate that continuation.  All
     of the procedure’s arguments are passed to the continuation.  Does
     not return.

 -- Instruction: partial-cont-call
     Pop off two objects from the stack: the dynamic winds associated
     with the partial continuation, and the VM continuation object.
     Unroll the continuation onto the stack, rewinding the dynamic
     environment and overwriting the current frame, and pass all
     arguments to the continuation.  Control flow proceeds where the
     continuation was captured.


File: guile.info,  Node: Branch Instructions,  Next: Data Constructor Instructions,  Prev: Trampoline Instructions,  Up: Instruction Set

9.3.6.6 Branch Instructions
...........................

All the conditional branch instructions described below work in the same
way:

   • They pop off Scheme object(s) located on the stack for use in the
     branch condition
   • If the condition is true, then the instruction pointer is increased
     by the offset passed as an argument to the branch instruction;
   • Program execution proceeds with the next instruction (that is, the
     one to which the instruction pointer points).

   Note that the offset passed to the instruction is encoded as three
8-bit integers, in big-endian order, effectively giving Guile a 24-bit
relative address space.

 -- Instruction: br offset
     Jump to OFFSET.  No values are popped.

 -- Instruction: br-if offset
     Jump to OFFSET if the object on the stack is not false.

 -- Instruction: br-if-not offset
     Jump to OFFSET if the object on the stack is false.

 -- Instruction: br-if-eq offset
     Jump to OFFSET if the two objects located on the stack are equal in
     the sense of ‘eq?’.  Note that, for this instruction, the stack
     pointer is decremented by two Scheme objects instead of only one.

 -- Instruction: br-if-not-eq offset
     Same as ‘br-if-eq’ for non-‘eq?’ objects.

 -- Instruction: br-if-null offset
     Jump to OFFSET if the object on the stack is ‘'()’.

 -- Instruction: br-if-not-null offset
     Jump to OFFSET if the object on the stack is not ‘'()’.


File: guile.info,  Node: Data Constructor Instructions,  Next: Loading Instructions,  Prev: Branch Instructions,  Up: Instruction Set

9.3.6.7 Data Constructor Instructions
.....................................

These instructions push simple immediate values onto the stack, or
construct compound data structures from values on the stack.

 -- Instruction: make-int8 value
     Push VALUE, an 8-bit integer, onto the stack.

 -- Instruction: make-int8:0
     Push the immediate value ‘0’ onto the stack.

 -- Instruction: make-int8:1
     Push the immediate value ‘1’ onto the stack.

 -- Instruction: make-int16 value
     Push VALUE, a 16-bit integer, onto the stack.

 -- Instruction: make-uint64 value
     Push VALUE, an unsigned 64-bit integer, onto the stack.  The value
     is encoded in 8 bytes, most significant byte first (big-endian).

 -- Instruction: make-int64 value
     Push VALUE, a signed 64-bit integer, onto the stack.  The value is
     encoded in 8 bytes, most significant byte first (big-endian), in
     twos-complement arithmetic.

 -- Instruction: make-false
     Push ‘#f’ onto the stack.

 -- Instruction: make-true
     Push ‘#t’ onto the stack.

 -- Instruction: make-nil
     Push ‘#nil’ onto the stack.

 -- Instruction: make-eol
     Push ‘'()’ onto the stack.

 -- Instruction: make-char8 value
     Push VALUE, an 8-bit character, onto the stack.

 -- Instruction: make-char32 value
     Push VALUE, an 32-bit character, onto the stack.  The value is
     encoded in big-endian order.

 -- Instruction: make-symbol
     Pops a string off the stack, and pushes a symbol.

 -- Instruction: make-keyword value
     Pops a symbol off the stack, and pushes a keyword.

 -- Instruction: list n
     Pops off the top N values off of the stack, consing them up into a
     list, then pushes that list on the stack.  What was the topmost
     value will be the last element in the list.  N is a two-byte value,
     most significant byte first.

 -- Instruction: vector n
     Create and fill a vector with the top N values from the stack,
     popping off those values and pushing on the resulting vector.  N is
     a two-byte value, like in ‘vector’.

 -- Instruction: make-struct n
     Make a new struct from the top N values on the stack.  The values
     are popped, and the new struct is pushed.

     The deepest value is used as the vtable for the struct, and the
     rest are used in order as the field initializers.  Tail arrays are
     not supported by this instruction.

 -- Instruction: make-array n
     Pop an array shape from the stack, then pop the remaining N values,
     pushing a new array.  N is encoded over three bytes.

     The array shape should be appropriate to store N values.  *Note
     Array Procedures::, for more information on array shapes.

   Many of these data structures are constant, never changing over the
course of the different invocations of the procedure.  In that case it
is often advantageous to make them once when the procedure is created,
and just reference them from the object table thereafter.  *Note
Variables and the VM::, for more information on the object table.

 -- Instruction: object-ref n
 -- Instruction: long-object-ref n
     Push Nth value from the current program’s object vector.  The
     “long” variant has a 16-bit index instead of an 8-bit index.


File: guile.info,  Node: Loading Instructions,  Next: Dynamic Environment Instructions,  Prev: Data Constructor Instructions,  Up: Instruction Set

9.3.6.8 Loading Instructions
............................

In addition to VM instructions, an instruction stream may contain
variable-length data embedded within it.  This data is always preceded
by special loading instructions, which interpret the data and advance
the instruction pointer to the next VM instruction.

   All of these loading instructions have a ‘length’ parameter,
indicating the size of the embedded data, in bytes.  The length itself
is encoded in 3 bytes.

 -- Instruction: load-number length
     Load an arbitrary number from the instruction stream.  The number
     is embedded in the stream as a string.
 -- Instruction: load-string length
     Load a string from the instruction stream.  The string is assumed
     to be encoded in the “latin1” locale.
 -- Instruction: load-wide-string length
     Load a UTF-32 string from the instruction stream.  LENGTH is the
     length in bytes, not in codepoints.
 -- Instruction: load-symbol length
     Load a symbol from the instruction stream.  The symbol is assumed
     to be encoded in the “latin1” locale.  Symbols backed by wide
     strings may be loaded via ‘load-wide-string’ then ‘make-symbol’.
 -- Instruction: load-array length
     Load a uniform array from the instruction stream.  The shape and
     type of the array are popped off the stack, in that order.

 -- Instruction: load-program
     Load bytecode from the instruction stream, and push a compiled
     procedure.

     This instruction pops one value from the stack: the program’s
     object table, as a vector, or ‘#f’ in the case that the program has
     no object table.  A program that does not reference toplevel
     bindings and does not use ‘object-ref’ does not need an object
     table.

     This instruction is unlike the rest of the loading instructions,
     because instead of parsing its data, it directly maps the
     instruction stream onto a C structure, ‘struct scm_objcode’.  *Note
     Bytecode and Objcode::, for more information.

     The resulting compiled procedure will not have any free variables
     captured, so it may be loaded only once but used many times to
     create closures.


File: guile.info,  Node: Dynamic Environment Instructions,  Next: Miscellaneous Instructions,  Prev: Loading Instructions,  Up: Instruction Set

9.3.6.9 Dynamic Environment Instructions
........................................

Guile’s virtual machine has low-level support for ‘dynamic-wind’,
dynamic binding, and composable prompts and aborts.

 -- Instruction: wind
     Pop an unwind thunk and a wind thunk from the stack, in that order,
     and push them onto the “dynamic stack”.  The unwind thunk will be
     called on nonlocal exits, and the wind thunk on reentries.  Used to
     implement ‘dynamic-wind’.

     Note that neither thunk is actually called; the compiler should
     emit calls to wind and unwind for the normal dynamic-wind control
     flow.  *Note Dynamic Wind::.

 -- Instruction: unwind
     Pop off the top entry from the “dynamic stack”, for example, a
     wind/unwind thunk pair.  ‘unwind’ instructions should be properly
     paired with their winding instructions, like ‘wind’.

 -- Instruction: wind-fluids n
     Pop off N values and N fluids from the stack, in that order.  Set
     the fluids to the values by creating a with-fluids object and
     pushing that object on the dynamic stack.  *Note Fluids and Dynamic
     States::.

 -- Instruction: unwind-fluids
     Pop a with-fluids object from the dynamic stack, and swap the
     current values of its fluids with the saved values of its fluids.
     In this way, the dynamic environment is left as it was before the
     corresponding ‘wind-fluids’ instruction was processed.

 -- Instruction: fluid-ref
     Pop a fluid from the stack, and push its current value.

 -- Instruction: fluid-set
     Pop a value and a fluid from the stack, in that order, and set the
     fluid to the value.

 -- Instruction: prompt escape-only? offset
     Establish a dynamic prompt.  *Note Prompts::, for more information
     on prompts.

     The prompt will be pushed on the dynamic stack.  The normal control
     flow should ensure that the prompt is popped off at the end, via
     ‘unwind’.

     If an abort is made to this prompt, control will jump to OFFSET, a
     three-byte relative address.  The continuation and all arguments to
     the abort will be pushed on the stack, along with the total number
     of arguments (including the continuation.  If control returns to
     the handler, the prompt is already popped off by the abort
     mechanism.  (Guile’s ‘prompt’ implements Felleisen’s "–F–"
     operator.)

     If ESCAPE-ONLY? is nonzero, the prompt will be marked as
     escape-only, which allows an abort to this prompt to avoid reifying
     the continuation.

 -- Instruction: abort n
     Abort to a dynamic prompt.

     This instruction pops one tail argument list, N arguments, and a
     prompt tag from the stack.  The dynamic environment is then
     searched for a prompt having the given tag.  If none is found, an
     error is signalled.  Otherwise all arguments are passed to the
     prompt’s handler, along with the captured continuation, if
     necessary.

     If the prompt’s handler can be proven to not reference the captured
     continuation, no continuation is allocated.  This decision happens
     dynamically, at run-time; the general case is that the continuation
     may be captured, and thus resumed.  A reinstated continuation will
     have its arguments pushed on the stack, along with the number of
     arguments, as in the multiple-value return convention.  Therefore
     an ‘abort’ instruction should be followed by code ready to handle
     the equivalent of a multiply-valued return.


File: guile.info,  Node: Miscellaneous Instructions,  Next: Inlined Scheme Instructions,  Prev: Dynamic Environment Instructions,  Up: Instruction Set

9.3.6.10 Miscellaneous Instructions
...................................

 -- Instruction: nop
     Does nothing!  Used for padding other instructions to certain
     alignments.

 -- Instruction: halt
     Exits the VM, returning a SCM value.  Normally, this instruction is
     only part of the “bootstrap program”, a program run when a virtual
     machine is first entered; compiled Scheme procedures will not
     contain this instruction.

     If multiple values have been returned, the SCM value will be a
     multiple-values object (*note Multiple Values::).

 -- Instruction: break
     Does nothing, but invokes the break hook.

 -- Instruction: drop
     Pops off the top value from the stack, throwing it away.

 -- Instruction: dup
     Re-pushes the top value onto the stack.

 -- Instruction: void
     Pushes “the unspecified value” onto the stack.


File: guile.info,  Node: Inlined Scheme Instructions,  Next: Inlined Mathematical Instructions,  Prev: Miscellaneous Instructions,  Up: Instruction Set

9.3.6.11 Inlined Scheme Instructions
....................................

The Scheme compiler can recognize the application of standard Scheme
procedures.  It tries to inline these small operations to avoid the
overhead of creating new stack frames.

   Since most of these operations are historically implemented as C
primitives, not inlining them would entail constantly calling out from
the VM to the interpreter, which has some costs—registers must be saved,
the interpreter has to dispatch, called procedures have to do much type
checking, etc.  It’s much more efficient to inline these operations in
the virtual machine itself.

   All of these instructions pop their arguments from the stack and push
their results, and take no parameters from the instruction stream.
Thus, unlike in the previous sections, these instruction definitions
show stack parameters instead of parameters from the instruction stream.

 -- Instruction: not x
 -- Instruction: not-not x
 -- Instruction: eq? x y
 -- Instruction: not-eq? x y
 -- Instruction: null?
 -- Instruction: not-null?
 -- Instruction: eqv? x y
 -- Instruction: equal? x y
 -- Instruction: pair? x y
 -- Instruction: list? x
 -- Instruction: set-car! pair x
 -- Instruction: set-cdr! pair x
 -- Instruction: cons x y
 -- Instruction: car x
 -- Instruction: cdr x
 -- Instruction: vector-ref x y
 -- Instruction: vector-set x n y
 -- Instruction: struct? x
 -- Instruction: struct-ref x n
 -- Instruction: struct-set x n v
 -- Instruction: struct-vtable x
 -- Instruction: class-of x
 -- Instruction: slot-ref struct n
 -- Instruction: slot-set struct n x
     Inlined implementations of their Scheme equivalents.

   Note that ‘caddr’ and friends compile to a series of ‘car’ and ‘cdr’
instructions.


File: guile.info,  Node: Inlined Mathematical Instructions,  Next: Inlined Bytevector Instructions,  Prev: Inlined Scheme Instructions,  Up: Instruction Set

9.3.6.12 Inlined Mathematical Instructions
..........................................

Inlining mathematical operations has the obvious advantage of handling
fixnums without function calls or allocations.  The trick, of course, is
knowing when the result of an operation will be a fixnum, and there
might be a couple bugs here.

   More instructions could be added here over time.

   As in the previous section, the definitions below show stack
parameters instead of instruction stream parameters.

 -- Instruction: add x y
 -- Instruction: add1 x
 -- Instruction: sub x y
 -- Instruction: sub1 x
 -- Instruction: mul x y
 -- Instruction: div x y
 -- Instruction: quo x y
 -- Instruction: rem x y
 -- Instruction: mod x y
 -- Instruction: ee? x y
 -- Instruction: lt? x y
 -- Instruction: gt? x y
 -- Instruction: le? x y
 -- Instruction: ge? x y
 -- Instruction: ash x n
 -- Instruction: logand x y
 -- Instruction: logior x y
 -- Instruction: logxor x y
     Inlined implementations of the corresponding mathematical
     operations.


File: guile.info,  Node: Inlined Bytevector Instructions,  Prev: Inlined Mathematical Instructions,  Up: Instruction Set

9.3.6.13 Inlined Bytevector Instructions
........................................

Bytevector operations correspond closely to what the current hardware
can do, so it makes sense to inline them to VM instructions, providing a
clear path for eventual native compilation.  Without this, Scheme
programs would need other primitives for accessing raw bytes – but these
primitives are as good as any.

   As in the previous section, the definitions below show stack
parameters instead of instruction stream parameters.

   The multibyte formats (‘u16’, ‘f64’, etc) take an extra endianness
argument.  Only aligned native accesses are currently fast-pathed in
Guile’s VM.

 -- Instruction: bv-u8-ref bv n
 -- Instruction: bv-s8-ref bv n
 -- Instruction: bv-u16-native-ref bv n
 -- Instruction: bv-s16-native-ref bv n
 -- Instruction: bv-u32-native-ref bv n
 -- Instruction: bv-s32-native-ref bv n
 -- Instruction: bv-u64-native-ref bv n
 -- Instruction: bv-s64-native-ref bv n
 -- Instruction: bv-f32-native-ref bv n
 -- Instruction: bv-f64-native-ref bv n
 -- Instruction: bv-u16-ref bv n endianness
 -- Instruction: bv-s16-ref bv n endianness
 -- Instruction: bv-u32-ref bv n endianness
 -- Instruction: bv-s32-ref bv n endianness
 -- Instruction: bv-u64-ref bv n endianness
 -- Instruction: bv-s64-ref bv n endianness
 -- Instruction: bv-f32-ref bv n endianness
 -- Instruction: bv-f64-ref bv n endianness
 -- Instruction: bv-u8-set bv n val
 -- Instruction: bv-s8-set bv n val
 -- Instruction: bv-u16-native-set bv n val
 -- Instruction: bv-s16-native-set bv n val
 -- Instruction: bv-u32-native-set bv n val
 -- Instruction: bv-s32-native-set bv n val
 -- Instruction: bv-u64-native-set bv n val
 -- Instruction: bv-s64-native-set bv n val
 -- Instruction: bv-f32-native-set bv n val
 -- Instruction: bv-f64-native-set bv n val
 -- Instruction: bv-u16-set bv n val endianness
 -- Instruction: bv-s16-set bv n val endianness
 -- Instruction: bv-u32-set bv n val endianness
 -- Instruction: bv-s32-set bv n val endianness
 -- Instruction: bv-u64-set bv n val endianness
 -- Instruction: bv-s64-set bv n val endianness
 -- Instruction: bv-f32-set bv n val endianness
 -- Instruction: bv-f64-set bv n val endianness
     Inlined implementations of the corresponding bytevector operations.


File: guile.info,  Node: Compiling to the Virtual Machine,  Prev: A Virtual Machine for Guile,  Up: Guile Implementation

9.4 Compiling to the Virtual Machine
====================================

Compilers have a mystique about them that is attractive and off-putting
at the same time.  They are attractive because they are magical – they
transform inert text into live results, like throwing the switch on
Frankenstein’s monster.  However, this magic is perceived by many to be
impenetrable.

   This section aims to pay attention to the small man behind the
curtain.

   *Note Read/Load/Eval/Compile::, if you’re lost and you just wanted to
know how to compile your ‘.scm’ file.

* Menu:

* Compiler Tower::                   
* The Scheme Compiler::                   
* Tree-IL::                 
* GLIL::                
* Assembly::                   
* Bytecode and Objcode::                   
* Writing New High-Level Languages::
* Extending the Compiler::


File: guile.info,  Node: Compiler Tower,  Next: The Scheme Compiler,  Up: Compiling to the Virtual Machine

9.4.1 Compiler Tower
--------------------

Guile’s compiler is quite simple, actually – its _compilers_, to put it
more accurately.  Guile defines a tower of languages, starting at Scheme
and progressively simplifying down to languages that resemble the VM
instruction set (*note Instruction Set::).

   Each language knows how to compile to the next, so each step is
simple and understandable.  Furthermore, this set of languages is not
hardcoded into Guile, so it is possible for the user to add new
high-level languages, new passes, or even different compilation targets.

   Languages are registered in the module, ‘(system base language)’:

     (use-modules (system base language))

   They are registered with the ‘define-language’ form.

 -- Scheme Syntax: define-language [#:name] [#:title] [#:reader]
          [#:printer] [#:parser=#f] [#:compilers='()]
          [#:decompilers='()] [#:evaluator=#f] [#:joiner=#f]
          [#:for-humans?=#t]
          [#:make-default-environment=make-fresh-user-module]
     Define a language.

     This syntax defines a ‘#<language>’ object, bound to NAME in the
     current environment.  In addition, the language will be added to
     the global language set.  For example, this is the language
     definition for Scheme:

          (define-language scheme
            #:title	"Scheme"
            #:reader      (lambda (port env) ...)
            #:compilers   `((tree-il . ,compile-tree-il))
            #:decompilers `((tree-il . ,decompile-tree-il))
            #:evaluator	(lambda (x module) (primitive-eval x))
            #:printer	write
            #:make-default-environment (lambda () ...))

   The interesting thing about having languages defined this way is that
they present a uniform interface to the read-eval-print loop.  This
allows the user to change the current language of the REPL:

     scheme@(guile-user)> ,language tree-il
     Happy hacking with Tree Intermediate Language!  To switch back, type `,L scheme'.
     tree-il@(guile-user)> ,L scheme
     Happy hacking with Scheme!  To switch back, type `,L tree-il'.
     scheme@(guile-user)>

   Languages can be looked up by name, as they were above.

 -- Scheme Procedure: lookup-language name
     Looks up a language named NAME, autoloading it if necessary.

     Languages are autoloaded by looking for a variable named NAME in a
     module named ‘(language NAME spec)’.

     The language object will be returned, or ‘#f’ if there does not
     exist a language with that name.

   Defining languages this way allows us to programmatically determine
the necessary steps for compiling code from one language to another.

 -- Scheme Procedure: lookup-compilation-order from to
     Recursively traverses the set of languages to which FROM can
     compile, depth-first, and return the first path that can transform
     FROM to TO.  Returns ‘#f’ if no path is found.

     This function memoizes its results in a cache that is invalidated
     by subsequent calls to ‘define-language’, so it should be quite
     fast.

   There is a notion of a “current language”, which is maintained in the
‘current-language’ parameter, defined in the core ‘(guile)’ module.
This language is normally Scheme, and may be rebound by the user.  The
run-time compilation interfaces (*note Read/Load/Eval/Compile::) also
allow you to choose other source and target languages.

   The normal tower of languages when compiling Scheme goes like this:

   • Scheme
   • Tree Intermediate Language (Tree-IL)
   • Guile Lowlevel Intermediate Language (GLIL)
   • Assembly
   • Bytecode
   • Objcode

   Object code may be serialized to disk directly, though it has a
cookie and version prepended to the front.  But when compiling Scheme at
run time, you want a Scheme value: for example, a compiled procedure.
For this reason, so as not to break the abstraction, Guile defines a
fake language at the bottom of the tower:

   • Value

   Compiling to ‘value’ loads the object code into a procedure, and
wakes the sleeping giant.

   Perhaps this strangeness can be explained by example: ‘compile-file’
defaults to compiling to object code, because it produces object code
that has to live in the barren world outside the Guile runtime; but
‘compile’ defaults to compiling to ‘value’, as its product re-enters the
Guile world.

   Indeed, the process of compilation can circulate through these
different worlds indefinitely, as shown by the following quine:

     ((lambda (x) ((compile x) x)) '(lambda (x) ((compile x) x)))


File: guile.info,  Node: The Scheme Compiler,  Next: Tree-IL,  Prev: Compiler Tower,  Up: Compiling to the Virtual Machine

9.4.2 The Scheme Compiler
-------------------------

The job of the Scheme compiler is to expand all macros and all of Scheme
to its most primitive expressions.  The definition of “primitive” is
given by the inventory of constructs provided by Tree-IL, the target
language of the Scheme compiler: procedure applications, conditionals,
lexical references, etc.  This is described more fully in the next
section.

   The tricky and amusing thing about the Scheme-to-Tree-IL compiler is
that it is completely implemented by the macro expander.  Since the
macro expander has to run over all of the source code already in order
to expand macros, it might as well do the analysis at the same time,
producing Tree-IL expressions directly.

   Because this compiler is actually the macro expander, it is
extensible.  Any macro which the user writes becomes part of the
compiler.

   The Scheme-to-Tree-IL expander may be invoked using the generic
‘compile’ procedure:

     (compile '(+ 1 2) #:from 'scheme #:to 'tree-il)
     ⇒
      #<<application> src: #f
                      proc: #<<toplevel-ref> src: #f name: +>
                      args: (#<<const> src: #f exp: 1>
                             #<<const> src: #f exp: 2>)>

   Or, since Tree-IL is so close to Scheme, it is often useful to expand
Scheme to Tree-IL, then translate back to Scheme.  For that reason the
expander provides two interfaces.  The former is equivalent to calling
‘(macroexpand '(+ 1 2) 'c)’, where the ‘'c’ is for “compile”.  With ‘'e’
(the default), the result is translated back to Scheme:

     (macroexpand '(+ 1 2))
     ⇒ (+ 1 2)
     (macroexpand '(let ((x 10)) (* x x)))
     ⇒ (let ((x84 10)) (* x84 x84))

   The second example shows that as part of its job, the macro expander
renames lexically-bound variables.  The original names are preserved
when compiling to Tree-IL, but can’t be represented in Scheme: a lexical
binding only has one name.  It is for this reason that the _native_
output of the expander is _not_ Scheme.  There’s too much information we
would lose if we translated to Scheme directly: lexical variable names,
source locations, and module hygiene.

   Note however that ‘macroexpand’ does not have the same signature as
‘compile-tree-il’.  ‘compile-tree-il’ is a small wrapper around
‘macroexpand’, to make it conform to the general form of compiler
procedures in Guile’s language tower.

   Compiler procedures take three arguments: an expression, an
environment, and a keyword list of options.  They return three values:
the compiled expression, the corresponding environment for the target
language, and a “continuation environment”.  The compiled expression and
environment will serve as input to the next language’s compiler.  The
“continuation environment” can be used to compile another expression
from the same source language within the same module.

   For example, you might compile the expression, ‘(define-module
(foo))’.  This will result in a Tree-IL expression and environment.  But
if you compiled a second expression, you would want to take into account
the compile-time effect of compiling the previous expression, which puts
the user in the ‘(foo)’ module.  That is purpose of the “continuation
environment”; you would pass it as the environment when compiling the
subsequent expression.

   For Scheme, an environment is a module.  By default, the ‘compile’
and ‘compile-file’ procedures compile in a fresh module, such that
bindings and macros introduced by the expression being compiled are
isolated:

     (eq? (current-module) (compile '(current-module)))
     ⇒ #f

     (compile '(define hello 'world))
     (defined? 'hello)
     ⇒ #f

     (define / *)
     (eq? (compile '/) /)
     ⇒ #f

   Similarly, changes to the ‘current-reader’ fluid (*note
‘current-reader’: Loading.) are isolated:

     (compile '(fluid-set! current-reader (lambda args 'fail)))
     (fluid-ref current-reader)
     ⇒ #f

   Nevertheless, having the compiler and "compilee" share the same name
space can be achieved by explicitly passing ‘(current-module)’ as the
compilation environment:

     (define hello 'world)
     (compile 'hello #:env (current-module))
     ⇒ world


File: guile.info,  Node: Tree-IL,  Next: GLIL,  Prev: The Scheme Compiler,  Up: Compiling to the Virtual Machine

9.4.3 Tree-IL
-------------

Tree Intermediate Language (Tree-IL) is a structured intermediate
language that is close in expressive power to Scheme.  It is an
expanded, pre-analyzed Scheme.

   Tree-IL is “structured” in the sense that its representation is based
on records, not S-expressions.  This gives a rigidity to the language
that ensures that compiling to a lower-level language only requires a
limited set of transformations.  For example, the Tree-IL type ‘<const>’
is a record type with two fields, ‘src’ and ‘exp’.  Instances of this
type are created via ‘make-const’.  Fields of this type are accessed via
the ‘const-src’ and ‘const-exp’ procedures.  There is also a predicate,
‘const?’.  *Note Records::, for more information on records.

   All Tree-IL types have a ‘src’ slot, which holds source location
information for the expression.  This information, if present, will be
residualized into the compiled object code, allowing backtraces to show
source information.  The format of ‘src’ is the same as that returned by
Guile’s ‘source-properties’ function.  *Note Source Properties::, for
more information.

   Although Tree-IL objects are represented internally using records,
there is also an equivalent S-expression external representation for
each kind of Tree-IL. For example, the S-expression representation of
‘#<const src: #f exp: 3>’ expression would be:

     (const 3)

   Users may program with this format directly at the REPL:

     scheme@(guile-user)> ,language tree-il
     Happy hacking with Tree Intermediate Language!  To switch back, type `,L scheme'.
     tree-il@(guile-user)> (apply (primitive +) (const 32) (const 10))
     ⇒ 42

   The ‘src’ fields are left out of the external representation.

   One may create Tree-IL objects from their external representations
via calling ‘parse-tree-il’, the reader for Tree-IL. If any source
information is attached to the input S-expression, it will be propagated
to the resulting Tree-IL expressions.  This is probably the easiest way
to compile to Tree-IL: just make the appropriate external
representations in S-expression format, and let ‘parse-tree-il’ take
care of the rest.

 -- Scheme Variable: <void> src
 -- External Representation: (void)
     An empty expression.  In practice, equivalent to Scheme’s ‘(if #f
     #f)’.
 -- Scheme Variable: <const> src exp
 -- External Representation: (const EXP)
     A constant.
 -- Scheme Variable: <primitive-ref> src name
 -- External Representation: (primitive NAME)
     A reference to a “primitive”.  A primitive is a procedure that,
     when compiled, may be open-coded.  For example, ‘cons’ is usually
     recognized as a primitive, so that it compiles down to a single
     instruction.

     Compilation of Tree-IL usually begins with a pass that resolves
     some ‘<module-ref>’ and ‘<toplevel-ref>’ expressions to
     ‘<primitive-ref>’ expressions.  The actual compilation pass has
     special cases for applications of certain primitives, like ‘apply’
     or ‘cons’.
 -- Scheme Variable: <lexical-ref> src name gensym
 -- External Representation: (lexical NAME GENSYM)
     A reference to a lexically-bound variable.  The NAME is the
     original name of the variable in the source program.  GENSYM is a
     unique identifier for this variable.
 -- Scheme Variable: <lexical-set> src name gensym exp
 -- External Representation: (set! (lexical NAME GENSYM) EXP)
     Sets a lexically-bound variable.
 -- Scheme Variable: <module-ref> src mod name public?
 -- External Representation: ( @ MOD NAME)
 -- External Representation: ( @@ MOD NAME)
     A reference to a variable in a specific module.  MOD should be the
     name of the module, e.g. ‘(guile-user)’.

     If PUBLIC? is true, the variable named NAME will be looked up in
     MOD’s public interface, and serialized with ‘@’; otherwise it will
     be looked up among the module’s private bindings, and is serialized
     with ‘@@’.
 -- Scheme Variable: <module-set> src mod name public? exp
 -- External Representation: (set! (@ MOD NAME) EXP)
 -- External Representation: (set! (@@ MOD NAME) EXP)
     Sets a variable in a specific module.
 -- Scheme Variable: <toplevel-ref> src name
 -- External Representation: (toplevel NAME)
     References a variable from the current procedure’s module.
 -- Scheme Variable: <toplevel-set> src name exp
 -- External Representation: (set! (toplevel NAME) EXP)
     Sets a variable in the current procedure’s module.
 -- Scheme Variable: <toplevel-define> src name exp
 -- External Representation: (define (toplevel NAME) EXP)
     Defines a new top-level variable in the current procedure’s module.
 -- Scheme Variable: <conditional> src test then else
 -- External Representation: (if TEST THEN ELSE)
     A conditional.  Note that ELSE is not optional.
 -- Scheme Variable: <application> src proc args
 -- External Representation: (apply PROC . ARGS)
     A procedure call.
 -- Scheme Variable: <sequence> src exps
 -- External Representation: (begin . EXPS)
     Like Scheme’s ‘begin’.
 -- Scheme Variable: <lambda> src meta body
 -- External Representation: (lambda META BODY)
     A closure.  META is an association list of properties for the
     procedure.  BODY is a single Tree-IL expression of type
     ‘<lambda-case>’.  As the ‘<lambda-case>’ clause can chain to an
     alternate clause, this makes Tree-IL’s ‘<lambda>’ have the
     expressiveness of Scheme’s ‘case-lambda’.
 -- Scheme Variable: <lambda-case> req opt rest kw inits gensyms body
          alternate
 -- External Representation: (lambda-case ((REQ OPT REST KW INITS
          GENSYMS) BODY) [ALTERNATE])
     One clause of a ‘case-lambda’.  A ‘lambda’ expression in Scheme is
     treated as a ‘case-lambda’ with one clause.

     REQ is a list of the procedure’s required arguments, as symbols.
     OPT is a list of the optional arguments, or ‘#f’ if there are no
     optional arguments.  REST is the name of the rest argument, or
     ‘#f’.

     KW is a list of the form, ‘(ALLOW-OTHER-KEYS? (KEYWORD NAME VAR)
     ...)’, where KEYWORD is the keyword corresponding to the argument
     named NAME, and whose corresponding gensym is VAR.  INITS are
     tree-il expressions corresponding to all of the optional and
     keyword arguments, evaluated to bind variables whose value is not
     supplied by the procedure caller.  Each INIT expression is
     evaluated in the lexical context of previously bound variables,
     from left to right.

     GENSYMS is a list of gensyms corresponding to all arguments: first
     all of the required arguments, then the optional arguments if any,
     then the rest argument if any, then all of the keyword arguments.

     BODY is the body of the clause.  If the procedure is called with an
     appropriate number of arguments, BODY is evaluated in tail
     position.  Otherwise, if there is an ALTERNATE, it should be a
     ‘<lambda-case>’ expression, representing the next clause to try.
     If there is no ALTERNATE, a wrong-number-of-arguments error is
     signaled.
 -- Scheme Variable: <let> src names gensyms vals exp
 -- External Representation: (let NAMES GENSYMS VALS EXP)
     Lexical binding, like Scheme’s ‘let’.  NAMES are the original
     binding names, GENSYMS are gensyms corresponding to the NAMES, and
     VALS are Tree-IL expressions for the values.  EXP is a single
     Tree-IL expression.
 -- Scheme Variable: <letrec> in-order? src names gensyms vals exp
 -- External Representation: (letrec NAMES GENSYMS VALS EXP)
 -- External Representation: (letrec* NAMES GENSYMS VALS EXP)
     A version of ‘<let>’ that creates recursive bindings, like Scheme’s
     ‘letrec’, or ‘letrec*’ if IN-ORDER? is true.
 -- Scheme Variable: <dynlet> fluids vals body
 -- External Representation: (dynlet FLUIDS VALS BODY)
     Dynamic binding; the equivalent of Scheme’s ‘with-fluids’.  FLUIDS
     should be a list of Tree-IL expressions that will evaluate to
     fluids, and VALS a corresponding list of expressions to bind to the
     fluids during the dynamic extent of the evaluation of BODY.
 -- Scheme Variable: <dynref> fluid
 -- External Representation: (dynref FLUID)
     A dynamic variable reference.  FLUID should be a Tree-IL expression
     evaluating to a fluid.
 -- Scheme Variable: <dynset> fluid exp
 -- External Representation: (dynset FLUID EXP)
     A dynamic variable set.  FLUID, a Tree-IL expression evaluating to
     a fluid, will be set to the result of evaluating EXP.
 -- Scheme Variable: <dynwind> winder body unwinder
 -- External Representation: (dynwind WINDER BODY UNWINDER)
     A ‘dynamic-wind’.  WINDER and UNWINDER should both evaluate to
     thunks.  Ensure that the winder and the unwinder are called before
     entering and after leaving BODY.  Note that BODY is an expression,
     without a thunk wrapper.
 -- Scheme Variable: <prompt> tag body handler
 -- External Representation: (prompt TAG BODY HANDLER)
     A dynamic prompt.  Instates a prompt named TAG, an expression,
     during the dynamic extent of the execution of BODY, also an
     expression.  If an abort occurs to this prompt, control will be
     passed to HANDLER, a ‘<lambda-case>’ expression with no optional or
     keyword arguments, and no alternate.  The first argument to the
     ‘<lambda-case>’ will be the captured continuation, and then all of
     the values passed to the abort.  *Note Prompts::, for more
     information.
 -- Scheme Variable: <abort> tag args tail
 -- External Representation: (abort TAG ARGS TAIL)
     An abort to the nearest prompt with the name TAG, an expression.
     ARGS should be a list of expressions to pass to the prompt’s
     handler, and TAIL should be an expression that will evaluate to a
     list of additional arguments.  An abort will save the partial
     continuation, which may later be reinstated, resulting in the
     ‘<abort>’ expression evaluating to some number of values.

   There are two Tree-IL constructs that are not normally produced by
higher-level compilers, but instead are generated during the
source-to-source optimization and analysis passes that the Tree-IL
compiler does.  Users should not generate these expressions directly,
unless they feel very clever, as the default analysis pass will generate
them as necessary.

 -- Scheme Variable: <let-values> src names gensyms exp body
 -- External Representation: (let-values NAMES GENSYMS EXP BODY)
     Like Scheme’s ‘receive’ – binds the values returned by evaluating
     ‘exp’ to the ‘lambda’-like bindings described by GENSYMS.  That is
     to say, GENSYMS may be an improper list.

     ‘<let-values>’ is an optimization of ‘<application>’ of the
     primitive, ‘call-with-values’.
 -- Scheme Variable: <fix> src names gensyms vals body
 -- External Representation: (fix NAMES GENSYMS VALS BODY)
     Like ‘<letrec>’, but only for VALS that are unset ‘lambda’
     expressions.

     ‘fix’ is an optimization of ‘letrec’ (and ‘let’).

   Tree-IL implements a compiler to GLIL that recursively traverses
Tree-IL expressions, writing out GLIL expressions into a linear list.
The compiler also keeps some state as to whether the current expression
is in tail context, and whether its value will be used in future
computations.  This state allows the compiler not to emit code for
constant expressions that will not be used (e.g. docstrings), and to
perform tail calls when in tail position.

   Most optimization, such as it currently is, is performed on Tree-IL
expressions as source-to-source transformations.  There will be more
optimizations added in the future.

   Interested readers are encouraged to read the implementation in
‘(language tree-il compile-glil)’ for more details.


File: guile.info,  Node: GLIL,  Next: Assembly,  Prev: Tree-IL,  Up: Compiling to the Virtual Machine

9.4.4 GLIL
----------

Guile Lowlevel Intermediate Language (GLIL) is a structured intermediate
language whose expressions more closely approximate Guile’s VM
instruction set.  Its expression types are defined in ‘(language glil)’.

 -- Scheme Variable: <glil-program> meta . body
     A unit of code that at run-time will correspond to a compiled
     procedure.  META should be an alist of properties, as in Tree-IL’s
     ‘<lambda>’.  BODY is an ordered list of GLIL expressions.
 -- Scheme Variable: <glil-std-prelude> nreq nlocs else-label
     A prologue for a function with no optional, keyword, or rest
     arguments.  NREQ is the number of required arguments.  NLOCS the
     total number of local variables, including the arguments.  If the
     procedure was not given exactly NREQ arguments, control will jump
     to ELSE-LABEL, if given, or otherwise signal an error.
 -- Scheme Variable: <glil-opt-prelude> nreq nopt rest nlocs else-label
     A prologue for a function with optional or rest arguments.  Like
     ‘<glil-std-prelude>’, with the addition that NOPT is the number of
     optional arguments (possibly zero) and REST is an index of a local
     variable at which to bind a rest argument, or ‘#f’ if there is no
     rest argument.
 -- Scheme Variable: <glil-kw-prelude> nreq nopt rest kw
          allow-other-keys? nlocs else-label
     A prologue for a function with keyword arguments.  Like
     ‘<glil-opt-prelude>’, with the addition that KW is a list of
     keyword arguments, and ALLOW-OTHER-KEYS? is a flag indicating
     whether to allow unknown keys.  *Note ‘bind-kwargs’: Function
     Prologue Instructions, for details on the format of KW.
 -- Scheme Variable: <glil-bind> . vars
     An advisory expression that notes a liveness extent for a set of
     variables.  VARS is a list of ‘(NAME TYPE INDEX)’, where TYPE
     should be either ‘argument’, ‘local’, or ‘external’.

     ‘<glil-bind>’ expressions end up being serialized as part of a
     program’s metadata and do not form part of a program’s code path.
 -- Scheme Variable: <glil-mv-bind> vars rest
     A multiple-value binding of the values on the stack to VARS.  If
     REST is true, the last element of VARS will be treated as a rest
     argument.

     In addition to pushing a binding annotation on the stack, like
     ‘<glil-bind>’, an expression is emitted at compilation time to make
     sure that there are enough values available to bind.  See the notes
     on ‘truncate-values’ in *note Procedure Call and Return
     Instructions::, for more information.
 -- Scheme Variable: <glil-unbind>
     Closes the liveness extent of the most recently encountered
     ‘<glil-bind>’ or ‘<glil-mv-bind>’ expression.  As GLIL expressions
     are compiled, a parallel stack of live bindings is maintained; this
     expression pops off the top element from that stack.

     Bindings are written into the program’s metadata so that debuggers
     and other tools can determine the set of live local variables at a
     given offset within a VM program.
 -- Scheme Variable: <glil-source> loc
     Records source information for the preceding expression.  LOC
     should be an association list of containing ‘line’ ‘column’, and
     ‘filename’ keys, e.g. as returned by ‘source-properties’.
 -- Scheme Variable: <glil-void>
     Pushes “the unspecified value” on the stack.
 -- Scheme Variable: <glil-const> obj
     Pushes a constant value onto the stack.  OBJ must be a number,
     string, symbol, keyword, boolean, character, uniform array, the
     empty list, or a pair or vector of constants.
 -- Scheme Variable: <glil-lexical> local? boxed? op index
     Accesses a lexically bound variable.  If the variable is not LOCAL?
     it is free.  All variables may have ‘ref’, ‘set’, and ‘bound?’ as
     their OP.  Boxed variables may also have the OPs ‘box’,
     ‘empty-box’, and ‘fix’, which correspond in semantics to the VM
     instructions ‘box’, ‘empty-box’, and ‘fix-closure’.  *Note Stack
     Layout::, for more information.
 -- Scheme Variable: <glil-toplevel> op name
     Accesses a toplevel variable.  OP may be ‘ref’, ‘set’, or ‘define’.
 -- Scheme Variable: <glil-module> op mod name public?
     Accesses a variable within a specific module.  See Tree-IL’s
     ‘<module-ref>’, for more information.
 -- Scheme Variable: <glil-label> label
     Creates a new label.  LABEL can be any Scheme value, and should be
     unique.
 -- Scheme Variable: <glil-branch> inst label
     Branch to a label.  LABEL should be a ‘<ghil-label>’.  ‘inst’ is a
     branching instruction: ‘br-if’, ‘br’, etc.
 -- Scheme Variable: <glil-call> inst nargs
     This expression is probably misnamed, as it does not correspond to
     function calls.  ‘<glil-call>’ invokes the VM instruction named
     INST, noting that it is called with NARGS stack arguments.  The
     arguments should be pushed on the stack already.  What happens to
     the stack afterwards depends on the instruction.
 -- Scheme Variable: <glil-mv-call> nargs ra
     Performs a multiple-value call.  RA is a ‘<glil-label>’
     corresponding to the multiple-value return address for the call.
     See the notes on ‘mv-call’ in *note Procedure Call and Return
     Instructions::, for more information.
 -- Scheme Variable: <glil-prompt> label escape-only?
     Push a dynamic prompt into the stack, with a handler at LABEL.
     ESCAPE-ONLY? is a flag that is propagated to the prompt, allowing
     an abort to avoid capturing a continuation in some cases.  *Note
     Prompts::, for more information.

   Users may enter in GLIL at the REPL as well, though there is a bit
more bookkeeping to do:

     scheme@(guile-user)> ,language glil
     Happy hacking with Guile Lowlevel Intermediate Language (GLIL)!
     To switch back, type `,L scheme'.
     glil@(guile-user)> (program () (std-prelude 0 0 #f)
                            (const 3) (call return 1))
     ⇒ 3

   Just as in all of Guile’s compilers, an environment is passed to the
GLIL-to-object code compiler, and one is returned as well, along with
the object code.


File: guile.info,  Node: Assembly,  Next: Bytecode and Objcode,  Prev: GLIL,  Up: Compiling to the Virtual Machine

9.4.5 Assembly
--------------

Assembly is an S-expression-based, human-readable representation of the
actual bytecodes that will be emitted for the VM. As such, it is a
useful intermediate language both for compilation and for decompilation.

   Besides the fact that it is not a record-based language, assembly
differs from GLIL in four main ways:

   • Labels have been resolved to byte offsets in the program.
   • Constants inside procedures have either been expressed as inline
     instructions or cached in object arrays.
   • Procedures with metadata (source location information, liveness
     extents, procedure names, generic properties, etc) have had their
     metadata serialized out to thunks.
   • All expressions correspond directly to VM instructions – i.e.,
     there is no ‘<glil-lexical>’ which can be a ref or a set.

   Assembly is isomorphic to the bytecode that it compiles to.  You can
compile to bytecode, then decompile back to assembly, and you have the
same assembly code.

   The general form of assembly instructions is the following:

     (INST ARG ...)

   The INST names a VM instruction, and its ARGs will be embedded in the
instruction stream.  The easiest way to see assembly is to play around
with it at the REPL, as can be seen in this annotated example:

     scheme@(guile-user)> ,pp (compile '(+ 32 10) #:to 'assembly)
     (load-program
       ((:LCASE16 . 2))  ; Labels, unused in this case.
       8                 ; Length of the thunk that was compiled.
       (load-program     ; Metadata thunk.
         ()
         17
         #f              ; No metadata thunk for the metadata thunk.
         (make-eol)
         (make-eol)
         (make-int8 2)   ; Liveness extents, source info, and arities,
         (make-int8 8)   ; in a format that Guile knows how to parse.
         (make-int8:0)
         (list 0 3)
         (list 0 1)
         (list 0 3)
         (return))
       (assert-nargs-ee/locals 0)  ; Prologue.
       (make-int8 32)    ; Actual code starts here.
       (make-int8 10)
       (add)
       (return))

   Of course you can switch the REPL to assembly and enter in assembly
S-expressions directly, like with other languages, though it is more
difficult, given that the length fields have to be correct.


File: guile.info,  Node: Bytecode and Objcode,  Next: Writing New High-Level Languages,  Prev: Assembly,  Up: Compiling to the Virtual Machine

9.4.6 Bytecode and Objcode
--------------------------

Finally, the raw bytes.  There are actually two different “languages”
here, corresponding to two different ways to represent the bytes.

   “Bytecode” represents code as uniform byte vectors, useful for
structuring and destructuring code on the Scheme level.  Bytecode is the
next step down from assembly:

     scheme@(guile-user)> (compile '(+ 32 10) #:to 'bytecode)
     ⇒ #vu8(8 0 0 0 25 0 0 0            ; Header.
            95 0                            ; Prologue.
            10 32 10 10 148 66 17           ; Actual code.
            0 0 0 0 0 0 0 9                 ; Metadata thunk.
            9 10 2 10 8 11 18 0 3 18 0 1 18 0 3 66)

   “Objcode” is bytecode, but mapped directly to a C structure, ‘struct
scm_objcode’:

     struct scm_objcode {
       scm_t_uint32 len;
       scm_t_uint32 metalen;
       scm_t_uint8 base[0];
     };

   As one might imagine, objcode imposes a minimum length on the
bytecode.  Also, the ‘len’ and ‘metalen’ fields are in native
endianness, which makes objcode (and bytecode) system-dependent.

   Objcode also has a couple of important efficiency hacks.  First,
objcode may be mapped directly from disk, allowing compiled code to be
loaded quickly, often from the system’s disk cache, and shared among
multiple processes.  Secondly, objcode may be embedded in other objcode,
allowing procedures to have the text of other procedures inlined into
their bodies, without the need for separate allocation of the code.  Of
course, the objcode object itself does need to be allocated.

   Procedures related to objcode are defined in the ‘(system vm
objcode)’ module.

 -- Scheme Procedure: objcode? obj
 -- C Function: scm_objcode_p (obj)
     Returns ‘#f’ if OBJ is object code, ‘#f’ otherwise.

 -- Scheme Procedure: bytecode->objcode bytecode
 -- C Function: scm_bytecode_to_objcode (bytecode)
     Makes a bytecode object from BYTECODE, which should be a
     bytevector.  *Note Bytevectors::.

 -- Scheme Variable: load-objcode file
 -- C Function: scm_load_objcode (file)
     Load object code from a file named FILE.  The file will be mapped
     into memory via ‘mmap’, so this is a very fast operation.

     On disk, object code has an sixteen-byte cookie prepended to it, to
     prevent accidental loading of arbitrary garbage.

 -- Scheme Variable: write-objcode objcode file
 -- C Function: scm_write_objcode (objcode)
     Write object code out to a file, prepending the sixteen-byte
     cookie.

 -- Scheme Variable: objcode->bytecode objcode
 -- C Function: scm_objcode_to_bytecode (objcode)
     Copy object code out to a bytevector for analysis by Scheme.

   The following procedure is actually in ‘(system vm program)’, but
we’ll mention it here:

 -- Scheme Variable: make-program objcode objtable [free-vars=#f]
 -- C Function: scm_make_program (objcode, objtable, free_vars)
     Load up object code into a Scheme program.  The resulting program
     will have OBJTABLE as its object table, which should be a vector or
     ‘#f’, and will capture the free variables from FREE-VARS.

   Object code from a file may be disassembled at the REPL via the
meta-command ‘,disassemble-file’, abbreviated as ‘,xx’.  Programs may be
disassembled via ‘,disassemble’, abbreviated as ‘,x’.

   Compiling object code to the fake language, ‘value’, is performed via
loading objcode into a program, then executing that thunk with respect
to the compilation environment.  Normally the environment propagates
through the compiler transparently, but users may specify the
compilation environment manually as well, as a module.


File: guile.info,  Node: Writing New High-Level Languages,  Next: Extending the Compiler,  Prev: Bytecode and Objcode,  Up: Compiling to the Virtual Machine

9.4.7 Writing New High-Level Languages
--------------------------------------

In order to integrate a new language LANG into Guile’s compiler system,
one has to create the module ‘(language LANG spec)’ containing the
language definition and referencing the parser, compiler and other
routines processing it.  The module hierarchy in ‘(language brainfuck)’
defines a very basic Brainfuck implementation meant to serve as
easy-to-understand example on how to do this.  See for instance
<http://en.wikipedia.org/wiki/Brainfuck> for more information about the
Brainfuck language itself.


File: guile.info,  Node: Extending the Compiler,  Prev: Writing New High-Level Languages,  Up: Compiling to the Virtual Machine

9.4.8 Extending the Compiler
----------------------------

At this point we take a detour from the impersonal tone of the rest of
the manual.  Admit it: if you’ve read this far into the compiler
internals manual, you are a junkie.  Perhaps a course at your university
left you unsated, or perhaps you’ve always harbored a desire to hack the
holy of computer science holies: a compiler.  Well you’re in good
company, and in a good position.  Guile’s compiler needs your help.

   There are many possible avenues for improving Guile’s compiler.
Probably the most important improvement, speed-wise, will be some form
of native compilation, both just-in-time and ahead-of-time.  This could
be done in many ways.  Probably the easiest strategy would be to extend
the compiled procedure structure to include a pointer to a native code
vector, and compile from bytecode to native code at run-time after a
procedure is called a certain number of times.

   The name of the game is a profiling-based harvest of the low-hanging
fruit, running programs of interest under a system-level profiler and
determining which improvements would give the most bang for the buck.
It’s really getting to the point though that native compilation is the
next step.

   The compiler also needs help at the top end, enhancing the Scheme
that it knows to also understand R6RS, and adding new high-level
compilers.  We have JavaScript and Emacs Lisp mostly complete, but they
could use some love; Lua would be nice as well, but whatever language it
is that strikes your fancy would be welcome too.

   Compilers are for hacking, not for admiring or for complaining about.
Get to it!


File: guile.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: Guile Implementation,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with…Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: guile.info,  Node: Concept Index,  Next: Procedure Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

This index contains concepts, keywords and non-Schemey names for several
features, to make it easier to locate the desired sections.

 [index ]
* Menu:

* !#:                                    Block Comments.      (line   6)
* #!:                                    Block Comments.      (line   6)
* #,():                                  SRFI-10.             (line   6)
* (ice-9 match):                         Pattern Matching.    (line   6)
* .guile:                                Init File.           (line   6)
* ‘.guile’ file, not loading:            Command-line Options.
                                                              (line 133)
* ‘.guile_history’:                      Loading Readline Support.
                                                              (line  32)
* ‘.inputrc’:                            Loading Readline Support.
                                                              (line  38)
* ‘/etc/hosts’:                          Network Databases.   (line 159)
* ‘/etc/protocols’:                      Network Databases.   (line 283)
* ‘/etc/services’:                       Network Databases.   (line 330)
* absolute file name:                    File System.         (line 343)
* ‘addrinfo’ object type:                Network Databases.   (line  13)
* affinity, CPU:                         Processes.           (line 336)
* alist:                                 Association Lists.   (line   6)
* alist <1>:                             SRFI-1 Association Lists.
                                                              (line   6)
* arbiters:                              Arbiters.            (line   6)
* argument specialize:                   SRFI-26.             (line   6)
* arguments (command line):              Command-line Options.
                                                              (line   6)
* arity, variable:                       Case-lambda.         (line   6)
* arity, variable <1>:                   SRFI-16.             (line   6)
* association List:                      Association Lists.   (line   6)
* association list:                      SRFI-1 Association Lists.
                                                              (line   6)
* asyncs:                                Asyncs.              (line   6)
* atomic time:                           SRFI-19 Introduction.
                                                              (line   6)
* autoload:                              Creating Guile Modules.
                                                              (line  35)
* automatic compilation:                 Compilation.         (line  21)
* automatically-managed memory:          Memory Blocks.       (line   6)
* begin:                                 begin.               (line   6)
* binary input:                          R6RS Binary Input.   (line   6)
* binary input <1>:                      R6RS Binary Input.   (line  70)
* binary output:                         R6RS Binary Output.  (line  40)
* binary port:                           R6RS Transcoders.    (line   6)
* binding renamer:                       Using Guile Modules. (line  32)
* binding renamer <1>:                   Using Guile Modules. (line  83)
* ‘bindir’:                              Build Config.        (line  68)
* bitwise logical:                       SRFI-60.             (line   6)
* block comments:                        Block Comments.      (line   6)
* Block read/write:                      Block Reading and Writing.
                                                              (line   6)
* BOM:                                   BOM Handling.        (line   6)
* Breakpoints:                           Traps.               (line   6)
* Breakpoints <1>:                       High-Level Traps.    (line  50)
* Buffered input:                        Buffered Input.      (line   6)
* ‘buildstamp’:                          Build Config.        (line  74)
* byte order:                            Bytevector Endianness.
                                                              (line   6)
* byte order mark:                       BOM Handling.        (line   6)
* bytevector:                            Bytevectors.         (line   6)
* C port interface:                      C Port Interface.    (line   6)
* callbacks:                             Dynamic FFI.         (line 101)
* canonical host type:                   Build Config.        (line  91)
* case:                                  Conditionals.        (line   6)
* case folding:                          Characters.          (line 133)
* chaining environments:                 Chaining.            (line   6)
* character encoding:                    Representing Strings as Bytes.
                                                              (line  22)
* charset:                               Standard Character Sets.
                                                              (line   9)
* child processes:                       Processes.           (line   6)
* class:                                 Class Definition.    (line   8)
* Closing ports:                         Closing.             (line   6)
* closure:                               About Closure.       (line   6)
* Code coverage:                         Traps.               (line   6)
* code coverage:                         Code Coverage.       (line   6)
* code point:                            Characters.          (line  13)
* code point, designated:                Characters.          (line  18)
* code point, reserved:                  Characters.          (line  26)
* codec:                                 R6RS Transcoders.    (line   6)
* codeset:                               Standard Character Sets.
                                                              (line   9)
* command line:                          Runtime Environment. (line  11)
* command line <1>:                      Runtime Environment. (line  38)
* command line history:                  Readline Support.    (line   6)
* command-line arguments:                Command-line Options.
                                                              (line   6)
* Command-line Options:                  Command-line Options.
                                                              (line   6)
* commands:                              REPL Commands.       (line   6)
* composable continuations:              Prompts.             (line   6)
* cond:                                  Conditionals.        (line   6)
* condition variable:                    Mutexes and Condition Variables.
                                                              (line   6)
* conditional evaluation:                Conditionals.        (line   6)
* conditions:                            SRFI-35.             (line   6)
* conservative garbage collection:       Memory Blocks.       (line   6)
* continuation, escape:                  Prompt Primitives.   (line  99)
* continuations:                         Continuations.       (line   6)
* Cooperative REPL server:               Cooperative REPL Servers.
                                                              (line   6)
* copying:                               Guile License.       (line   6)
* coverage:                              Code Coverage.       (line   6)
* cultural conventions:                  i18n Introduction.   (line  11)
* curly-infix:                           SRFI-105.            (line   6)
* curly-infix-and-bracket-lists:         SRFI-105.            (line   6)
* current directory:                     Processes.           (line   8)
* custom binary input ports:             R6RS Binary Input.   (line  16)
* custom binary output ports:            R6RS Binary Output.  (line  25)
* database:                              Association Lists.   (line   6)
* ‘datadir’:                             Build Config.        (line  68)
* date:                                  SRFI-19.             (line   6)
* date <1>:                              SRFI-19 Date.        (line   6)
* date conversion:                       SRFI-19 Time/Date conversions.
                                                              (line   6)
* date to string:                        SRFI-19 Date to string.
                                                              (line   6)
* date, from string:                     SRFI-19 String to date.
                                                              (line   6)
* debug options:                         Debug Options.       (line   9)
* Debugging:                             Debugging.           (line   6)
* debugging virtual machine (command line): Command-line Options.
                                                              (line 112)
* debugging virtual machine (command line) <1>: Command-line Options.
                                                              (line 123)
* Default ports:                         Default Ports.       (line   6)
* default slot value:                    Slot Options.        (line  15)
* definition splicing:                   begin.               (line  23)
* delayed evaluation:                    Delayed Evaluation.  (line   6)
* delimited continuations:               Prompts.             (line   6)
* designated code point:                 Characters.          (line  18)
* device file:                           File System.         (line 272)
* directory contents:                    File System.         (line 228)
* directory traversal:                   File Tree Walk.      (line   6)
* domain-specific language:              Macros.              (line  20)
* DSL:                                   Macros.              (line  20)
* duplicate binding:                     Creating Guile Modules.
                                                              (line  68)
* duplicate binding <1>:                 Creating Guile Modules.
                                                              (line 108)
* duplicate binding handlers:            Creating Guile Modules.
                                                              (line 108)
* EDSL:                                  Macros.              (line  20)
* effective version:                     Parallel Installations.
                                                              (line   6)
* Emacs:                                 Using Guile in Emacs.
                                                              (line   6)
* emacs regexp:                          Regular Expressions. (line   6)
* embedded domain-specific language:     Macros.              (line  20)
* encapsulation:                         Modules.             (line  14)
* encoding:                              Character Encoding of Source Files.
                                                              (line  43)
* encryption:                            Encryption.          (line   6)
* End of file object:                    Reading.             (line  11)
* end-of-file:                           R6RS End-of-File.    (line   6)
* end-of-line style:                     R6RS Transcoders.    (line   6)
* endianness:                            Bytevector Endianness.
                                                              (line   6)
* environment:                           About Environments.  (line   6)
* environment <1>:                       Environments.        (line   6)
* environment <2>:                       Runtime Environment. (line  66)
* environment variables:                 Environment Variables.
                                                              (line   6)
* environment variables <1>:             SRFI-98.             (line   6)
* environment, local:                    Local Variables.     (line   6)
* environment, top level:                About Environments.  (line   6)
* EOF:                                   R6RS End-of-File.    (line   6)
* equality:                              Equality.            (line   6)
* ‘errno’:                               Conventions.         (line  43)
* ‘errno’ <1>:                           Conventions.         (line  67)
* error handling:                        Exceptions.          (line   6)
* ‘error-signal’:                        Handling Errors.     (line  47)
* evaluate expression, command-line argument: Command-line Options.
                                                              (line  25)
* exception handling:                    Exceptions.          (line   6)
* exceptions:                            SRFI-35.             (line   6)
* ‘exec_prefix’:                         Build Config.        (line  68)
* export:                                Creating Guile Modules.
                                                              (line  57)
* expression sequencing:                 begin.               (line   6)
* ‘extensiondir’:                        Parallel Installations.
                                                              (line  42)
* extensiondir:                          Modules and Extensions.
                                                              (line  17)
* ffi:                                   Foreign Function Interface.
                                                              (line   6)
* file descriptor:                       Ports and File Descriptors.
                                                              (line   6)
* file locking:                          Ports and File Descriptors.
                                                              (line 348)
* file name separator:                   File System.         (line 343)
* file options:                          R6RS File Options.   (line   6)
* File port:                             File Ports.          (line   6)
* file system:                           File System.         (line   6)
* file system combinator:                File Tree Walk.      (line  69)
* file system traversal:                 File Tree Walk.      (line   6)
* file tree walk:                        File Tree Walk.      (line   6)
* finalization:                          Smobs.               (line  30)
* finalizer:                             Smobs.               (line  30)
* fine-grain parallelism:                Futures.             (line   6)
* fluids:                                Fluids and Dynamic States.
                                                              (line   6)
* fold-case:                             Case Sensitivity.    (line   6)
* foreign function interface:            Foreign Function Interface.
                                                              (line   6)
* formatted output:                      Formatted Output.    (line   6)
* functional setters:                    SRFI-9 Records.      (line 103)
* futures:                               Futures.             (line   6)
* GC-managed memory:                     Memory Blocks.       (line   6)
* GDB support:                           GDB Support.         (line   6)
* Geiser:                                Using Guile in Emacs.
                                                              (line  23)
* general cond clause:                   Conditionals.        (line  68)
* GNU triplet:                           Build Config.        (line  91)
* GPL:                                   Guile License.       (line   6)
* group file:                            User Information.    (line   6)
* guardians, testing for GC’d objects:   GC Hooks.            (line  46)
* guild:                                 Using Guile Tools.   (line   6)
* Guile threads:                         Threads.             (line   6)
* ‘guile-2’ SRFI-0 feature:              SRFI-0.              (line  75)
* guile-snarf deprecated macros:         Snarfing Macros.     (line   6)
* guile-snarf example:                   Function Snarfing.   (line  24)
* guile-snarf invocation:                Function Snarfing.   (line  24)
* guile-snarf recognized macros:         Snarfing Macros.     (line   6)
* guile-tools:                           Using Guile Tools.   (line   6)
* ‘guileversion’:                        Build Config.        (line  74)
* ‘GUILE_HISTORY’:                       Loading Readline Support.
                                                              (line  38)
* hash-comma:                            SRFI-10.             (line   6)
* higher-order functions:                Higher-Order Functions.
                                                              (line   6)
* host name:                             System Identification.
                                                              (line  32)
* host name lookup:                      Network Databases.   (line  13)
* HTTP:                                  Web.                 (line   6)
* i18n:                                  Internationalization.
                                                              (line   6)
* iconv:                                 Representing Strings as Bytes.
                                                              (line  22)
* IEEE-754 floating point numbers:       Bytevectors as Floats.
                                                              (line   6)
* if:                                    Conditionals.        (line   6)
* ‘includedir’:                          Build Config.        (line  68)
* ‘infodir’:                             Build Config.        (line  68)
* information encapsulation:             Modules.             (line  14)
* init file, not loading:                Command-line Options.
                                                              (line 133)
* initialization:                        Environment Variables.
                                                              (line   6)
* Initializing Guile:                    Initialization.      (line   6)
* inlining:                              Inlinable Procedures.
                                                              (line   6)
* instance:                              Instance Creation.   (line  12)
* integers as bits:                      SRFI-60.             (line   6)
* internationalization:                  Internationalization.
                                                              (line   6)
* interpreter:                           Why a VM?.           (line   6)
* invocation:                            Invoking Guile.      (line   6)
* invocation (command-line arguments):   Command-line Options.
                                                              (line   6)
* IPv4:                                  Network Address Conversion.
                                                              (line  12)
* IPv6:                                  Network Address Conversion.
                                                              (line  74)
* iteration:                             while do.            (line   6)
* JACAL:                                 JACAL.               (line   6)
* Jaffer, Aubrey:                        JACAL.               (line   6)
* julian day:                            SRFI-19 Introduction.
                                                              (line  28)
* julian day <1>:                        SRFI-19 Date.        (line  64)
* keyword objects:                       SRFI-88.             (line   6)
* lambda:                                Lambda.              (line   6)
* ‘LANG’:                                Locales.             (line  25)
* leap second:                           SRFI-19 Introduction.
                                                              (line  16)
* LGPL:                                  Guile License.       (line   6)
* ‘libdir’:                              Build Config.        (line  68)
* ‘libexecdir’:                          Build Config.        (line  68)
* ‘libguileinterface’:                   Build Config.        (line  74)
* ‘LIBS’:                                Build Config.        (line  72)
* license:                               Guile License.       (line   6)
* Line buffered input:                   Buffered Input.      (line  31)
* Line continuation:                     Buffered Input.      (line   6)
* Line input/output:                     Line/Delimited.      (line   6)
* list:                                  SRFI-1.              (line   6)
* list constructor:                      SRFI-1 Constructors. (line   6)
* list delete:                           SRFI-1 Deleting.     (line   6)
* list filter:                           SRFI-1 Filtering and Partitioning.
                                                              (line   6)
* list fold:                             SRFI-1 Fold and Map. (line   6)
* list map:                              SRFI-1 Fold and Map. (line   6)
* list partition:                        SRFI-1 Filtering and Partitioning.
                                                              (line   6)
* list predicate:                        SRFI-1 Predicates.   (line   6)
* list search:                           SRFI-1 Searching.    (line   6)
* list selector:                         SRFI-1 Selectors.    (line   6)
* list set operation:                    SRFI-1 Set Operations.
                                                              (line   6)
* load:                                  Character Encoding of Source Files.
                                                              (line   6)
* load path:                             Installing Site Packages.
                                                              (line   6)
* loading srfi modules (command line):   Command-line Options.
                                                              (line 100)
* local bindings:                        Local Bindings.      (line   6)
* local environment:                     Local Variables.     (line   6)
* local time:                            Time.                (line  66)
* local variable:                        Local Variables.     (line   6)
* local variables:                       Local Bindings.      (line   6)
* locale:                                Standard Character Sets.
                                                              (line   9)
* locale <1>:                            i18n Introduction.   (line  18)
* locale <2>:                            Locales.             (line   6)
* locale category:                       i18n Introduction.   (line  18)
* locale object:                         i18n Introduction.   (line  26)
* ‘localstatedir’:                       Build Config.        (line  68)
* location:                              About Environments.  (line   6)
* looping:                               while do.            (line   6)
* low-level locale information:          Accessing Locale Information.
                                                              (line   6)
* macro expansion:                       Macros.              (line  20)
* macros:                                Macros.              (line  12)
* ‘mandir’:                              Build Config.        (line  68)
* match structures:                      Match Structures.    (line   6)
* math – symbolic:                       JACAL.               (line   6)
* ‘memory-allocation-error’:             Handling Errors.     (line  66)
* ‘misc-error’:                          Handling Errors.     (line  73)
* modified julian day:                   SRFI-19 Introduction.
                                                              (line  28)
* modified julian day <1>:               SRFI-19 Date.        (line  67)
* module version:                        Creating Guile Modules.
                                                              (line 101)
* modules:                               Modules.             (line   6)
* multiline comments:                    Block Comments.      (line   6)
* multiple values:                       Multiple Values.     (line   6)
* multiple values and cond:              Conditionals.        (line  68)
* mutex:                                 Mutexes and Condition Variables.
                                                              (line   6)
* name space:                            Modules.             (line  14)
* name space - private:                  Modules.             (line  29)
* named let:                             while do.            (line   6)
* named let <1>:                         while do.            (line 105)
* network:                               Networking.          (line   6)
* network address:                       Network Address Conversion.
                                                              (line   6)
* network database:                      Network Databases.   (line   6)
* network database <1>:                  Network Databases.   (line 159)
* network database <2>:                  Network Databases.   (line 233)
* network examples:                      Internet Socket Examples.
                                                              (line   6)
* network protocols:                     Network Databases.   (line 283)
* network services:                      Network Databases.   (line 330)
* network socket:                        Network Sockets and Communication.
                                                              (line   6)
* network socket address:                Network Socket Address.
                                                              (line   6)
* no-fold-case:                          Case Sensitivity.    (line   6)
* non-local exit:                        Prompts.             (line   6)
* ‘numerical-overflow’:                  Handling Errors.     (line  56)
* object array:                          VM Programs.         (line  18)
* object table:                          VM Programs.         (line  18)
* options (command line):                Command-line Options.
                                                              (line   6)
* options - debug:                       Debug Options.       (line   9)
* options - print:                       Scheme Write.        (line  30)
* options - read:                        Scheme Read.         (line  15)
* ‘out-of-range’:                        Handling Errors.     (line  58)
* overflow, stack:                       Debug Options.       (line  48)
* overriding binding:                    Creating Guile Modules.
                                                              (line  68)
* overriding binding <1>:                Creating Guile Modules.
                                                              (line 108)
* parallel forms:                        Parallel Forms.      (line   6)
* parallelism:                           Futures.             (line   6)
* parameter object:                      Parameters.          (line   6)
* parameter specialize:                  SRFI-26.             (line   6)
* parameter specializers:                Generic Function and Method Examples.
                                                              (line  21)
* Paredit:                               Using Guile in Emacs.
                                                              (line  17)
* partial evaluator:                     Inlinable Procedures.
                                                              (line  11)
* password:                              Encryption.          (line  23)
* password file:                         User Information.    (line   6)
* pattern matching:                      Pattern Matching.    (line   6)
* pattern matching (SXML):               sxml-match.          (line   6)
* pattern variable:                      Pattern Matching.    (line  10)
* pipe:                                  Ports and File Descriptors.
                                                              (line 181)
* pipe <1>:                              Pipes.               (line   6)
* pkg-config:                            Parallel Installations.
                                                              (line   6)
* ‘pkgdatadir’:                          Build Config.        (line  68)
* ‘pkgincludedir’:                       Build Config.        (line  68)
* ‘pkglibdir’:                           Build Config.        (line  68)
* polar form:                            Complex Numbers.     (line  23)
* polar form <1>:                        Complex.             (line  13)
* Port:                                  Ports.               (line   6)
* port buffering:                        Ports and File Descriptors.
                                                              (line 287)
* port encoding:                         Character Encoding of Source Files.
                                                              (line  43)
* Port implementation:                   Port Implementation. (line   6)
* Port, block read/write:                Block Reading and Writing.
                                                              (line   6)
* Port, C interface:                     C Port Interface.    (line   6)
* Port, close:                           Closing.             (line   6)
* Port, default:                         Default Ports.       (line   6)
* Port, file:                            File Ports.          (line   6)
* Port, line input/output:               Line/Delimited.      (line   6)
* Port, random access:                   Random Access.       (line   6)
* Port, soft:                            Soft Ports.          (line   6)
* Port, string:                          String Ports.        (line   6)
* Port, types:                           Port Types.          (line   6)
* Port, void:                            Void Ports.          (line   6)
* portability between 2.0 and older versions: SRFI-0.         (line  75)
* POSIX:                                 POSIX.               (line   6)
* POSIX threads:                         Threads.             (line   6)
* precise marking:                       Smobs.               (line  53)
* ‘prefix’:                              Build Config.        (line  68)
* pretty printing:                       Pretty Printing.     (line   6)
* primitive procedures:                  Primitive Procedures.
                                                              (line   6)
* primitive-load:                        Character Encoding of Source Files.
                                                              (line   6)
* primitives:                            Primitive Procedures.
                                                              (line   6)
* print options:                         Scheme Write.        (line  30)
* procedure documentation:               Procedure Properties.
                                                              (line  55)
* procedure inlining:                    Inlinable Procedures.
                                                              (line   6)
* procedure properties:                  Procedure Properties.
                                                              (line  26)
* procedure with setter:                 Procedures with Setters.
                                                              (line   6)
* process group:                         Terminals and Ptys.  (line  23)
* process group <1>:                     Terminals and Ptys.  (line  36)
* process priority:                      Processes.           (line 306)
* process time:                          SRFI-19 Time.        (line  34)
* processes:                             Processes.           (line   6)
* Profiling:                             Traps.               (line   6)
* program arguments:                     Runtime Environment. (line  11)
* program arguments <1>:                 Runtime Environment. (line  38)
* promises:                              Delayed Evaluation.  (line   6)
* prompts:                               Prompts.             (line   6)
* protocols:                             Network Databases.   (line 283)
* ptob:                                  C Port Interface.    (line  11)
* pure module:                           Creating Guile Modules.
                                                              (line 166)
* ‘q-empty’:                             Queues.              (line  65)
* queues:                                Queues.              (line   6)
* R6RS:                                  Bytevectors.         (line   6)
* R6RS <1>:                              R6RS I/O Ports.      (line   6)
* R6RS <2>:                              R6RS Support.        (line   6)
* R6RS block comments:                   Block Comments.      (line  24)
* R6RS ports:                            R6RS I/O Ports.      (line   6)
* r7rs-symbols:                          Symbol Read Syntax.  (line   6)
* Random access, ports:                  Random Access.       (line   6)
* re-export:                             Creating Guile Modules.
                                                              (line  62)
* read:                                  Character Encoding of Source Files.
                                                              (line  43)
* read options:                          Scheme Read.         (line  15)
* Reading:                               Reading.             (line   6)
* readline:                              Readline Support.    (line   6)
* readline options:                      Readline Options.    (line   6)
* receive:                               Multiple Values.     (line   6)
* record:                                Record Overview.     (line   6)
* record <1>:                            SRFI-9 Records.      (line   6)
* recursion:                             Tail Calls.          (line   6)
* recursive expression:                  SRFI-31.             (line   6)
* regex:                                 Regular Expressions. (line   6)
* regular expressions:                   Regular Expressions. (line   6)
* ‘regular-expression-syntax’:           Handling Errors.     (line  70)
* remembering:                           Remembering During Operations.
                                                              (line   6)
* REPL server:                           REPL Servers.        (line   6)
* replace:                               Creating Guile Modules.
                                                              (line  68)
* replacing binding:                     Creating Guile Modules.
                                                              (line  68)
* replacing binding <1>:                 Creating Guile Modules.
                                                              (line 126)
* reserved code point:                   Characters.          (line  26)
* sameness:                              Equality.            (line   6)
* ‘sbindir’:                             Build Config.        (line  68)
* Scheme Shell:                          The Scheme shell (scsh).
                                                              (line   6)
* SCM data type:                         The SCM Type.        (line  16)
* script mode:                           Command-line Options.
                                                              (line  12)
* SCSH:                                  The Scheme shell (scsh).
                                                              (line   6)
* search and replace:                    Regexp Functions.    (line 202)
* sequencing:                            begin.               (line   6)
* service name lookup:                   Network Databases.   (line  13)
* services:                              Network Databases.   (line 330)
* setter:                                Procedures with Setters.
                                                              (line   6)
* Setting breakpoints:                   High-Level Traps.    (line  50)
* Setting tracepoints:                   High-Level Traps.    (line  55)
* shadowing an imported variable binding: Chaining.           (line   6)
* ‘sharedstatedir’:                      Build Config.        (line  68)
* shell:                                 Environment Variables.
                                                              (line   6)
* signal:                                Signals.             (line   6)
* site:                                  Installing Site Packages.
                                                              (line   6)
* site path:                             Installing Site Packages.
                                                              (line   6)
* ‘sitedir’:                             Parallel Installations.
                                                              (line  35)
* SLIB:                                  SLIB.                (line   6)
* slot:                                  Class Definition.    (line  19)
* smob:                                  Smobs.               (line   6)
* socket:                                Network Sockets and Communication.
                                                              (line   6)
* socket address:                        Network Socket Address.
                                                              (line   6)
* socket client example:                 Internet Socket Examples.
                                                              (line  11)
* socket examples:                       Internet Socket Examples.
                                                              (line   6)
* socket server example:                 Internet Socket Examples.
                                                              (line  27)
* Soft port:                             Soft Ports.          (line   6)
* sorting:                               Sorting.             (line   6)
* sorting lists:                         Sorting.             (line   6)
* sorting vectors:                       Sorting.             (line   6)
* source file encoding:                  Character Encoding of Source Files.
                                                              (line   6)
* source properties:                     Source Properties.   (line   6)
* specialize parameter:                  SRFI-26.             (line   6)
* splicing:                              begin.               (line  23)
* ‘srcdir’:                              Build Config.        (line  68)
* SRFI:                                  SRFI Support.        (line   6)
* SRFI-0:                                SRFI-0.              (line   6)
* SRFI-1:                                SRFI-1.              (line   6)
* SRFI-10:                               SRFI-10.             (line   6)
* SRFI-105:                              SRFI-105.            (line   6)
* SRFI-11:                               SRFI-11.             (line   6)
* SRFI-111:                              SRFI-111.            (line   6)
* SRFI-13:                               SRFI-13.             (line   6)
* SRFI-14:                               SRFI-14.             (line   6)
* SRFI-16:                               Case-lambda.         (line   6)
* SRFI-16 <1>:                           SRFI-16.             (line   6)
* SRFI-17:                               SRFI-17.             (line   6)
* SRFI-18:                               SRFI-18.             (line   6)
* SRFI-19:                               SRFI-19.             (line   6)
* SRFI-2:                                SRFI-2.              (line   6)
* SRFI-23:                               SRFI-23.             (line   6)
* SRFI-26:                               SRFI-26.             (line   6)
* SRFI-27:                               SRFI-27.             (line   6)
* SRFI-27 <1>:                           SRFI-27 Default Random Source.
                                                              (line   6)
* SRFI-27 <2>:                           SRFI-27 Random Sources.
                                                              (line   6)
* SRFI-27 <3>:                           SRFI-27 Random Number Generators.
                                                              (line   6)
* SRFI-30:                               SRFI-30.             (line   6)
* SRFI-30 block comments:                Block Comments.      (line  24)
* SRFI-31:                               SRFI-31.             (line   6)
* SRFI-34:                               SRFI-34.             (line   6)
* SRFI-35:                               SRFI-35.             (line   6)
* SRFI-37:                               SRFI-37.             (line   6)
* SRFI-38:                               SRFI-38.             (line   6)
* SRFI-39:                               Parameters.          (line   6)
* SRFI-39 <1>:                           Parameters.          (line 110)
* SRFI-39 <2>:                           SRFI-39.             (line   6)
* SRFI-4:                                SRFI-4.              (line   6)
* SRFI-41:                               SRFI-41.             (line   6)
* SRFI-42:                               SRFI-42.             (line   6)
* SRFI-43:                               SRFI-43.             (line   6)
* SRFI-45:                               SRFI-45.             (line   6)
* SRFI-46:                               SRFI-46.             (line   6)
* SRFI-55:                               SRFI-55.             (line   6)
* SRFI-6:                                SRFI-6.              (line   6)
* SRFI-60:                               SRFI-60.             (line   6)
* SRFI-61:                               Conditionals.        (line  68)
* SRFI-62:                               SRFI-62.             (line   6)
* SRFI-64:                               SRFI-64.             (line   6)
* SRFI-67:                               SRFI-67.             (line   6)
* SRFI-69:                               SRFI-69.             (line   6)
* SRFI-8:                                SRFI-8.              (line   6)
* SRFI-87:                               SRFI-87.             (line   6)
* SRFI-88:                               SRFI-88.             (line   6)
* SRFI-88 keyword syntax:                Keyword Read Syntax. (line  18)
* SRFI-9:                                SRFI-9 Records.      (line   6)
* SRFI-98:                               SRFI-98.             (line   6)
* stack overflow:                        Debug Options.       (line  48)
* ‘stack-overflow’:                      Handling Errors.     (line  68)
* standard error output:                 Default Ports.       (line  40)
* standard input:                        Default Ports.       (line   8)
* standard output:                       Default Ports.       (line  25)
* startup (command-line arguments):      Command-line Options.
                                                              (line   6)
* streams:                               Streams.             (line   6)
* String port:                           String Ports.        (line   6)
* string to date:                        SRFI-19 String to date.
                                                              (line   6)
* string, from date:                     SRFI-19 Date to string.
                                                              (line   6)
* structure:                             Record Overview.     (line   6)
* switches (command line):               Command-line Options.
                                                              (line   6)
* SXML pattern matching:                 sxml-match.          (line   6)
* symbolic math:                         JACAL.               (line   6)
* ‘sysconfdir’:                          Build Config.        (line  68)
* system asyncs:                         Asyncs.              (line   6)
* system clock:                          SRFI-19 Introduction.
                                                              (line  24)
* system name:                           System Identification.
                                                              (line   6)
* ‘system-error’:                        Handling Errors.     (line  52)
* TAI:                                   SRFI-19 Introduction.
                                                              (line   6)
* TAI <1>:                               SRFI-19 Time.        (line  18)
* tail calls:                            Tail Calls.          (line   6)
* temporary file:                        File System.         (line 287)
* temporary file <1>:                    File System.         (line 302)
* terminal:                              Terminals and Ptys.  (line   8)
* terminal <1>:                          Terminals and Ptys.  (line  13)
* terminal <2>:                          Terminals and Ptys.  (line  18)
* textual port:                          R6RS Transcoders.    (line   6)
* thread time:                           SRFI-19 Time.        (line  37)
* threads:                               Threads.             (line   6)
* time:                                  Time.                (line   6)
* time <1>:                              SRFI-19.             (line   6)
* time <2>:                              SRFI-19 Time.        (line   6)
* time conversion:                       SRFI-19 Time/Date conversions.
                                                              (line   6)
* time formatting:                       Time.                (line 114)
* time parsing:                          Time.                (line 129)
* top level environment:                 About Environments.  (line   6)
* ‘top_srcdir’:                          Build Config.        (line  68)
* Trace:                                 Traps.               (line   6)
* Tracepoints:                           High-Level Traps.    (line  55)
* Tracing:                               Traps.               (line   6)
* transcoder:                            R6RS Transcoders.    (line   6)
* transformation:                        Macros.              (line  12)
* Traps:                                 Traps.               (line   6)
* truncated printing:                    Pretty Printing.     (line  45)
* Types of ports:                        Port Types.          (line   6)
* Unicode code point:                    Characters.          (line  13)
* Unicode string encoding:               Bytevectors as Strings.
                                                              (line   6)
* universal time:                        SRFI-19 Introduction.
                                                              (line   6)
* unless:                                Conditionals.        (line   6)
* user asyncs:                           Asyncs.              (line   6)
* user information:                      User Information.    (line   6)
* UTC:                                   SRFI-19 Introduction.
                                                              (line   6)
* UTC <1>:                               SRFI-19 Time.        (line  15)
* variable arity:                        Case-lambda.         (line   6)
* variable arity <1>:                    SRFI-16.             (line   6)
* variable definition:                   Top Level.           (line   6)
* variable, local:                       Local Variables.     (line   6)
* vcell:                                 About Environments.  (line   6)
* VHash:                                 VHashes.             (line   6)
* vlist:                                 VLists.              (line   6)
* VList-based hash lists:                VHashes.             (line   6)
* VM hooks:                              Traps.               (line   6)
* VM trace level:                        VM Hooks.            (line  77)
* Void port:                             Void Ports.          (line   6)
* warnings, compiler:                    Compilation.         (line  66)
* Web:                                   Web.                 (line   6)
* when:                                  Conditionals.        (line   6)
* wizards:                               Using Guile Tools.   (line   6)
* word order:                            Bytevector Endianness.
                                                              (line   6)
* wrapped pointer types:                 Void Pointers and Byte Access.
                                                              (line  59)
* Writing:                               Writing.             (line   6)
* ‘wrong-number-of-args’:                Handling Errors.     (line  63)
* ‘wrong-type-arg’:                      Handling Errors.     (line  61)
* WWW:                                   Web.                 (line   6)


File: guile.info,  Node: Procedure Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

Procedure Index
***************

This is an alphabetical list of all the procedures and macros in Guile.
It also includes Guile’s Autoconf macros.

   When looking for a particular procedure, please look under its Scheme
name as well as under its C name.  The C name can be constructed from
the Scheme names by a simple transformation described in the section
*Note API Overview::.

 [index ]
* Menu:

* #:accessor:                            Slot Options.        (line  93)
* #:allocation:                          Slot Options.        (line 142)
* #:class:                               Slot Options.        (line 154)
* #:each-subclass:                       Slot Options.        (line 164)
* #:getter:                              Slot Options.        (line  91)
* #:init-form:                           Slot Options.        (line  11)
* #:init-keyword:                        Slot Options.        (line  13)
* #:init-thunk:                          Slot Options.        (line  12)
* #:init-value:                          Slot Options.        (line  10)
* #:instance:                            Slot Options.        (line 148)
* #:metaclass:                           Class Definition.    (line  55)
* #:name:                                Class Definition.    (line  65)
* #:setter:                              Slot Options.        (line  92)
* #:slot-ref:                            Slot Options.        (line 174)
* #:slot-ref <1>:                        Slot Options.        (line 187)
* #:slot-ref <2>:                        Slot Description Example.
                                                              (line  75)
* #:slot-set!:                           Slot Options.        (line 174)
* #:slot-set! <1>:                       Slot Options.        (line 188)
* #:slot-set! <2>:                       Slot Description Example.
                                                              (line  75)
* #:virtual:                             Slot Options.        (line 174)
* %:                                     Shift and Reset.     (line  15)
* % <1>:                                 Shift and Reset.     (line  16)
* % <2>:                                 Shift and Reset.     (line  17)
* %char-set-dump:                        Querying Character Sets.
                                                              (line   9)
* %default-port-conversion-strategy:     Ports.               (line 134)
* %library-dir:                          Build Config.        (line  39)
* %make-void-port:                       Void Ports.          (line   9)
* %package-data-dir:                     Build Config.        (line  33)
* %read-delimited!:                      Line/Delimited.      (line 102)
* %read-line:                            Line/Delimited.      (line 120)
* %search-load-path:                     Load Paths.          (line  61)
* %site-ccache-dir:                      Installing Site Packages.
                                                              (line   6)
* %site-ccache-dir <1>:                  Build Config.        (line  55)
* %site-dir:                             Installing Site Packages.
                                                              (line   6)
* %site-dir <1>:                         Build Config.        (line  49)
* %string-dump:                          String Internals.    (line  29)
* &assertion:                            rnrs conditions.     (line  99)
* &condition:                            rnrs conditions.     (line  37)
* &error:                                rnrs conditions.     (line  88)
* &i/o:                                  I/O Conditions.      (line   9)
* &i/o-decoding:                         R6RS Transcoders.    (line  81)
* &i/o-encoding:                         R6RS Transcoders.    (line  98)
* &i/o-file-already-exists:              I/O Conditions.      (line  51)
* &i/o-file-does-not-exist:              I/O Conditions.      (line  57)
* &i/o-file-is-read-only:                I/O Conditions.      (line  45)
* &i/o-file-protection:                  I/O Conditions.      (line  38)
* &i/o-filename:                         I/O Conditions.      (line  31)
* &i/o-invalid-position:                 I/O Conditions.      (line  24)
* &i/o-port:                             I/O Conditions.      (line  63)
* &i/o-read:                             I/O Conditions.      (line  14)
* &i/o-write:                            I/O Conditions.      (line  19)
* &implementation-restriction:           rnrs conditions.     (line 126)
* &irritants:                            rnrs conditions.     (line 105)
* &lexical:                              rnrs conditions.     (line 132)
* &message:                              rnrs conditions.     (line  70)
* &no-infinities:                        rnrs arithmetic flonums.
                                                              (line 117)
* &no-nans:                              rnrs arithmetic flonums.
                                                              (line 124)
* &non-continuable:                      rnrs conditions.     (line 120)
* &serious:                              rnrs conditions.     (line  82)
* &syntax:                               rnrs conditions.     (line 138)
* &undefined:                            rnrs conditions.     (line 147)
* &violation:                            rnrs conditions.     (line  93)
* &warning:                              rnrs conditions.     (line  77)
* &who:                                  rnrs conditions.     (line 112)
* ':                                     Expression Syntax.   (line  49)
* (oop goops):                           GOOPS.               (line  23)
* *:                                     Arithmetic.          (line  23)
* * <1>:                                 rnrs base.           (line 238)
* *scm_to_latin1_stringn:                Conversion to/from C.
                                                              (line 183)
* *scm_to_stringn:                       Conversion to/from C.
                                                              (line 133)
* *scm_to_utf32_stringn:                 Conversion to/from C.
                                                              (line 185)
* *scm_to_utf8_stringn:                  Conversion to/from C.
                                                              (line 184)
* +:                                     Arithmetic.          (line  12)
* + <1>:                                 rnrs base.           (line 236)
* ,:                                     Expression Syntax.   (line  77)
* ,@:                                    Expression Syntax.   (line  87)
* -:                                     Arithmetic.          (line  17)
* - <1>:                                 rnrs base.           (line 237)
* ->char-set:                            Creating Character Sets.
                                                              (line  76)
* /:                                     Arithmetic.          (line  28)
* / <1>:                                 rnrs base.           (line 239)
* 1+:                                    Arithmetic.          (line   6)
* 1+ <1>:                                Arithmetic.          (line  33)
* 1-:                                    Arithmetic.          (line   6)
* 1- <1>:                                Arithmetic.          (line  37)
* <:                                     Comparison.          (line  17)
* < <1>:                                 rnrs base.           (line 180)
* <=:                                    Comparison.          (line  25)
* <= <1>:                                rnrs base.           (line 182)
* =:                                     Comparison.          (line  13)
* = <1>:                                 rnrs base.           (line 179)
* ==:                                    Equality.            (line  70)
* >:                                     Comparison.          (line  21)
* > <1>:                                 rnrs base.           (line 181)
* >=:                                    Comparison.          (line  30)
* >= <1>:                                rnrs base.           (line 183)
* @:                                     Using Guile Modules. (line 112)
* @ <1>:                                 Using Guile Modules. (line 116)
* `:                                     Expression Syntax.   (line  67)
* abandoned-mutex-exception?:            SRFI-18 Exceptions.  (line  33)
* abort:                                 Shift and Reset.     (line  37)
* abort <1>:                             Dynamic Environment Instructions.
                                                              (line  63)
* abort-to-prompt:                       Prompt Primitives.   (line  31)
* abs:                                   Arithmetic.          (line  41)
* abs <1>:                               rnrs base.           (line 242)
* absolute-file-name?:                   File System.         (line 361)
* accept:                                Network Sockets and Communication.
                                                              (line 185)
* access?:                               File System.         (line  12)
* acons:                                 Adding or Setting Alist Entries.
                                                              (line  92)
* acos:                                  Scientific.          (line  34)
* acos <1>:                              rnrs base.           (line 150)
* acosh:                                 Scientific.          (line  63)
* activate-readline:                     Readline Functions.  (line  45)
* adapt-response-version:                Responses.           (line  46)
* add:                                   Inlined Mathematical Instructions.
                                                              (line  16)
* add-duration:                          SRFI-19 Time.        (line  92)
* add-duration!:                         SRFI-19 Time.        (line  93)
* add-ephemeral-stepping-trap!:          High-Level Traps.    (line  75)
* add-ephemeral-trap-at-frame-finish!:   High-Level Traps.    (line  68)
* add-hook!:                             Hook Reference.      (line  42)
* add-method!:                           Method Definition Internals.
                                                              (line  50)
* add-method! <1>:                       Method Definition Internals.
                                                              (line  53)
* add-method! <2>:                       Method Definition Internals.
                                                              (line  56)
* add-method! <3>:                       Method Definition Internals.
                                                              (line  62)
* add-method! <4>:                       Method Definition Internals.
                                                              (line  68)
* add-ref-resolver!:                     texinfo html.        (line  22)
* add-to-load-path:                      Load Paths.          (line  28)
* add-trace-at-procedure-call!:          High-Level Traps.    (line  55)
* add-trap!:                             Trap States.         (line  22)
* add-trap-at-procedure-call!:           High-Level Traps.    (line  50)
* add-trap-at-source-location!:          High-Level Traps.    (line  61)
* add1:                                  Inlined Mathematical Instructions.
                                                              (line  17)
* addrinfo:addr:                         Network Databases.   (line 148)
* addrinfo:canonname:                    Network Databases.   (line 152)
* addrinfo:fam:                          Network Databases.   (line 139)
* addrinfo:flags:                        Network Databases.   (line 136)
* addrinfo:protocol:                     Network Databases.   (line 145)
* addrinfo:socktype:                     Network Databases.   (line 142)
* alarm:                                 Signals.             (line 102)
* alignof:                               Foreign Structs.     (line  21)
* alist->hash-table:                     Hash Table Reference.
                                                              (line  66)
* alist->hash-table <1>:                 SRFI-69 Creating hash tables.
                                                              (line  57)
* alist->hashq-table:                    Hash Table Reference.
                                                              (line  67)
* alist->hashv-table:                    Hash Table Reference.
                                                              (line  68)
* alist->hashx-table:                    Hash Table Reference.
                                                              (line  69)
* alist->vhash:                          VHashes.             (line 123)
* alist-cons:                            SRFI-1 Association Lists.
                                                              (line  24)
* alist-copy:                            SRFI-1 Association Lists.
                                                              (line  33)
* alist-delete:                          SRFI-1 Association Lists.
                                                              (line  37)
* alist-delete!:                         SRFI-1 Association Lists.
                                                              (line  38)
* all-threads:                           Threads.             (line  16)
* and:                                   and or.              (line  10)
* and <1>:                               rnrs base.           (line 119)
* and-let*:                              SRFI-2.              (line  14)
* and=>:                                 Higher-Order Functions.
                                                              (line  47)
* angle:                                 Complex.             (line  28)
* angle <1>:                             rnrs base.           (line 139)
* any:                                   SRFI-1 Searching.    (line  46)
* any->c32vector:                        SRFI-4 Extensions.   (line  22)
* any->c64vector:                        SRFI-4 Extensions.   (line  23)
* any->f32vector:                        SRFI-4 Extensions.   (line  20)
* any->f64vector:                        SRFI-4 Extensions.   (line  21)
* any->s16vector:                        SRFI-4 Extensions.   (line  15)
* any->s32vector:                        SRFI-4 Extensions.   (line  17)
* any->s64vector:                        SRFI-4 Extensions.   (line  19)
* any->s8vector:                         SRFI-4 Extensions.   (line  13)
* any->u16vector:                        SRFI-4 Extensions.   (line  14)
* any->u32vector:                        SRFI-4 Extensions.   (line  16)
* any->u64vector:                        SRFI-4 Extensions.   (line  18)
* any->u8vector:                         SRFI-4 Extensions.   (line  12)
* any-bits-set?:                         SRFI-60.             (line  24)
* append:                                Append/Reverse.      (line  13)
* append <1>:                            Append/Reverse.      (line  14)
* append <2>:                            rnrs base.           (line 200)
* append <3>:                            rnrs base.           (line 201)
* append!:                               Append/Reverse.      (line  15)
* append! <1>:                           Append/Reverse.      (line  16)
* append-map:                            SRFI-1 Fold and Map. (line 176)
* append-map!:                           SRFI-1 Fold and Map. (line 177)
* append-reverse:                        SRFI-1 Length Append etc.
                                                              (line  22)
* append-reverse!:                       SRFI-1 Length Append etc.
                                                              (line  23)
* apply:                                 Fly Evaluation.      (line  66)
* apply <1>:                             rnrs base.           (line 360)
* apply <2>:                             Procedure Call and Return Instructions.
                                                              (line  35)
* apply-templates:                       sxml apply-templates.
                                                              (line  34)
* apply:nconc2last:                      Fly Evaluation.      (line 111)
* apropos:                               Help Commands.       (line  32)
* apropos-completion-function:           Readline Functions.  (line 105)
* args-fold:                             SRFI-37.             (line  63)
* arithmetic-shift:                      SRFI-60.             (line  26)
* arity:allow-other-keys?:               Compiled Procedures. (line 116)
* arity:end:                             Compiled Procedures. (line 111)
* arity:kw:                              Compiled Procedures. (line 115)
* arity:nopt:                            Compiled Procedures. (line 113)
* arity:nreq:                            Compiled Procedures. (line 112)
* arity:rest?:                           Compiled Procedures. (line 114)
* arity:start:                           Compiled Procedures. (line 110)
* array->list:                           Array Procedures.    (line 144)
* array-contents:                        Shared Arrays.       (line 107)
* array-copy!:                           Array Procedures.    (line 148)
* array-copy-in-order!:                  Array Procedures.    (line 149)
* array-dimensions:                      Array Procedures.    (line 117)
* array-equal?:                          Array Procedures.    (line 160)
* array-fill!:                           Array Procedures.    (line 155)
* array-for-each:                        Array Procedures.    (line 181)
* array-in-bounds?:                      Array Procedures.    (line  98)
* array-index-map!:                      Array Procedures.    (line 186)
* array-length:                          Array Procedures.    (line 131)
* array-map!:                            Array Procedures.    (line 166)
* array-map-in-order!:                   Array Procedures.    (line 167)
* array-rank:                            Array Procedures.    (line 137)
* array-ref:                             Array Procedures.    (line  91)
* array-set!:                            Array Procedures.    (line 107)
* array-shape:                           Array Procedures.    (line 116)
* array-type:                            Array Procedures.    (line  85)
* array?:                                Array Procedures.    (line  21)
* ash:                                   Bitwise Operations.  (line  67)
* ash <1>:                               Inlined Mathematical Instructions.
                                                              (line  30)
* asin:                                  Scientific.          (line  31)
* asin <1>:                              rnrs base.           (line 149)
* asinh:                                 Scientific.          (line  60)
* assert:                                rnrs base.           (line 312)
* assert-curr-char:                      sxml ssax input-parse.
                                                              (line  41)
* assert-nargs-ee:                       Function Prologue Instructions.
                                                              (line  17)
* assert-nargs-ee/locals:                Function Prologue Instructions.
                                                              (line 113)
* assert-nargs-ge:                       Function Prologue Instructions.
                                                              (line  18)
* assert-nargs-ge/locals:                Function Prologue Instructions.
                                                              (line 114)
* assertion-violation:                   rnrs base.           (line 317)
* assertion-violation?:                  rnrs conditions.     (line 101)
* assoc:                                 Retrieving Alist Entries.
                                                              (line  12)
* assoc <1>:                             SRFI-1 Association Lists.
                                                              (line  10)
* assoc <2>:                             rnrs lists.          (line  53)
* assoc-ref:                             Retrieving Alist Entries.
                                                              (line  26)
* assoc-remove!:                         Removing Alist Entries.
                                                              (line  58)
* assoc-set!:                            Adding or Setting Alist Entries.
                                                              (line 101)
* assp:                                  rnrs lists.          (line  52)
* assq:                                  Retrieving Alist Entries.
                                                              (line  10)
* assq <1>:                              rnrs lists.          (line  55)
* assq-ref:                              Retrieving Alist Entries.
                                                              (line  24)
* assq-remove!:                          Removing Alist Entries.
                                                              (line  56)
* assq-set!:                             Adding or Setting Alist Entries.
                                                              (line  99)
* assv:                                  Retrieving Alist Entries.
                                                              (line  11)
* assv <1>:                              rnrs lists.          (line  54)
* assv-ref:                              Retrieving Alist Entries.
                                                              (line  25)
* assv-remove!:                          Removing Alist Entries.
                                                              (line  57)
* assv-set!:                             Adding or Setting Alist Entries.
                                                              (line 100)
* async:                                 User asyncs.         (line  14)
* async-mark:                            User asyncs.         (line  18)
* atan:                                  Scientific.          (line  37)
* atan <1>:                              Scientific.          (line  38)
* atan <2>:                              rnrs base.           (line 151)
* atanh:                                 Scientific.          (line  66)
* attlist->alist:                        SSAX.                (line 174)
* attlist-add:                           SSAX.                (line 167)
* attlist-fold:                          SSAX.                (line 176)
* attlist-null?:                         SSAX.                (line 169)
* attlist-remove-top:                    SSAX.                (line 172)
* backtrace:                             Debug Commands.      (line   9)
* backtrace <1>:                         Pre-Unwind Debugging.
                                                              (line  23)
* basename:                              File System.         (line 331)
* begin:                                 begin.               (line  16)
* begin <1>:                             rnrs base.           (line 105)
* begin-thread:                          Threads.             (line 116)
* binary-port?:                          R6RS Port Manipulation.
                                                              (line  16)
* bind:                                  Network Sockets and Communication.
                                                              (line 157)
* bind <1>:                              Network Sockets and Communication.
                                                              (line 158)
* bind <2>:                              Network Sockets and Communication.
                                                              (line 159)
* bind <3>:                              Network Sockets and Communication.
                                                              (line 161)
* bind-kwargs:                           Function Prologue Instructions.
                                                              (line  81)
* bind-optionals:                        Function Prologue Instructions.
                                                              (line  37)
* bind-optionals/shuffle:                Function Prologue Instructions.
                                                              (line  55)
* bind-optionals/shuffle-or-br:          Function Prologue Instructions.
                                                              (line  56)
* bind-rest:                             Function Prologue Instructions.
                                                              (line  51)
* bind-textdomain-codeset:               Gettext Support.     (line 100)
* binding:                               Module Commands.     (line  18)
* binding:boxed?:                        Compiled Procedures. (line  78)
* binding:end:                           Compiled Procedures. (line  81)
* binding:index:                         Compiled Procedures. (line  79)
* binding:name:                          Compiled Procedures. (line  77)
* binding:start:                         Compiled Procedures. (line  80)
* bindtextdomain:                        Gettext Support.     (line  84)
* bit-count:                             Bit Vectors.         (line  72)
* bit-count <1>:                         SRFI-60.             (line  28)
* bit-count*:                            Bit Vectors.         (line 115)
* bit-extract:                           Bitwise Operations.  (line 141)
* bit-field:                             SRFI-60.             (line  27)
* bit-invert!:                           Bit Vectors.         (line  88)
* bit-position:                          Bit Vectors.         (line  79)
* bit-set*!:                             Bit Vectors.         (line  92)
* bit-set?:                              SRFI-60.             (line  25)
* bitvector:                             Bit Vectors.         (line  30)
* bitvector->list:                       Bit Vectors.         (line  67)
* bitvector-fill!:                       Bit Vectors.         (line  58)
* bitvector-length:                      Bit Vectors.         (line  34)
* bitvector-ref:                         Bit Vectors.         (line  42)
* bitvector-set!:                        Bit Vectors.         (line  49)
* bitvector?:                            Bit Vectors.         (line  15)
* bitwise-and:                           SRFI-60.             (line  20)
* bitwise-and <1>:                       rnrs arithmetic bitwise.
                                                              (line  15)
* bitwise-arithmetic-shift:              rnrs arithmetic bitwise.
                                                              (line  56)
* bitwise-arithmetic-shift-left:         rnrs arithmetic bitwise.
                                                              (line  57)
* bitwise-arithmetic-shift-right:        rnrs arithmetic bitwise.
                                                              (line  58)
* bitwise-bit-count:                     rnrs arithmetic bitwise.
                                                              (line  27)
* bitwise-bit-field:                     rnrs arithmetic bitwise.
                                                              (line  46)
* bitwise-bit-set?:                      rnrs arithmetic bitwise.
                                                              (line  38)
* bitwise-copy-bit:                      rnrs arithmetic bitwise.
                                                              (line  42)
* bitwise-copy-bit-field:                rnrs arithmetic bitwise.
                                                              (line  51)
* bitwise-first-bit-set:                 rnrs arithmetic bitwise.
                                                              (line  34)
* bitwise-if:                            SRFI-60.             (line  35)
* bitwise-if <1>:                        rnrs arithmetic bitwise.
                                                              (line  22)
* bitwise-ior:                           SRFI-60.             (line  21)
* bitwise-ior <1>:                       rnrs arithmetic bitwise.
                                                              (line  16)
* bitwise-length:                        rnrs arithmetic bitwise.
                                                              (line  31)
* bitwise-merge:                         SRFI-60.             (line  36)
* bitwise-not:                           SRFI-60.             (line  23)
* bitwise-not <1>:                       rnrs arithmetic bitwise.
                                                              (line  14)
* bitwise-reverse-bit-field:             rnrs arithmetic bitwise.
                                                              (line  68)
* bitwise-rotate-bit-field:              rnrs arithmetic bitwise.
                                                              (line  63)
* bitwise-xor:                           SRFI-60.             (line  22)
* bitwise-xor <1>:                       rnrs arithmetic bitwise.
                                                              (line  17)
* boolean?:                              Booleans.            (line  61)
* boolean? <1>:                          rnrs base.           (line  11)
* booleans->integer:                     SRFI-60.             (line  94)
* bound-identifier=?:                    Syntax Transformer Helpers.
                                                              (line  12)
* bound-identifier=? <1>:                rnrs syntax-case.    (line  33)
* box:                                   SRFI-111.            (line   9)
* box <1>:                               Lexical Environment Instructions.
                                                              (line  31)
* box?:                                  SRFI-111.            (line  13)
* br:                                    Branch Instructions. (line  20)
* br-if:                                 Branch Instructions. (line  23)
* br-if-eq:                              Branch Instructions. (line  29)
* br-if-nargs-gt:                        Function Prologue Instructions.
                                                              (line  28)
* br-if-nargs-lt:                        Function Prologue Instructions.
                                                              (line  29)
* br-if-nargs-ne:                        Function Prologue Instructions.
                                                              (line  27)
* br-if-not:                             Branch Instructions. (line  26)
* br-if-not-eq:                          Branch Instructions. (line  34)
* br-if-not-null:                        Branch Instructions. (line  40)
* br-if-null:                            Branch Instructions. (line  37)
* break:                                 Debug Commands.      (line  60)
* break <1>:                             while do.            (line  72)
* break <2>:                             SRFI-1 Searching.    (line  32)
* break <3>:                             Miscellaneous Instructions.
                                                              (line  19)
* break!:                                SRFI-1 Searching.    (line  33)
* break-at-source:                       Debug Commands.      (line  63)
* broadcast-condition-variable:          Mutexes and Condition Variables.
                                                              (line 162)
* buffer-mode:                           R6RS Buffer Modes.   (line  28)
* buffer-mode?:                          R6RS Buffer Modes.   (line  36)
* build-request:                         Requests.            (line  77)
* build-response:                        Responses.           (line  40)
* build-uri:                             URIs.                (line  40)
* bv-f32-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  27)
* bv-f32-native-set:                     Inlined Bytevector Instructions.
                                                              (line  45)
* bv-f32-ref:                            Inlined Bytevector Instructions.
                                                              (line  35)
* bv-f32-set:                            Inlined Bytevector Instructions.
                                                              (line  53)
* bv-f64-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  28)
* bv-f64-native-set:                     Inlined Bytevector Instructions.
                                                              (line  46)
* bv-f64-ref:                            Inlined Bytevector Instructions.
                                                              (line  36)
* bv-f64-set:                            Inlined Bytevector Instructions.
                                                              (line  54)
* bv-s16-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  22)
* bv-s16-native-set:                     Inlined Bytevector Instructions.
                                                              (line  40)
* bv-s16-ref:                            Inlined Bytevector Instructions.
                                                              (line  30)
* bv-s16-set:                            Inlined Bytevector Instructions.
                                                              (line  48)
* bv-s32-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  24)
* bv-s32-native-set:                     Inlined Bytevector Instructions.
                                                              (line  42)
* bv-s32-ref:                            Inlined Bytevector Instructions.
                                                              (line  32)
* bv-s32-set:                            Inlined Bytevector Instructions.
                                                              (line  50)
* bv-s64-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  26)
* bv-s64-native-set:                     Inlined Bytevector Instructions.
                                                              (line  44)
* bv-s64-ref:                            Inlined Bytevector Instructions.
                                                              (line  34)
* bv-s64-set:                            Inlined Bytevector Instructions.
                                                              (line  52)
* bv-s8-ref:                             Inlined Bytevector Instructions.
                                                              (line  20)
* bv-s8-set:                             Inlined Bytevector Instructions.
                                                              (line  38)
* bv-u16-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  21)
* bv-u16-native-set:                     Inlined Bytevector Instructions.
                                                              (line  39)
* bv-u16-ref:                            Inlined Bytevector Instructions.
                                                              (line  29)
* bv-u16-set:                            Inlined Bytevector Instructions.
                                                              (line  47)
* bv-u32-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  23)
* bv-u32-native-set:                     Inlined Bytevector Instructions.
                                                              (line  41)
* bv-u32-ref:                            Inlined Bytevector Instructions.
                                                              (line  31)
* bv-u32-set:                            Inlined Bytevector Instructions.
                                                              (line  49)
* bv-u64-native-ref:                     Inlined Bytevector Instructions.
                                                              (line  25)
* bv-u64-native-set:                     Inlined Bytevector Instructions.
                                                              (line  43)
* bv-u64-ref:                            Inlined Bytevector Instructions.
                                                              (line  33)
* bv-u64-set:                            Inlined Bytevector Instructions.
                                                              (line  51)
* bv-u8-ref:                             Inlined Bytevector Instructions.
                                                              (line  19)
* bv-u8-set:                             Inlined Bytevector Instructions.
                                                              (line  37)
* bytecode->objcode:                     Bytecode and Objcode.
                                                              (line  48)
* bytevector->pointer:                   Void Pointers and Byte Access.
                                                              (line  30)
* bytevector->sint-list:                 Bytevectors and Integer Lists.
                                                              (line  28)
* bytevector->string:                    Representing Strings as Bytes.
                                                              (line  51)
* bytevector->string <1>:                R6RS Transcoders.    (line 179)
* bytevector->u8-list:                   Bytevectors and Integer Lists.
                                                              (line  13)
* bytevector->uint-list:                 Bytevectors and Integer Lists.
                                                              (line  23)
* bytevector-copy:                       Bytevector Manipulation.
                                                              (line  47)
* bytevector-copy!:                      Bytevector Manipulation.
                                                              (line  38)
* bytevector-fill!:                      Bytevector Manipulation.
                                                              (line  34)
* bytevector-ieee-double-native-ref:     Bytevectors as Floats.
                                                              (line  30)
* bytevector-ieee-double-native-set!:    Bytevectors as Floats.
                                                              (line  37)
* bytevector-ieee-double-ref:            Bytevectors as Floats.
                                                              (line  11)
* bytevector-ieee-double-set!:           Bytevectors as Floats.
                                                              (line  19)
* bytevector-ieee-single-native-ref:     Bytevectors as Floats.
                                                              (line  29)
* bytevector-ieee-single-native-set!:    Bytevectors as Floats.
                                                              (line  36)
* bytevector-ieee-single-ref:            Bytevectors as Floats.
                                                              (line  10)
* bytevector-ieee-single-set!:           Bytevectors as Floats.
                                                              (line  17)
* bytevector-length:                     Bytevector Manipulation.
                                                              (line  22)
* bytevector-s16-native-ref:             Bytevectors as Integers.
                                                              (line  96)
* bytevector-s16-native-set!:            Bytevectors as Integers.
                                                              (line 112)
* bytevector-s16-ref:                    Bytevectors as Integers.
                                                              (line  56)
* bytevector-s16-set!:                   Bytevectors as Integers.
                                                              (line  75)
* bytevector-s32-native-ref:             Bytevectors as Integers.
                                                              (line  98)
* bytevector-s32-native-set!:            Bytevectors as Integers.
                                                              (line 114)
* bytevector-s32-ref:                    Bytevectors as Integers.
                                                              (line  58)
* bytevector-s32-set!:                   Bytevectors as Integers.
                                                              (line  77)
* bytevector-s64-native-ref:             Bytevectors as Integers.
                                                              (line 100)
* bytevector-s64-native-set!:            Bytevectors as Integers.
                                                              (line 116)
* bytevector-s64-ref:                    Bytevectors as Integers.
                                                              (line  60)
* bytevector-s64-set!:                   Bytevectors as Integers.
                                                              (line  79)
* bytevector-s8-ref:                     Bytevectors as Integers.
                                                              (line  54)
* bytevector-s8-set!:                    Bytevectors as Integers.
                                                              (line  73)
* bytevector-sint-ref:                   Bytevectors as Integers.
                                                              (line  31)
* bytevector-sint-set!:                  Bytevectors as Integers.
                                                              (line  43)
* bytevector-u16-native-ref:             Bytevectors as Integers.
                                                              (line  95)
* bytevector-u16-native-set!:            Bytevectors as Integers.
                                                              (line 111)
* bytevector-u16-ref:                    Bytevectors as Integers.
                                                              (line  55)
* bytevector-u16-set!:                   Bytevectors as Integers.
                                                              (line  74)
* bytevector-u32-native-ref:             Bytevectors as Integers.
                                                              (line  97)
* bytevector-u32-native-set!:            Bytevectors as Integers.
                                                              (line 113)
* bytevector-u32-ref:                    Bytevectors as Integers.
                                                              (line  57)
* bytevector-u32-set!:                   Bytevectors as Integers.
                                                              (line  76)
* bytevector-u64-native-ref:             Bytevectors as Integers.
                                                              (line  99)
* bytevector-u64-native-set!:            Bytevectors as Integers.
                                                              (line 115)
* bytevector-u64-ref:                    Bytevectors as Integers.
                                                              (line  59)
* bytevector-u64-set!:                   Bytevectors as Integers.
                                                              (line  78)
* bytevector-u8-ref:                     Bytevectors as Integers.
                                                              (line  53)
* bytevector-u8-set!:                    Bytevectors as Integers.
                                                              (line  72)
* bytevector-uint-ref:                   Bytevectors as Integers.
                                                              (line  26)
* bytevector-uint-set!:                  Bytevectors as Integers.
                                                              (line  36)
* bytevector=?:                          Bytevector Manipulation.
                                                              (line  29)
* bytevector?:                           Bytevector Manipulation.
                                                              (line  15)
* c32vector:                             SRFI-4 API.          (line  75)
* c32vector->list:                       SRFI-4 API.          (line 183)
* c32vector-length:                      SRFI-4 API.          (line 103)
* c32vector-ref:                         SRFI-4 API.          (line 129)
* c32vector-set!:                        SRFI-4 API.          (line 156)
* c32vector?:                            SRFI-4 API.          (line  19)
* c64vector:                             SRFI-4 API.          (line  76)
* c64vector->list:                       SRFI-4 API.          (line 184)
* c64vector-length:                      SRFI-4 API.          (line 104)
* c64vector-ref:                         SRFI-4 API.          (line 130)
* c64vector-set!:                        SRFI-4 API.          (line 157)
* c64vector?:                            SRFI-4 API.          (line  20)
* caaaar:                                Pairs.               (line 112)
* caaaar <1>:                            rnrs base.           (line  50)
* caaadr:                                Pairs.               (line 111)
* caaadr <1>:                            rnrs base.           (line  51)
* caaar:                                 Pairs.               (line  96)
* caaar <1>:                             rnrs base.           (line  42)
* caadar:                                Pairs.               (line 110)
* caadar <1>:                            rnrs base.           (line  52)
* caaddr:                                Pairs.               (line 109)
* caaddr <1>:                            rnrs base.           (line  59)
* caadr:                                 Pairs.               (line  95)
* caadr <1>:                             rnrs base.           (line  43)
* caar:                                  Pairs.               (line  88)
* caar <1>:                              rnrs base.           (line  38)
* cadaar:                                Pairs.               (line 108)
* cadaar <1>:                            rnrs base.           (line  53)
* cadadr:                                Pairs.               (line 107)
* cadadr <1>:                            rnrs base.           (line  58)
* cadar:                                 Pairs.               (line  94)
* cadar <1>:                             rnrs base.           (line  44)
* caddar:                                Pairs.               (line 106)
* caddar <1>:                            rnrs base.           (line  60)
* cadddr:                                Pairs.               (line 105)
* cadddr <1>:                            rnrs base.           (line  61)
* caddr:                                 Pairs.               (line  93)
* caddr <1>:                             rnrs base.           (line  46)
* cadr:                                  Pairs.               (line  87)
* cadr <1>:                              rnrs base.           (line  39)
* call:                                  Procedure Call and Return Instructions.
                                                              (line  13)
* call-with-blocked-asyncs:              System asyncs.       (line  38)
* call-with-current-continuation:        Continuations.       (line  33)
* call-with-current-continuation <1>:    rnrs base.           (line 349)
* call-with-error-handling:              Pre-Unwind Debugging.
                                                              (line  41)
* call-with-escape-continuation:         Prompt Primitives.   (line 110)
* call-with-file-and-dir:                texinfo.             (line  43)
* call-with-input-file:                  File Ports.          (line 124)
* call-with-input-file <1>:              rnrs io simple.      (line  29)
* call-with-input-string:                String Ports.        (line  43)
* call-with-new-thread:                  Threads.             (line  24)
* call-with-output-encoded-string:       Representing Strings as Bytes.
                                                              (line  62)
* call-with-output-file:                 File Ports.          (line 126)
* call-with-output-file <1>:             rnrs io simple.      (line  30)
* call-with-output-string:               String Ports.        (line  16)
* call-with-port:                        R6RS Port Manipulation.
                                                              (line  77)
* call-with-prompt:                      Prompt Primitives.   (line   9)
* call-with-trace:                       Tracing Traps.       (line  90)
* call-with-unblocked-asyncs:            System asyncs.       (line  49)
* call-with-values:                      Multiple Values.     (line  50)
* call-with-values <1>:                  rnrs base.           (line 354)
* call/cc:                               Continuations.       (line  34)
* call/cc <1>:                           rnrs base.           (line 350)
* call/cc <2>:                           Procedure Call and Return Instructions.
                                                              (line 103)
* call/ec:                               Prompt Primitives.   (line 111)
* call/nargs:                            Procedure Call and Return Instructions.
                                                              (line  42)
* cancel-thread:                         Threads.             (line  75)
* car:                                   Pairs.               (line  70)
* car <1>:                               rnrs base.           (line  36)
* car <2>:                               Inlined Scheme Instructions.
                                                              (line  35)
* car+cdr:                               SRFI-1 Selectors.    (line  18)
* case:                                  Conditionals.        (line  87)
* case <1>:                              rnrs base.           (line 116)
* case-lambda:                           Case-lambda.         (line  11)
* case-lambda <1>:                       rnrs control.        (line  26)
* case-lambda*:                          Case-lambda.         (line  59)
* catch:                                 Catch.               (line  53)
* cd:                                    Processes.           (line   6)
* cdaaar:                                Pairs.               (line 104)
* cdaaar <1>:                            rnrs base.           (line  54)
* cdaadr:                                Pairs.               (line 103)
* cdaadr <1>:                            rnrs base.           (line  57)
* cdaar:                                 Pairs.               (line  92)
* cdaar <1>:                             rnrs base.           (line  45)
* cdadar:                                Pairs.               (line 102)
* cdadar <1>:                            rnrs base.           (line  56)
* cdaddr:                                Pairs.               (line 101)
* cdaddr <1>:                            rnrs base.           (line  62)
* cdadr:                                 Pairs.               (line  91)
* cdadr <1>:                             rnrs base.           (line  47)
* cdar:                                  Pairs.               (line  86)
* cdar <1>:                              rnrs base.           (line  40)
* cddaar:                                Pairs.               (line 100)
* cddaar <1>:                            rnrs base.           (line  55)
* cddadr:                                Pairs.               (line  99)
* cddadr <1>:                            rnrs base.           (line  63)
* cddar:                                 Pairs.               (line  90)
* cddar <1>:                             rnrs base.           (line  48)
* cdddar:                                Pairs.               (line  98)
* cdddar <1>:                            rnrs base.           (line  64)
* cddddr:                                Pairs.               (line  97)
* cddddr <1>:                            rnrs base.           (line  65)
* cdddr:                                 Pairs.               (line  89)
* cdddr <1>:                             rnrs base.           (line  49)
* cddr:                                  Pairs.               (line  85)
* cddr <1>:                              rnrs base.           (line  41)
* cdr:                                   Pairs.               (line  71)
* cdr <1>:                               rnrs base.           (line  37)
* cdr <2>:                               Inlined Scheme Instructions.
                                                              (line  36)
* ceiling:                               Arithmetic.          (line  69)
* ceiling <1>:                           rnrs base.           (line 245)
* ceiling-quotient:                      Arithmetic.          (line 130)
* ceiling-remainder:                     Arithmetic.          (line 131)
* ceiling/:                              Arithmetic.          (line 129)
* center-string:                         texinfo string-utils.
                                                              (line  76)
* centered-quotient:                     Arithmetic.          (line 177)
* centered-remainder:                    Arithmetic.          (line 178)
* centered/:                             Arithmetic.          (line 176)
* change-class:                          Changing the Class of an Instance.
                                                              (line  24)
* change-class <1>:                      Changing the Class of an Instance.
                                                              (line  26)
* char->integer:                         Characters.          (line 211)
* char->integer <1>:                     rnrs base.           (line  27)
* char-alphabetic?:                      Characters.          (line 163)
* char-alphabetic? <1>:                  rnrs unicode.        (line  32)
* char-ci<=?:                            Characters.          (line 151)
* char-ci<=? <1>:                        rnrs unicode.        (line  26)
* char-ci<?:                             Characters.          (line 147)
* char-ci<? <1>:                         rnrs unicode.        (line  24)
* char-ci=?:                             Characters.          (line 143)
* char-ci=? <1>:                         rnrs unicode.        (line  23)
* char-ci>=?:                            Characters.          (line 159)
* char-ci>=? <1>:                        rnrs unicode.        (line  27)
* char-ci>?:                             Characters.          (line 155)
* char-ci>? <1>:                         rnrs unicode.        (line  25)
* char-downcase:                         Characters.          (line 225)
* char-downcase <1>:                     rnrs unicode.        (line  10)
* char-foldcase:                         rnrs unicode.        (line  12)
* char-general-category:                 Characters.          (line 187)
* char-general-category <1>:             rnrs unicode.        (line  42)
* char-is-both?:                         Characters.          (line 183)
* char-locale-ci<?:                      Text Collation.      (line  34)
* char-locale-ci=?:                      Text Collation.      (line  43)
* char-locale-ci>?:                      Text Collation.      (line  36)
* char-locale-downcase:                  Character Case Mapping.
                                                              (line  18)
* char-locale-titlecase:                 Character Case Mapping.
                                                              (line  28)
* char-locale-upcase:                    Character Case Mapping.
                                                              (line  23)
* char-locale<?:                         Text Collation.      (line  30)
* char-locale>?:                         Text Collation.      (line  32)
* char-lower-case?:                      Characters.          (line 179)
* char-lower-case? <1>:                  rnrs unicode.        (line  36)
* char-numeric?:                         Characters.          (line 167)
* char-numeric? <1>:                     rnrs unicode.        (line  33)
* char-ready?:                           Reading.             (line  15)
* char-set:                              Creating Character Sets.
                                                              (line  13)
* char-set->list:                        Querying Character Sets.
                                                              (line  33)
* char-set->string:                      Querying Character Sets.
                                                              (line  37)
* char-set-adjoin:                       Character-Set Algebra.
                                                              (line  11)
* char-set-adjoin!:                      Character-Set Algebra.
                                                              (line  21)
* char-set-any:                          Querying Character Sets.
                                                              (line  53)
* char-set-complement:                   Character-Set Algebra.
                                                              (line  31)
* char-set-complement!:                  Character-Set Algebra.
                                                              (line  62)
* char-set-contains?:                    Querying Character Sets.
                                                              (line  43)
* char-set-copy:                         Creating Character Sets.
                                                              (line   8)
* char-set-count:                        Querying Character Sets.
                                                              (line  28)
* char-set-cursor:                       Iterating Over Character Sets.
                                                              (line  16)
* char-set-cursor-next:                  Iterating Over Character Sets.
                                                              (line  26)
* char-set-delete:                       Character-Set Algebra.
                                                              (line  16)
* char-set-delete!:                      Character-Set Algebra.
                                                              (line  26)
* char-set-diff+intersection:            Character-Set Algebra.
                                                              (line  57)
* char-set-diff+intersection!:           Character-Set Algebra.
                                                              (line  82)
* char-set-difference:                   Character-Set Algebra.
                                                              (line  49)
* char-set-difference!:                  Character-Set Algebra.
                                                              (line  74)
* char-set-every:                        Querying Character Sets.
                                                              (line  48)
* char-set-filter:                       Creating Character Sets.
                                                              (line  39)
* char-set-filter!:                      Creating Character Sets.
                                                              (line  45)
* char-set-fold:                         Iterating Over Character Sets.
                                                              (line  37)
* char-set-for-each:                     Iterating Over Character Sets.
                                                              (line  64)
* char-set-hash:                         Character Set Predicates/Comparison.
                                                              (line  24)
* char-set-intersection:                 Character-Set Algebra.
                                                              (line  45)
* char-set-intersection!:                Character-Set Algebra.
                                                              (line  70)
* char-set-map:                          Iterating Over Character Sets.
                                                              (line  69)
* char-set-ref:                          Iterating Over Character Sets.
                                                              (line  20)
* char-set-size:                         Querying Character Sets.
                                                              (line  24)
* char-set-unfold:                       Iterating Over Character Sets.
                                                              (line  42)
* char-set-unfold!:                      Iterating Over Character Sets.
                                                              (line  53)
* char-set-union:                        Character-Set Algebra.
                                                              (line  41)
* char-set-union!:                       Character-Set Algebra.
                                                              (line  66)
* char-set-xor:                          Character-Set Algebra.
                                                              (line  53)
* char-set-xor!:                         Character-Set Algebra.
                                                              (line  78)
* char-set<=:                            Character Set Predicates/Comparison.
                                                              (line  19)
* char-set=:                             Character Set Predicates/Comparison.
                                                              (line  15)
* char-set?:                             Character Set Predicates/Comparison.
                                                              (line  11)
* char-title-case?:                      rnrs unicode.        (line  37)
* char-titlecase:                        Characters.          (line 229)
* char-titlecase <1>:                    rnrs unicode.        (line  11)
* char-upcase:                           Characters.          (line 221)
* char-upcase <1>:                       rnrs unicode.        (line   9)
* char-upper-case?:                      Characters.          (line 175)
* char-upper-case? <1>:                  rnrs unicode.        (line  35)
* char-whitespace?:                      Characters.          (line 171)
* char-whitespace? <1>:                  rnrs unicode.        (line  34)
* char<=?:                               Characters.          (line 121)
* char<=? <1>:                           rnrs base.           (line  24)
* char<?:                                Characters.          (line 117)
* char<? <1>:                            rnrs base.           (line  22)
* char=?:                                Characters.          (line 113)
* char=? <1>:                            rnrs base.           (line  21)
* char>=?:                               Characters.          (line 129)
* char>=? <1>:                           rnrs base.           (line  25)
* char>?:                                Characters.          (line 125)
* char>? <1>:                            rnrs base.           (line  23)
* char?:                                 Characters.          (line 106)
* char? <1>:                             rnrs base.           (line  20)
* chdir:                                 Processes.           (line   6)
* chmod:                                 File System.         (line 138)
* chown:                                 File System.         (line 125)
* chroot:                                Processes.           (line  25)
* circular-list:                         SRFI-1 Constructors. (line  26)
* circular-list?:                        SRFI-1 Predicates.   (line  18)
* class:                                 Class Definition Protocol.
                                                              (line  63)
* class-direct-methods:                  Classes.             (line  27)
* class-direct-slots:                    Classes.             (line  19)
* class-direct-subclasses:               Classes.             (line  23)
* class-direct-supers:                   Classes.             (line  15)
* class-methods:                         Classes.             (line  44)
* class-name:                            Classes.             (line  11)
* class-of:                              Instances.           (line   6)
* class-of <1>:                          Inlined Scheme Instructions.
                                                              (line  43)
* class-precedence-list:                 Classes.             (line  32)
* class-redefinition:                    Customizing Class Redefinition.
                                                              (line  14)
* class-redefinition <1>:                Customizing Class Redefinition.
                                                              (line  19)
* class-slot-definition:                 Slots.               (line   6)
* class-slot-ref:                        Accessing Slots.     (line  86)
* class-slot-set!:                       Accessing Slots.     (line  97)
* class-slots:                           Classes.             (line  36)
* class-subclasses:                      Classes.             (line  41)
* clear-value-history!:                  Value History.       (line  51)
* close:                                 Ports and File Descriptors.
                                                              (line 151)
* close-fdes:                            Ports and File Descriptors.
                                                              (line 159)
* close-input-port:                      Closing.             (line  14)
* close-input-port <1>:                  rnrs io simple.      (line  38)
* close-output-port:                     Closing.             (line  15)
* close-output-port <1>:                 rnrs io simple.      (line  39)
* close-pipe:                            Pipes.               (line  66)
* close-port:                            Closing.             (line   6)
* close-server:                          Web Server.          (line 136)
* closedir:                              File System.         (line 251)
* collapse-repeated-chars:               texinfo string-utils.
                                                              (line 105)
* command-line:                          Runtime Environment. (line   7)
* command-line <1>:                      rnrs programs.       (line   9)
* compile:                               Compile Commands.    (line   6)
* compile <1>:                           Compilation.         (line  96)
* compile-file:                          Compile Commands.    (line   9)
* compile-file <1>:                      Compilation.         (line 105)
* compiled-file-name:                    Compilation.         (line 122)
* complex?:                              Complex Numbers.     (line  36)
* complex? <1>:                          rnrs base.           (line 131)
* compose:                               Higher-Order Functions.
                                                              (line  31)
* compute-std-cpl:                       Customizing Class Definition.
                                                              (line  25)
* concatenate:                           SRFI-1 Length Append etc.
                                                              (line  10)
* concatenate!:                          SRFI-1 Length Append etc.
                                                              (line  11)
* cond:                                  Conditionals.        (line  49)
* cond <1>:                              rnrs base.           (line 115)
* cond-expand:                           SRFI-0.              (line  15)
* condition:                             SRFI-35.             (line  92)
* condition <1>:                         rnrs conditions.     (line  41)
* condition-accessor:                    rnrs conditions.     (line  53)
* condition-has-type?:                   SRFI-35.             (line  52)
* condition-irritants:                   rnrs conditions.     (line 108)
* condition-message:                     SRFI-35.             (line 123)
* condition-message <1>:                 rnrs conditions.     (line  73)
* condition-predicate:                   rnrs conditions.     (line  52)
* condition-ref:                         SRFI-35.             (line  55)
* condition-type?:                       SRFI-35.             (line  32)
* condition-variable-broadcast!:         SRFI-18 Condition variables.
                                                              (line  32)
* condition-variable-name:               SRFI-18 Condition variables.
                                                              (line  21)
* condition-variable-signal!:            SRFI-18 Condition variables.
                                                              (line  31)
* condition-variable-specific:           SRFI-18 Condition variables.
                                                              (line  25)
* condition-variable-specific-set!:      SRFI-18 Condition variables.
                                                              (line  26)
* condition-variable?:                   Mutexes and Condition Variables.
                                                              (line 135)
* condition-variable? <1>:               SRFI-18 Condition variables.
                                                              (line  11)
* condition-who:                         rnrs conditions.     (line 115)
* condition?:                            rnrs conditions.     (line  38)
* connect:                               Network Sockets and Communication.
                                                              (line 143)
* connect <1>:                           Network Sockets and Communication.
                                                              (line 144)
* connect <2>:                           Network Sockets and Communication.
                                                              (line 145)
* connect <3>:                           Network Sockets and Communication.
                                                              (line 147)
* cons:                                  Pairs.               (line  45)
* cons <1>:                              rnrs base.           (line  35)
* cons <2>:                              Inlined Scheme Instructions.
                                                              (line  34)
* cons*:                                 List Constructors.   (line  25)
* cons* <1>:                             rnrs lists.          (line  61)
* cons* <2>:                             rnrs lists.          (line  62)
* cons-source:                           Source Properties.   (line  86)
* const:                                 Higher-Order Functions.
                                                              (line  11)
* continuation-call:                     Trampoline Instructions.
                                                              (line  31)
* continue:                              while do.            (line  75)
* copy-bit:                              SRFI-60.             (line  52)
* copy-bit-field:                        SRFI-60.             (line  59)
* copy-file:                             File System.         (line 167)
* copy-random-state:                     Random.              (line  14)
* copy-time:                             SRFI-19 Time.        (line  59)
* copy-tree:                             Copying.             (line  12)
* cos:                                   Scientific.          (line  25)
* cos <1>:                               rnrs base.           (line 147)
* cosh:                                  Scientific.          (line  54)
* count:                                 SRFI-1 Length Append etc.
                                                              (line  49)
* coverage-data->lcov:                   Code Coverage.       (line  20)
* coverage-data?:                        Code Coverage.       (line  16)
* crypt:                                 Encryption.          (line  13)
* ctermid:                               Terminals and Ptys.  (line  16)
* current-date:                          SRFI-19 Date.        (line  58)
* current-dynamic-state:                 Fluids and Dynamic States.
                                                              (line 123)
* current-error-port:                    Default Ports.       (line  38)
* current-error-port <1>:                R6RS Output Ports.   (line  52)
* current-exception-handler:             SRFI-18 Exceptions.  (line  14)
* current-filename:                      Source Properties.   (line  77)
* current-http-proxy:                    Web Client.          (line  75)
* current-input-port:                    Default Ports.       (line   6)
* current-input-port <1>:                R6RS Input Ports.    (line  51)
* current-julian-day:                    SRFI-19 Date.        (line  63)
* current-load-port:                     Loading.             (line  78)
* current-modified-julian-day:           SRFI-19 Date.        (line  66)
* current-module:                        Module System Reflection.
                                                              (line  17)
* current-output-port:                   Default Ports.       (line  23)
* current-output-port <1>:               R6RS Output Ports.   (line  51)
* current-processor-count:               Processes.           (line 368)
* current-source-location:               Source Properties.   (line  73)
* current-ssax-error-port:               SSAX.                (line 151)
* current-thread:                        Threads.             (line  20)
* current-thread <1>:                    SRFI-18 Threads.     (line  14)
* current-time:                          Time.                (line   6)
* current-time <1>:                      SRFI-18 Time.        (line  12)
* current-time <2>:                      SRFI-19 Time.        (line  62)
* cut:                                   SRFI-26.             (line  11)
* cute:                                  SRFI-26.             (line  12)
* date->julian-day:                      SRFI-19 Time/Date conversions.
                                                              (line   6)
* date->modified-julian-day:             SRFI-19 Time/Date conversions.
                                                              (line   7)
* date->string:                          SRFI-19 Date to string.
                                                              (line   6)
* date->time-monotonic:                  SRFI-19 Time/Date conversions.
                                                              (line   8)
* date->time-tai:                        SRFI-19 Time/Date conversions.
                                                              (line   9)
* date->time-utc:                        SRFI-19 Time/Date conversions.
                                                              (line  10)
* date-day:                              SRFI-19 Date.        (line  34)
* date-hour:                             SRFI-19 Date.        (line  31)
* date-minute:                           SRFI-19 Date.        (line  28)
* date-month:                            SRFI-19 Date.        (line  37)
* date-nanosecond:                       SRFI-19 Date.        (line  20)
* date-second:                           SRFI-19 Date.        (line  23)
* date-week-day:                         SRFI-19 Date.        (line  50)
* date-week-number:                      SRFI-19 Date.        (line  53)
* date-year:                             SRFI-19 Date.        (line  40)
* date-year-day:                         SRFI-19 Date.        (line  47)
* date-zone-offset:                      SRFI-19 Date.        (line  44)
* date?:                                 SRFI-19 Date.        (line  13)
* datum->random-state:                   Random.              (line  67)
* datum->syntax:                         Syntax Case.         (line 181)
* datum->syntax <1>:                     rnrs syntax-case.    (line  49)
* debug-disable:                         Debug Options.       (line  35)
* debug-enable:                          Debug Options.       (line  34)
* debug-options:                         Debug Options.       (line   9)
* debug-set!:                            Debug Options.       (line  36)
* declare-default-port!:                 URIs.                (line  69)
* declare-header!:                       HTTP.                (line  75)
* declare-opaque-header!:                HTTP.                (line  94)
* deep-clone:                            GOOPS Object Miscellany.
                                                              (line  35)
* deep-clone <1>:                        GOOPS Object Miscellany.
                                                              (line  36)
* default-duplicate-binding-handler:     Creating Guile Modules.
                                                              (line 160)
* default-prompt-tag:                    Prompt Primitives.   (line  26)
* default-random-source:                 SRFI-27 Default Random Source.
                                                              (line  15)
* define:                                Top Level.           (line  32)
* define <1>:                            rnrs base.           (line  77)
* define <2>:                            Curried Definitions. (line  24)
* define <3>:                            Top-Level Environment Instructions.
                                                              (line  51)
* define*:                               lambda* and define*. (line  24)
* define* <1>:                           Curried Definitions. (line  25)
* define*-public:                        ice-9 optargs.       (line  79)
* define-accessor:                       Accessors.           (line  16)
* define-class:                          Class Definition.    (line   8)
* define-class <1>:                      Class Definition.    (line  21)
* define-condition-type:                 SRFI-35.             (line  74)
* define-condition-type <1>:             rnrs conditions.     (line  57)
* define-enumeration:                    rnrs enums.          (line  67)
* define-generic:                        Methods and Generic Functions.
                                                              (line  55)
* define-generic <1>:                    Methods and Generic Functions.
                                                              (line  57)
* define-immutable-record-type:          SRFI-9 Records.      (line 113)
* define-inlinable:                      Inlinable Procedures.
                                                              (line  39)
* define-language:                       Compiler Tower.      (line  22)
* define-macro:                          Defmacros.           (line  14)
* define-method:                         Methods and Generic Functions.
                                                              (line  55)
* define-method <1>:                     Methods and Generic Functions.
                                                              (line  66)
* define-module:                         Creating Guile Modules.
                                                              (line  18)
* define-once:                           Top Level.           (line  67)
* define-parsed-entity!:                 SSAX.                (line 178)
* define-public:                         Creating Guile Modules.
                                                              (line 179)
* define-public <1>:                     Curried Definitions. (line  26)
* define-reader-ctor:                    SRFI-10.             (line  19)
* define-record-type:                    SRFI-9 Records.      (line  13)
* define-record-type <1>:                rnrs records syntactic.
                                                              (line   9)
* define-server-impl:                    Web Server.          (line  67)
* define-stream:                         SRFI-41 Stream Library.
                                                              (line   6)
* define-syntax:                         Defining Macros.     (line  26)
* define-syntax <1>:                     rnrs base.           (line  81)
* define-syntax-parameter:               Syntax Parameters.   (line  22)
* define-syntax-rule:                    Syntax Rules.        (line 207)
* define-values:                         Binding Multiple Values.
                                                              (line   6)
* define-wrapped-pointer-type:           Void Pointers and Byte Access.
                                                              (line  64)
* defined?:                              Binding Reflection.  (line   9)
* defmacro:                              Defmacros.           (line  14)
* defmacro*:                             ice-9 optargs.       (line  82)
* defmacro*-public:                      ice-9 optargs.       (line  83)
* defvar:                                Top Level.           (line  67)
* delay:                                 Delayed Evaluation.  (line  10)
* delay <1>:                             SRFI-45.             (line  37)
* delay <2>:                             rnrs r5rs.           (line  20)
* delete:                                List Modification.   (line  29)
* delete <1>:                            SRFI-1 Deleting.     (line   6)
* delete!:                               List Modification.   (line  41)
* delete! <1>:                           SRFI-1 Deleting.     (line   7)
* delete-duplicates:                     SRFI-1 Deleting.     (line  30)
* delete-duplicates!:                    SRFI-1 Deleting.     (line  31)
* delete-file:                           File System.         (line 163)
* delete-trap!:                          Trap States.         (line  46)
* delete1!:                              List Modification.   (line  63)
* delq:                                  List Modification.   (line  17)
* delq!:                                 List Modification.   (line  39)
* delq1!:                                List Modification.   (line  51)
* delv:                                  List Modification.   (line  23)
* delv!:                                 List Modification.   (line  40)
* delv1!:                                List Modification.   (line  57)
* denominator:                           Reals and Rationals. (line 124)
* denominator <1>:                       rnrs base.           (line 157)
* deq!:                                  Queues.              (line  31)
* dereference-pointer:                   Void Pointers and Byte Access.
                                                              (line  38)
* describe:                              Help Commands.       (line  35)
* directory-stream?:                     File System.         (line 235)
* dirname:                               File System.         (line 326)
* disable-trap!:                         Trap States.         (line  43)
* disable-value-history!:                Value History.       (line  48)
* disassemble:                           Compile Commands.    (line  18)
* disassemble-file:                      Compile Commands.    (line  21)
* display:                               Scheme Write.        (line  18)
* display <1>:                           rnrs io simple.      (line  55)
* display <2>:                           rnrs io simple.      (line  56)
* display <3>:                           GOOPS Object Miscellany.
                                                              (line  48)
* display-application:                   Frames.              (line  48)
* display-backtrace:                     Stacks.              (line  22)
* display-error:                         Handling Errors.     (line  34)
* div:                                   rnrs base.           (line 249)
* div <1>:                               Inlined Mathematical Instructions.
                                                              (line  21)
* div-and-mod:                           rnrs base.           (line 251)
* div0:                                  rnrs base.           (line 268)
* div0-and-mod0:                         rnrs base.           (line 270)
* do:                                    while do.            (line  11)
* do <1>:                                rnrs control.        (line  21)
* dotted-list?:                          SRFI-1 Predicates.   (line  31)
* doubly-weak-hash-table?:               Weak hash tables.    (line  20)
* down:                                  Debug Commands.      (line  21)
* drain-input:                           Reading.             (line  82)
* drop:                                  SRFI-1 Selectors.    (line  28)
* drop <1>:                              Miscellaneous Instructions.
                                                              (line  22)
* drop-right:                            SRFI-1 Selectors.    (line  35)
* drop-right!:                           SRFI-1 Selectors.    (line  36)
* drop-while:                            SRFI-1 Searching.    (line  26)
* dup:                                   Ports and File Descriptors.
                                                              (line 220)
* dup <1>:                               Miscellaneous Instructions.
                                                              (line  25)
* dup->fdes:                             Ports and File Descriptors.
                                                              (line 208)
* dup->inport:                           Ports and File Descriptors.
                                                              (line 214)
* dup->outport:                          Ports and File Descriptors.
                                                              (line 217)
* dup->port:                             Ports and File Descriptors.
                                                              (line 224)
* dup2:                                  Ports and File Descriptors.
                                                              (line 255)
* duplicate-port:                        Ports and File Descriptors.
                                                              (line 228)
* dynamic-call:                          Foreign Functions.   (line  24)
* dynamic-func:                          Foreign Functions.   (line  10)
* dynamic-link:                          Foreign Libraries.   (line  37)
* dynamic-object?:                       Foreign Libraries.   (line  59)
* dynamic-pointer:                       Foreign Variables.   (line   9)
* dynamic-state?:                        Fluids and Dynamic States.
                                                              (line 114)
* dynamic-unlink:                        Foreign Libraries.   (line  63)
* dynamic-wind:                          Dynamic Wind.        (line  69)
* dynamic-wind <1>:                      rnrs base.           (line 357)
* eager:                                 SRFI-45.             (line  56)
* ee?:                                   Inlined Mathematical Instructions.
                                                              (line  25)
* effective-version:                     Build Config.        (line  10)
* eighth:                                SRFI-1 Selectors.    (line  13)
* empty-box:                             Lexical Environment Instructions.
                                                              (line  36)
* enable-primitive-generic!:             Extending Primitives.
                                                              (line  16)
* enable-trap!:                          Trap States.         (line  40)
* enable-value-history!:                 Value History.       (line  45)
* encode-and-join-uri-path:              URIs.                (line 113)
* end-of-char-set?:                      Iterating Over Character Sets.
                                                              (line  32)
* endgrent:                              User Information.    (line  86)
* endhostent:                            Network Databases.   (line 221)
* endianness:                            Bytevector Endianness.
                                                              (line  21)
* endnetent:                             Network Databases.   (line 271)
* endprotoent:                           Network Databases.   (line 318)
* endpwent:                              User Information.    (line  43)
* endservent:                            Network Databases.   (line 379)
* enq!:                                  Queues.              (line  28)
* ensure-accessor:                       Generic Function Internals.
                                                              (line  38)
* ensure-generic:                        Generic Function Internals.
                                                              (line  13)
* ensure-metaclass:                      Class Definition Protocol.
                                                              (line 104)
* enum-set->list:                        rnrs enums.          (line  36)
* enum-set-complement:                   rnrs enums.          (line  59)
* enum-set-constructor:                  rnrs enums.          (line  30)
* enum-set-difference:                   rnrs enums.          (line  55)
* enum-set-indexer:                      rnrs enums.          (line  25)
* enum-set-intersection:                 rnrs enums.          (line  54)
* enum-set-member?:                      rnrs enums.          (line  41)
* enum-set-projection:                   rnrs enums.          (line  63)
* enum-set-subset?:                      rnrs enums.          (line  42)
* enum-set-union:                        rnrs enums.          (line  53)
* enum-set-universe:                     rnrs enums.          (line  21)
* enum-set=?:                            rnrs enums.          (line  43)
* environ:                               Runtime Environment. (line  84)
* environment:                           rnrs eval.           (line  15)
* eof-object:                            R6RS End-of-File.    (line  15)
* eof-object <1>:                        rnrs io simple.      (line  19)
* eof-object?:                           Reading.             (line  11)
* eof-object? <1>:                       R6RS End-of-File.    (line   9)
* eof-object? <2>:                       rnrs io simple.      (line  20)
* eol-style:                             R6RS Transcoders.    (line  39)
* eq?:                                   Equality.            (line  32)
* eq? <1>:                               rnrs base.           (line 123)
* eq? <2>:                               Inlined Scheme Instructions.
                                                              (line  24)
* equal-hash:                            rnrs hashtables.     (line 110)
* equal?:                                Equality.            (line  91)
* equal? <1>:                            rnrs base.           (line 125)
* equal? <2>:                            Inlined Scheme Instructions.
                                                              (line  29)
* eqv?:                                  Equality.            (line  75)
* eqv? <1>:                              rnrs base.           (line 124)
* eqv? <2>:                              Inlined Scheme Instructions.
                                                              (line  28)
* error:                                 Debug Commands.      (line  42)
* error <1>:                             Error Reporting.     (line  10)
* error <2>:                             rnrs base.           (line 316)
* error-handling-mode:                   R6RS Transcoders.    (line 114)
* error-message:                         Debug Commands.      (line  41)
* error?:                                SRFI-35.             (line 138)
* error? <1>:                            rnrs conditions.     (line  90)
* escape-special-chars:                  texinfo string-utils.
                                                              (line  15)
* euclidean-quotient:                    Arithmetic.          (line  79)
* euclidean-remainder:                   Arithmetic.          (line  80)
* euclidean/:                            Arithmetic.          (line  78)
* eval:                                  Fly Evaluation.      (line  10)
* eval <1>:                              rnrs eval.           (line   9)
* eval-string:                           Fly Evaluation.      (line  38)
* eval-when:                             Eval When.           (line  43)
* eval-when <1>:                         Loading.             (line  58)
* even?:                                 Integer Operations.  (line  10)
* even? <1>:                             rnrs base.           (line 173)
* every:                                 SRFI-1 Searching.    (line  61)
* exact:                                 rnrs base.           (line 163)
* exact->inexact:                        Exactness.           (line  68)
* exact->inexact <1>:                    rnrs r5rs.           (line   9)
* exact-integer-sqrt:                    Integer Operations.  (line  63)
* exact-integer-sqrt <1>:                rnrs base.           (line 176)
* exact-integer?:                        Integers.            (line  84)
* exact?:                                Exactness.           (line  19)
* exact? <1>:                            rnrs base.           (line 161)
* execl:                                 Processes.           (line 245)
* execle:                                Processes.           (line 270)
* execlp:                                Processes.           (line 260)
* exists:                                rnrs lists.          (line  14)
* exit:                                  Processes.           (line 213)
* exit <1>:                              rnrs programs.       (line  13)
* exp:                                   Scientific.          (line  41)
* exp <1>:                               rnrs base.           (line 143)
* expand:                                Compile Commands.    (line  12)
* expand-tabs:                           texinfo string-utils.
                                                              (line  68)
* expect:                                Expect.              (line 106)
* expect-strings:                        Expect.              (line  17)
* export:                                Creating Guile Modules.
                                                              (line 172)
* export!:                               Creating Guile Modules.
                                                              (line 188)
* expt:                                  Scientific.          (line  19)
* expt <1>:                              rnrs base.           (line 144)
* extract-condition:                     SRFI-35.             (line  63)
* f32vector:                             SRFI-4 API.          (line  73)
* f32vector->list:                       SRFI-4 API.          (line 181)
* f32vector-length:                      SRFI-4 API.          (line 101)
* f32vector-ref:                         SRFI-4 API.          (line 127)
* f32vector-set!:                        SRFI-4 API.          (line 154)
* f32vector?:                            SRFI-4 API.          (line  17)
* f64vector:                             SRFI-4 API.          (line  74)
* f64vector->list:                       SRFI-4 API.          (line 182)
* f64vector-length:                      SRFI-4 API.          (line 102)
* f64vector-ref:                         SRFI-4 API.          (line 128)
* f64vector-set!:                        SRFI-4 API.          (line 155)
* f64vector?:                            SRFI-4 API.          (line  18)
* false-if-exception:                    Error Reporting.     (line  38)
* fchmod:                                File System.         (line 138)
* fchown:                                File System.         (line 125)
* fcntl:                                 Ports and File Descriptors.
                                                              (line 300)
* fdes->inport:                          Ports and File Descriptors.
                                                              (line  87)
* fdes->outport:                         Ports and File Descriptors.
                                                              (line  92)
* fdes->ports:                           Ports and File Descriptors.
                                                              (line  82)
* fdopen:                                Ports and File Descriptors.
                                                              (line  75)
* feature?:                              Feature Manipulation.
                                                              (line  10)
* fflush:                                Writing.             (line  49)
* fifth:                                 SRFI-1 Selectors.    (line  10)
* file-encoding:                         Character Encoding of Source Files.
                                                              (line  64)
* file-exists?:                          File System.         (line 340)
* file-name-separator?:                  File System.         (line 357)
* file-options:                          R6RS File Options.   (line  14)
* file-port?:                            File Ports.          (line 186)
* file-system-fold:                      File Tree Walk.      (line  75)
* file-system-tree:                      File Tree Walk.      (line  13)
* filename-completion-function:          Readline Functions.  (line 110)
* fileno:                                Ports and File Descriptors.
                                                              (line  66)
* fill-string:                           texinfo string-utils.
                                                              (line 167)
* filter:                                List Modification.   (line  69)
* filter <1>:                            rnrs lists.          (line  20)
* filter <2>:                            SXPath.              (line  95)
* filter!:                               List Modification.   (line  70)
* filter-empty-elements:                 texinfo docbook.     (line  54)
* filter-map:                            SRFI-1 Fold and Map. (line 208)
* find:                                  SRFI-1 Searching.    (line  10)
* find <1>:                              rnrs lists.          (line   9)
* find-string-from-port?:                sxml ssax input-parse.
                                                              (line  56)
* find-tail:                             SRFI-1 Searching.    (line  14)
* finish:                                Debug Commands.      (line  84)
* finite?:                               Reals and Rationals. (line 107)
* finite? <1>:                           rnrs base.           (line 305)
* first:                                 SRFI-1 Selectors.    (line   6)
* first-set-bit:                         SRFI-60.             (line  44)
* fix-closure:                           Lexical Environment Instructions.
                                                              (line  70)
* fixnum->flonum:                        rnrs arithmetic flonums.
                                                              (line 130)
* fixnum-width:                          rnrs arithmetic fixnums.
                                                              (line  23)
* fixnum?:                               rnrs arithmetic fixnums.
                                                              (line  20)
* fl*:                                   rnrs arithmetic flonums.
                                                              (line  53)
* fl+:                                   rnrs arithmetic flonums.
                                                              (line  52)
* fl-:                                   rnrs arithmetic flonums.
                                                              (line  56)
* fl- <1>:                               rnrs arithmetic flonums.
                                                              (line  57)
* fl/:                                   rnrs arithmetic flonums.
                                                              (line  58)
* fl/ <1>:                               rnrs arithmetic flonums.
                                                              (line  59)
* fl<=?:                                 rnrs arithmetic flonums.
                                                              (line  23)
* fl<?:                                  rnrs arithmetic flonums.
                                                              (line  22)
* fl=?:                                  rnrs arithmetic flonums.
                                                              (line  21)
* fl>=?:                                 rnrs arithmetic flonums.
                                                              (line  25)
* fl>?:                                  rnrs arithmetic flonums.
                                                              (line  24)
* flabs:                                 rnrs arithmetic flonums.
                                                              (line  65)
* flacos:                                rnrs arithmetic flonums.
                                                              (line  97)
* flasin:                                rnrs arithmetic flonums.
                                                              (line  96)
* flatan:                                rnrs arithmetic flonums.
                                                              (line  98)
* flatan <1>:                            rnrs arithmetic flonums.
                                                              (line  99)
* flceiling:                             rnrs arithmetic flonums.
                                                              (line  83)
* flcos:                                 rnrs arithmetic flonums.
                                                              (line  94)
* fldenominator:                         rnrs arithmetic flonums.
                                                              (line  78)
* fldiv:                                 rnrs arithmetic flonums.
                                                              (line  69)
* fldiv-and-mod:                         rnrs arithmetic flonums.
                                                              (line  68)
* fldiv0:                                rnrs arithmetic flonums.
                                                              (line  72)
* fldiv0-and-mod0:                       rnrs arithmetic flonums.
                                                              (line  71)
* fldmod:                                rnrs arithmetic flonums.
                                                              (line  70)
* fleven?:                               rnrs arithmetic flonums.
                                                              (line  36)
* flexp:                                 rnrs arithmetic flonums.
                                                              (line  90)
* flexpt:                                rnrs arithmetic flonums.
                                                              (line 108)
* flfinite?:                             rnrs arithmetic flonums.
                                                              (line  42)
* flfloor:                               rnrs arithmetic flonums.
                                                              (line  82)
* flinfinite?:                           rnrs arithmetic flonums.
                                                              (line  43)
* flinteger?:                            rnrs arithmetic flonums.
                                                              (line  31)
* fllog:                                 rnrs arithmetic flonums.
                                                              (line  91)
* fllog <1>:                             rnrs arithmetic flonums.
                                                              (line  92)
* flmax:                                 rnrs arithmetic flonums.
                                                              (line  48)
* flmin:                                 rnrs arithmetic flonums.
                                                              (line  49)
* flmod0:                                rnrs arithmetic flonums.
                                                              (line  73)
* flnan?:                                rnrs arithmetic flonums.
                                                              (line  44)
* flnegative?:                           rnrs arithmetic flonums.
                                                              (line  34)
* flnumerator:                           rnrs arithmetic flonums.
                                                              (line  77)
* flock:                                 Ports and File Descriptors.
                                                              (line 346)
* flodd?:                                rnrs arithmetic flonums.
                                                              (line  35)
* flonum?:                               rnrs arithmetic flonums.
                                                              (line  14)
* floor:                                 Arithmetic.          (line  65)
* floor <1>:                             rnrs base.           (line 244)
* floor-quotient:                        Arithmetic.          (line 105)
* floor-remainder:                       Arithmetic.          (line 106)
* floor/:                                Arithmetic.          (line 104)
* flpositive?:                           rnrs arithmetic flonums.
                                                              (line  33)
* flround:                               rnrs arithmetic flonums.
                                                              (line  85)
* flsin:                                 rnrs arithmetic flonums.
                                                              (line  93)
* flsqrt:                                rnrs arithmetic flonums.
                                                              (line 104)
* fltan:                                 rnrs arithmetic flonums.
                                                              (line  95)
* fltruncate:                            rnrs arithmetic flonums.
                                                              (line  84)
* fluid->parameter:                      Parameters.          (line  95)
* fluid-bound?:                          Fluids and Dynamic States.
                                                              (line  60)
* fluid-ref:                             Fluids and Dynamic States.
                                                              (line  46)
* fluid-ref <1>:                         Dynamic Environment Instructions.
                                                              (line  36)
* fluid-set:                             Dynamic Environment Instructions.
                                                              (line  39)
* fluid-set!:                            Fluids and Dynamic States.
                                                              (line  52)
* fluid-unset!:                          Fluids and Dynamic States.
                                                              (line  56)
* fluid?:                                Fluids and Dynamic States.
                                                              (line  42)
* flush-all-ports:                       Writing.             (line  59)
* flush-output-port:                     R6RS Output Ports.   (line  10)
* flzero?:                               rnrs arithmetic flonums.
                                                              (line  32)
* fold:                                  SRFI-1 Fold and Map. (line   6)
* fold-layout:                           SXML Tree Fold.      (line  41)
* fold-left:                             rnrs lists.          (line  26)
* fold-matches:                          Regexp Functions.    (line 144)
* fold-right:                            SRFI-1 Fold and Map. (line   7)
* fold-right <1>:                        rnrs lists.          (line  27)
* fold-values:                           SXML Tree Fold.      (line  31)
* foldt:                                 SXML Tree Fold.      (line  17)
* foldts:                                Transforming SXML.   (line  69)
* foldts <1>:                            SXML Tree Fold.      (line  22)
* foldts*:                               SXML Tree Fold.      (line  26)
* foldts*-values:                        SXML Tree Fold.      (line  36)
* for-all:                               rnrs lists.          (line  13)
* for-each:                              List Mapping.        (line  24)
* for-each <1>:                          SRFI-1 Fold and Map. (line 168)
* for-each <2>:                          rnrs base.           (line 189)
* force:                                 Delayed Evaluation.  (line  18)
* force <1>:                             SRFI-45.             (line  49)
* force <2>:                             rnrs r5rs.           (line  21)
* force-output:                          Writing.             (line  49)
* foreign-call:                          Trampoline Instructions.
                                                              (line  25)
* format:                                Formatted Output.    (line  26)
* fourth:                                SRFI-1 Selectors.    (line   9)
* frame:                                 Debug Commands.      (line  27)
* frame-address:                         Frames.              (line  24)
* frame-arguments:                       Frames.              (line  20)
* frame-dynamic-link:                    Frames.              (line  31)
* frame-instruction-pointer:             Frames.              (line  25)
* frame-local-ref:                       Frames.              (line  40)
* frame-local-set!:                      Frames.              (line  41)
* frame-mv-return-address:               Frames.              (line  33)
* frame-num-locals:                      Frames.              (line  39)
* frame-previous:                        Frames.              (line  10)
* frame-procedure:                       Frames.              (line  15)
* frame-return-address:                  Frames.              (line  32)
* frame-stack-pointer:                   Frames.              (line  26)
* frame?:                                Frames.              (line   6)
* free-boxed-ref:                        Lexical Environment Instructions.
                                                              (line  50)
* free-boxed-set:                        Lexical Environment Instructions.
                                                              (line  51)
* free-identifier=?:                     Syntax Transformer Helpers.
                                                              (line  16)
* free-identifier=? <1>:                 rnrs syntax-case.    (line  34)
* free-ref:                              Lexical Environment Instructions.
                                                              (line  46)
* fstat:                                 File System.         (line  49)
* fsync:                                 Ports and File Descriptors.
                                                              (line 116)
* ftell:                                 Random Access.       (line  25)
* ftruncate:                             Random Access.       (line  32)
* ftw:                                   File Tree Walk.      (line 161)
* future:                                Futures.             (line  85)
* future?:                               Futures.             (line 101)
* fx*:                                   rnrs arithmetic fixnums.
                                                              (line  54)
* fx*/carry:                             rnrs arithmetic fixnums.
                                                              (line  88)
* fx+:                                   rnrs arithmetic fixnums.
                                                              (line  53)
* fx+/carry:                             rnrs arithmetic fixnums.
                                                              (line  74)
* fx-:                                   rnrs arithmetic fixnums.
                                                              (line  57)
* fx- <1>:                               rnrs arithmetic fixnums.
                                                              (line  58)
* fx-/carry:                             rnrs arithmetic fixnums.
                                                              (line  81)
* fx<=?:                                 rnrs arithmetic fixnums.
                                                              (line  34)
* fx<?:                                  rnrs arithmetic fixnums.
                                                              (line  32)
* fx=?:                                  rnrs arithmetic fixnums.
                                                              (line  30)
* fx>=?:                                 rnrs arithmetic fixnums.
                                                              (line  33)
* fx>?:                                  rnrs arithmetic fixnums.
                                                              (line  31)
* fxand:                                 rnrs arithmetic fixnums.
                                                              (line  96)
* fxarithmetic-shift:                    rnrs arithmetic fixnums.
                                                              (line 137)
* fxarithmetic-shift-left:               rnrs arithmetic fixnums.
                                                              (line 138)
* fxarithmetic-shift-right:              rnrs arithmetic fixnums.
                                                              (line 139)
* fxbit-count:                           rnrs arithmetic fixnums.
                                                              (line 108)
* fxbit-field:                           rnrs arithmetic fixnums.
                                                              (line 127)
* fxbit-set?:                            rnrs arithmetic fixnums.
                                                              (line 119)
* fxcopy-bit:                            rnrs arithmetic fixnums.
                                                              (line 123)
* fxcopy-bit-field:                      rnrs arithmetic fixnums.
                                                              (line 132)
* fxdiv:                                 rnrs arithmetic fixnums.
                                                              (line  66)
* fxdiv-and-mod:                         rnrs arithmetic fixnums.
                                                              (line  65)
* fxdiv0:                                rnrs arithmetic fixnums.
                                                              (line  69)
* fxdiv0-and-mod0:                       rnrs arithmetic fixnums.
                                                              (line  68)
* fxeven?:                               rnrs arithmetic fixnums.
                                                              (line  44)
* fxfirst-bit-set:                       rnrs arithmetic fixnums.
                                                              (line 115)
* fxif:                                  rnrs arithmetic fixnums.
                                                              (line 103)
* fxior:                                 rnrs arithmetic fixnums.
                                                              (line  97)
* fxlength:                              rnrs arithmetic fixnums.
                                                              (line 112)
* fxmax:                                 rnrs arithmetic fixnums.
                                                              (line  49)
* fxmin:                                 rnrs arithmetic fixnums.
                                                              (line  50)
* fxmod:                                 rnrs arithmetic fixnums.
                                                              (line  67)
* fxmod0:                                rnrs arithmetic fixnums.
                                                              (line  70)
* fxnegative?:                           rnrs arithmetic fixnums.
                                                              (line  42)
* fxnot:                                 rnrs arithmetic fixnums.
                                                              (line  95)
* fxodd?:                                rnrs arithmetic fixnums.
                                                              (line  43)
* fxpositive?:                           rnrs arithmetic fixnums.
                                                              (line  41)
* fxreverse-bit-field:                   rnrs arithmetic fixnums.
                                                              (line 149)
* fxrotate-bit-field:                    rnrs arithmetic fixnums.
                                                              (line 144)
* fxxor:                                 rnrs arithmetic fixnums.
                                                              (line  98)
* fxzero?:                               rnrs arithmetic fixnums.
                                                              (line  40)
* gc:                                    System Commands.     (line   6)
* gc <1>:                                Garbage Collection Functions.
                                                              (line   6)
* gc-live-object-stats:                  Garbage Collection Functions.
                                                              (line  56)
* gc-stats:                              Garbage Collection Functions.
                                                              (line  51)
* gcd:                                   Integer Operations.  (line  40)
* gcd <1>:                               rnrs base.           (line 174)
* gcprof:                                Statprof.            (line 219)
* ge?:                                   Inlined Mathematical Instructions.
                                                              (line  29)
* generate-temporaries:                  Syntax Transformer Helpers.
                                                              (line  20)
* generate-temporaries <1>:              rnrs syntax-case.    (line  44)
* generic-function-methods:              Generic Functions.   (line  13)
* generic-function-name:                 Generic Functions.   (line  10)
* gensym:                                Symbol Primitives.   (line 159)
* get-bytevector-all:                    R6RS Binary Input.   (line 101)
* get-bytevector-n:                      R6RS Binary Input.   (line  82)
* get-bytevector-n!:                     R6RS Binary Input.   (line  88)
* get-bytevector-some:                   R6RS Binary Input.   (line  94)
* get-char:                              R6RS Textual Input.  (line   6)
* get-datum:                             R6RS Textual Input.  (line  83)
* get-environment-variable:              SRFI-98.             (line   9)
* get-environment-variables:             SRFI-98.             (line  14)
* get-internal-real-time:                Time.                (line 163)
* get-internal-run-time:                 Time.                (line 167)
* get-line:                              R6RS Textual Input.  (line  65)
* get-output-string:                     String Ports.        (line  76)
* get-print-state:                       Writing.             (line  12)
* get-string-all:                        R6RS Textual Input.  (line  55)
* get-string-n:                          R6RS Textual Input.  (line  20)
* get-string-n!:                         R6RS Textual Input.  (line  38)
* get-u8:                                R6RS Binary Input.   (line  72)
* getaddrinfo:                           Network Databases.   (line  16)
* getaffinity:                           Processes.           (line 336)
* getcwd:                                Processes.           (line  11)
* getegid:                               Processes.           (line  61)
* getenv:                                Runtime Environment. (line  64)
* geteuid:                               Processes.           (line  54)
* getgid:                                Processes.           (line  50)
* getgr:                                 User Information.    (line  96)
* getgrent:                              User Information.    (line  82)
* getgrgid:                              User Information.    (line  71)
* getgrnam:                              User Information.    (line  74)
* getgroups:                             Processes.           (line  36)
* gethost:                               Network Databases.   (line 184)
* gethostbyaddr:                         Network Databases.   (line 186)
* gethostbyname:                         Network Databases.   (line 185)
* gethostent:                            Network Databases.   (line 215)
* gethostname:                           System Identification.
                                                              (line  30)
* getitimer:                             Signals.             (line 136)
* getlogin:                              User Information.    (line 105)
* getnet:                                Network Databases.   (line 248)
* getnetbyaddr:                          Network Databases.   (line 250)
* getnetbyname:                          Network Databases.   (line 249)
* getnetent:                             Network Databases.   (line 268)
* getopt-long:                           getopt-long Reference.
                                                              (line   6)
* getpass:                               Encryption.          (line  21)
* getpeername:                           Network Sockets and Communication.
                                                              (line 212)
* getpgrp:                               Processes.           (line 102)
* getpid:                                Processes.           (line  32)
* getppid:                               Processes.           (line  41)
* getpriority:                           Processes.           (line 324)
* getproto:                              Network Databases.   (line 295)
* getprotobyname:                        Network Databases.   (line 296)
* getprotobynumber:                      Network Databases.   (line 297)
* getprotoent:                           Network Databases.   (line 315)
* getpw:                                 User Information.    (line  53)
* getpwent:                              User Information.    (line  39)
* getpwnam:                              User Information.    (line  31)
* getpwuid:                              User Information.    (line  28)
* getserv:                               Network Databases.   (line 345)
* getservbyname:                         Network Databases.   (line 346)
* getservbyport:                         Network Databases.   (line 347)
* getservent:                            Network Databases.   (line 376)
* getsid:                                Processes.           (line 121)
* getsockname:                           Network Sockets and Communication.
                                                              (line 202)
* getsockopt:                            Network Sockets and Communication.
                                                              (line  57)
* getter-with-setter:                    SRFI-17.             (line  43)
* gettext:                               Gettext Support.     (line  19)
* gettimeofday:                          Time.                (line  11)
* getuid:                                Processes.           (line  46)
* gmtime:                                Time.                (line  72)
* goops-error:                           GOOPS Error Handling.
                                                              (line  25)
* greatest-fixnum:                       rnrs arithmetic fixnums.
                                                              (line  25)
* group:gid:                             User Information.    (line  66)
* group:mem:                             User Information.    (line  68)
* group:name:                            User Information.    (line  62)
* group:passwd:                          User Information.    (line  64)
* gt?:                                   Inlined Mathematical Instructions.
                                                              (line  27)
* guard:                                 rnrs exceptions.     (line  39)
* guild compile:                         Compilation.         (line  49)
* GUILE_CHECK_RETVAL:                    Autoconf Macros.     (line  98)
* GUILE_FLAGS:                           Autoconf Macros.     (line  40)
* GUILE_MODULE_AVAILABLE:                Autoconf Macros.     (line 114)
* GUILE_MODULE_CHECK:                    Autoconf Macros.     (line 106)
* GUILE_MODULE_EXPORTS:                  Autoconf Macros.     (line 124)
* GUILE_MODULE_REQUIRED:                 Autoconf Macros.     (line 119)
* GUILE_MODULE_REQUIRED_EXPORT:          Autoconf Macros.     (line 130)
* GUILE_PKG:                             Autoconf Macros.     (line  22)
* GUILE_PROGS:                           Autoconf Macros.     (line  78)
* GUILE_SITE_DIR:                        Autoconf Macros.     (line  70)
* halt:                                  Miscellaneous Instructions.
                                                              (line  10)
* handle-request:                        Web Server.          (line  99)
* hash:                                  Hash Table Reference.
                                                              (line 124)
* hash <1>:                              SRFI-69 Hash table algorithms.
                                                              (line  17)
* hash-by-identity:                      SRFI-69 Hash table algorithms.
                                                              (line  20)
* hash-clear!:                           Hash Table Reference.
                                                              (line  85)
* hash-count:                            Hash Table Reference.
                                                              (line 219)
* hash-create-handle!:                   Hash Table Reference.
                                                              (line 159)
* hash-fold:                             Hash Table Reference.
                                                              (line 200)
* hash-for-each:                         Hash Table Reference.
                                                              (line 173)
* hash-for-each-handle:                  Hash Table Reference.
                                                              (line 191)
* hash-get-handle:                       Hash Table Reference.
                                                              (line 148)
* hash-map->list:                        Hash Table Reference.
                                                              (line 172)
* hash-ref:                              Hash Table Reference.
                                                              (line  89)
* hash-remove!:                          Hash Table Reference.
                                                              (line 113)
* hash-set!:                             Hash Table Reference.
                                                              (line 101)
* hash-table->alist:                     SRFI-69 Table properties.
                                                              (line  25)
* hash-table-delete!:                    SRFI-69 Accessing table items.
                                                              (line  19)
* hash-table-equivalence-function:       SRFI-69 Hash table algorithms.
                                                              (line  12)
* hash-table-exists?:                    SRFI-69 Accessing table items.
                                                              (line  23)
* hash-table-fold:                       SRFI-69 Table properties.
                                                              (line  20)
* hash-table-hash-function:              SRFI-69 Hash table algorithms.
                                                              (line  13)
* hash-table-keys:                       SRFI-69 Table properties.
                                                              (line  10)
* hash-table-ref:                        SRFI-69 Accessing table items.
                                                              (line   6)
* hash-table-ref/default:                SRFI-69 Accessing table items.
                                                              (line   7)
* hash-table-set!:                       SRFI-69 Accessing table items.
                                                              (line  16)
* hash-table-size:                       SRFI-69 Table properties.
                                                              (line   6)
* hash-table-update!:                    SRFI-69 Accessing table items.
                                                              (line  26)
* hash-table-update!/default:            SRFI-69 Accessing table items.
                                                              (line  28)
* hash-table-values:                     SRFI-69 Table properties.
                                                              (line  13)
* hash-table-walk:                       SRFI-69 Table properties.
                                                              (line  16)
* hash-table?:                           Hash Table Reference.
                                                              (line  81)
* hashq:                                 Hash Table Reference.
                                                              (line 125)
* hashq-create-handle!:                  Hash Table Reference.
                                                              (line 160)
* hashq-get-handle:                      Hash Table Reference.
                                                              (line 149)
* hashq-ref:                             Hash Table Reference.
                                                              (line  90)
* hashq-remove!:                         Hash Table Reference.
                                                              (line 114)
* hashq-set!:                            Hash Table Reference.
                                                              (line 102)
* hashtable-clear!:                      rnrs hashtables.     (line  79)
* hashtable-clear! <1>:                  rnrs hashtables.     (line  80)
* hashtable-contains?:                   rnrs hashtables.     (line  62)
* hashtable-copy:                        rnrs hashtables.     (line  73)
* hashtable-copy <1>:                    rnrs hashtables.     (line  74)
* hashtable-delete!:                     rnrs hashtables.     (line  57)
* hashtable-entries:                     rnrs hashtables.     (line  90)
* hashtable-equivalence-function:        rnrs hashtables.     (line  95)
* hashtable-hash-function:               rnrs hashtables.     (line 100)
* hashtable-keys:                        rnrs hashtables.     (line  86)
* hashtable-mutable?:                    rnrs hashtables.     (line 105)
* hashtable-ref:                         rnrs hashtables.     (line  48)
* hashtable-set!:                        rnrs hashtables.     (line  52)
* hashtable-size:                        rnrs hashtables.     (line  45)
* hashtable-update!:                     rnrs hashtables.     (line  66)
* hashtable?:                            rnrs hashtables.     (line  42)
* hashv:                                 Hash Table Reference.
                                                              (line 126)
* hashv-create-handle!:                  Hash Table Reference.
                                                              (line 161)
* hashv-get-handle:                      Hash Table Reference.
                                                              (line 150)
* hashv-ref:                             Hash Table Reference.
                                                              (line  91)
* hashv-remove!:                         Hash Table Reference.
                                                              (line 115)
* hashv-set!:                            Hash Table Reference.
                                                              (line 103)
* hashx-create-handle!:                  Hash Table Reference.
                                                              (line 162)
* hashx-get-handle:                      Hash Table Reference.
                                                              (line 151)
* hashx-ref:                             Hash Table Reference.
                                                              (line  92)
* hashx-remove!:                         Hash Table Reference.
                                                              (line 116)
* hashx-set!:                            Hash Table Reference.
                                                              (line 104)
* header->string:                        HTTP.                (line  32)
* header-parser:                         HTTP.                (line  55)
* header-validator:                      HTTP.                (line  61)
* header-writer:                         HTTP.                (line  66)
* help:                                  Help Commands.       (line  10)
* hook->list:                            Hook Reference.      (line  58)
* hook-empty?:                           Hook Reference.      (line  38)
* hook?:                                 Hook Reference.      (line  34)
* hostent:addr-list:                     Network Databases.   (line 175)
* hostent:addrtype:                      Network Databases.   (line 170)
* hostent:aliases:                       Network Databases.   (line 168)
* hostent:length:                        Network Databases.   (line 173)
* hostent:name:                          Network Databases.   (line 166)
* http:                                  Web Server.          (line 169)
* http-delete:                           Web Client.          (line  18)
* http-get:                              Web Client.          (line  14)
* http-head:                             Web Client.          (line  15)
* http-options:                          Web Client.          (line  20)
* http-post:                             Web Client.          (line  16)
* http-put:                              Web Client.          (line  17)
* http-trace:                            Web Client.          (line  19)
* i/o-decoding-error?:                   R6RS Transcoders.    (line  83)
* i/o-encoding-error-char:               R6RS Transcoders.    (line 101)
* i/o-encoding-error?:                   R6RS Transcoders.    (line 100)
* i/o-error-filename:                    I/O Conditions.      (line  34)
* i/o-error-port:                        I/O Conditions.      (line  66)
* i/o-error-position:                    I/O Conditions.      (line  27)
* i/o-error?:                            I/O Conditions.      (line  11)
* i/o-file-already-exists-error?:        I/O Conditions.      (line  53)
* i/o-file-does-not-exist-error?:        I/O Conditions.      (line  59)
* i/o-file-is-read-only-error?:          I/O Conditions.      (line  47)
* i/o-file-protection-error?:            I/O Conditions.      (line  40)
* i/o-filename-error?:                   I/O Conditions.      (line  33)
* i/o-invalid-position-error?:           I/O Conditions.      (line  26)
* i/o-port-error?:                       I/O Conditions.      (line  65)
* i/o-read-error?:                       I/O Conditions.      (line  16)
* i/o-write-error?:                      I/O Conditions.      (line  21)
* identifier-syntax:                     Identifier Macros.   (line  28)
* identifier-syntax <1>:                 Identifier Macros.   (line  75)
* identifier-syntax <2>:                 rnrs base.           (line  86)
* identifier?:                           Syntax Case.         (line 131)
* identifier? <1>:                       rnrs syntax-case.    (line  32)
* identity:                              Higher-Order Functions.
                                                              (line  44)
* if:                                    Conditionals.        (line  11)
* if <1>:                                rnrs base.           (line 114)
* imag-part:                             Complex.             (line  19)
* imag-part <1>:                         rnrs base.           (line 135)
* implementation-restriction-violation?: rnrs conditions.     (line 128)
* import:                                Module Commands.     (line   9)
* import <1>:                            R6RS Libraries.      (line 112)
* in:                                    Module Commands.     (line  21)
* in <1>:                                Module Commands.     (line  22)
* include:                               Local Inclusion.     (line  11)
* include-from-path:                     Local Inclusion.     (line  52)
* inet-aton:                             Network Address Conversion.
                                                              (line  32)
* inet-lnaof:                            Network Address Conversion.
                                                              (line  57)
* inet-makeaddr:                         Network Address Conversion.
                                                              (line  64)
* inet-netof:                            Network Address Conversion.
                                                              (line  50)
* inet-ntoa:                             Network Address Conversion.
                                                              (line  41)
* inet-ntop:                             Network Address Conversion.
                                                              (line  77)
* inet-pton:                             Network Address Conversion.
                                                              (line  86)
* inexact:                               rnrs base.           (line 164)
* inexact->exact:                        Exactness.           (line  47)
* inexact->exact <1>:                    rnrs r5rs.           (line  10)
* inexact?:                              Exactness.           (line  39)
* inexact? <1>:                          rnrs base.           (line 162)
* inf:                                   Reals and Rationals. (line 116)
* inf?:                                  Reals and Rationals. (line  98)
* infinite?:                             rnrs base.           (line 304)
* input-port?:                           Ports.               (line  68)
* input-port? <1>:                       R6RS Input Ports.    (line   6)
* input-port? <2>:                       rnrs io simple.      (line  24)
* inspect:                               Inspect Commands.    (line   6)
* install-trap-handler!:                 High-Level Traps.    (line  42)
* instance?:                             Instances.           (line   9)
* instrumented-source-files:             Code Coverage.       (line  48)
* instrumented/executed-lines:           Code Coverage.       (line  57)
* integer->char:                         Characters.          (line 215)
* integer->char <1>:                     rnrs base.           (line  26)
* integer->list:                         SRFI-60.             (line  83)
* integer-expt:                          Bitwise Operations.  (line 128)
* integer-length:                        Bitwise Operations.  (line 113)
* integer-valued?:                       rnrs base.           (line 295)
* integer?:                              Integers.            (line  64)
* integer? <1>:                          rnrs base.           (line 169)
* interaction-environment:               Fly Evaluation.      (line  19)
* iota:                                  SRFI-1 Constructors. (line  29)
* irritants-condition?:                  rnrs conditions.     (line 107)
* is-a?:                                 Instances.           (line  12)
* isatty?:                               Terminals and Ptys.  (line   6)
* join-thread:                           Threads.             (line  54)
* join-timeout-exception?:               SRFI-18 Exceptions.  (line  28)
* julian-day->date:                      SRFI-19 Time/Date conversions.
                                                              (line  11)
* julian-day->time-monotonic:            SRFI-19 Time/Date conversions.
                                                              (line  12)
* julian-day->time-tai:                  SRFI-19 Time/Date conversions.
                                                              (line  13)
* julian-day->time-utc:                  SRFI-19 Time/Date conversions.
                                                              (line  14)
* keyword->string:                       SRFI-88.             (line  28)
* keyword->symbol:                       Keyword Procedures.  (line  10)
* keyword?:                              Keyword Procedures.  (line   6)
* keyword? <1>:                          SRFI-88.             (line  19)
* kill:                                  Signals.             (line  14)
* known-header?:                         HTTP.                (line  51)
* lalr-parser:                           LALR(1) Parsing.     (line  12)
* lambda:                                Lambda.              (line  33)
* lambda <1>:                            rnrs base.           (line  92)
* lambda*:                               lambda* and define*. (line   9)
* language:                              Language Commands.   (line   6)
* last:                                  SRFI-1 Selectors.    (line  51)
* last-pair:                             List Selection.      (line  13)
* latin-1-codec:                         R6RS Transcoders.    (line  28)
* lazy:                                  SRFI-45.             (line  43)
* lchown:                                File System.         (line 125)
* lcm:                                   Integer Operations.  (line  48)
* lcm <1>:                               rnrs base.           (line 175)
* le?:                                   Inlined Mathematical Instructions.
                                                              (line  28)
* least-fixnum:                          rnrs arithmetic fixnums.
                                                              (line  24)
* left-justify-string:                   texinfo string-utils.
                                                              (line  93)
* length:                                List Selection.      (line   9)
* length <1>:                            rnrs base.           (line 195)
* length+:                               SRFI-1 Length Append etc.
                                                              (line   6)
* let:                                   Local Bindings.      (line  21)
* let <1>:                               while do.            (line 113)
* let <2>:                               rnrs base.           (line  95)
* let*:                                  Local Bindings.      (line  49)
* let* <1>:                              rnrs base.           (line  96)
* let*-values:                           SRFI-11.             (line   6)
* let*-values <1>:                       rnrs base.           (line 102)
* let-escape-continuation:               Prompt Primitives.   (line 135)
* let-keywords:                          ice-9 optargs.       (line  42)
* let-keywords*:                         ice-9 optargs.       (line  44)
* let-optional:                          ice-9 optargs.       (line  22)
* let-optional*:                         ice-9 optargs.       (line  23)
* let-syntax:                            Defining Macros.     (line  36)
* let-syntax <1>:                        rnrs base.           (line  82)
* let-values:                            SRFI-11.             (line   6)
* let-values <1>:                        rnrs base.           (line 101)
* let/ec:                                Prompt Primitives.   (line 136)
* letpar:                                Parallel Forms.      (line  20)
* letrec:                                Local Bindings.      (line  64)
* letrec <1>:                            rnrs base.           (line  97)
* letrec*:                               Local Bindings.      (line  88)
* letrec* <1>:                           rnrs base.           (line  98)
* letrec-syntax:                         Defining Macros.     (line  57)
* letrec-syntax <1>:                     rnrs base.           (line  83)
* lexical-violation?:                    rnrs conditions.     (line 134)
* library:                               R6RS Libraries.      (line  44)
* line-execution-counts:                 Code Coverage.       (line  52)
* link:                                  File System.         (line 203)
* link-now:                              Top-Level Environment Instructions.
                                                              (line  56)
* list:                                  List Constructors.   (line  11)
* list <1>:                              rnrs base.           (line 192)
* list <2>:                              Data Constructor Instructions.
                                                              (line  55)
* list->array:                           Array Procedures.    (line  70)
* list->bitvector:                       Bit Vectors.         (line  63)
* list->c32vector:                       SRFI-4 API.          (line 209)
* list->c64vector:                       SRFI-4 API.          (line 210)
* list->char-set:                        Creating Character Sets.
                                                              (line  17)
* list->char-set!:                       Creating Character Sets.
                                                              (line  23)
* list->f32vector:                       SRFI-4 API.          (line 207)
* list->f64vector:                       SRFI-4 API.          (line 208)
* list->integer:                         SRFI-60.             (line  93)
* list->s16vector:                       SRFI-4 API.          (line 202)
* list->s32vector:                       SRFI-4 API.          (line 204)
* list->s64vector:                       SRFI-4 API.          (line 206)
* list->s8vector:                        SRFI-4 API.          (line 200)
* list->stream:                          SRFI-41 Stream Library.
                                                              (line  24)
* list->stream <1>:                      Streams.             (line  68)
* list->string:                          String Constructors. (line  17)
* list->string <1>:                      rnrs base.           (line 211)
* list->symbol:                          Symbol Primitives.   (line  53)
* list->typed-array:                     Array Procedures.    (line  73)
* list->u16vector:                       SRFI-4 API.          (line 201)
* list->u32vector:                       SRFI-4 API.          (line 203)
* list->u64vector:                       SRFI-4 API.          (line 205)
* list->u8vector:                        SRFI-4 API.          (line 199)
* list->vector:                          Vector Creation.     (line  13)
* list->vector <1>:                      SRFI-43 Conversion.  (line  15)
* list->vector <2>:                      rnrs base.           (line 339)
* list->vlist:                           VLists.              (line 130)
* list->weak-vector:                     Weak vectors.        (line  13)
* list-cdr-ref:                          List Selection.      (line  23)
* list-cdr-set!:                         List Modification.   (line  13)
* list-copy:                             List Constructors.   (line  32)
* list-copy <1>:                         SRFI-1 Constructors. (line  18)
* list-head:                             List Selection.      (line  32)
* list-index:                            SRFI-1 Searching.    (line  78)
* list-matches:                          Regexp Functions.    (line 135)
* list-ref:                              List Selection.      (line  18)
* list-ref <1>:                          rnrs base.           (line 196)
* list-set!:                             List Modification.   (line   9)
* list-sort:                             rnrs sorting.        (line   9)
* list-tabulate:                         SRFI-1 Constructors. (line  12)
* list-tail:                             List Selection.      (line  22)
* list-tail <1>:                         rnrs base.           (line 197)
* list-traps:                            Trap States.         (line  29)
* list=:                                 SRFI-1 Predicates.   (line  59)
* list?:                                 List Predicates.     (line  11)
* list? <1>:                             rnrs base.           (line  30)
* list? <2>:                             Inlined Scheme Instructions.
                                                              (line  31)
* listen:                                Network Sockets and Communication.
                                                              (line 176)
* load:                                  Module Commands.     (line  12)
* load <1>:                              Loading.             (line   6)
* load-array:                            Loading Instructions.
                                                              (line  28)
* load-compiled:                         Loading.             (line  25)
* load-extension:                        Foreign Functions.   (line  55)
* load-from-path:                        Load Paths.          (line  21)
* load-number:                           Loading Instructions.
                                                              (line  15)
* load-objcode:                          Bytecode and Objcode.
                                                              (line  53)
* load-program:                          Loading Instructions.
                                                              (line  32)
* load-string:                           Loading Instructions.
                                                              (line  18)
* load-symbol:                           Loading Instructions.
                                                              (line  24)
* load-wide-string:                      Loading Instructions.
                                                              (line  21)
* local-bound?:                          Lexical Environment Instructions.
                                                              (line  88)
* local-boxed-ref:                       Lexical Environment Instructions.
                                                              (line  40)
* local-boxed-set:                       Lexical Environment Instructions.
                                                              (line  41)
* local-compile:                         Local Evaluation.    (line  18)
* local-eval:                            Local Evaluation.    (line  16)
* local-ref:                             Lexical Environment Instructions.
                                                              (line  16)
* local-set:                             Lexical Environment Instructions.
                                                              (line  25)
* locale-am-string:                      Accessing Locale Information.
                                                              (line  29)
* locale-currency-symbol:                Accessing Locale Information.
                                                              (line  88)
* locale-currency-symbol-precedes-negative?: Accessing Locale Information.
                                                              (line 108)
* locale-currency-symbol-precedes-positive?: Accessing Locale Information.
                                                              (line 106)
* locale-date+time-format:               Accessing Locale Information.
                                                              (line  34)
* locale-date-format:                    Accessing Locale Information.
                                                              (line  35)
* locale-day:                            Accessing Locale Information.
                                                              (line  20)
* locale-day-short:                      Accessing Locale Information.
                                                              (line  21)
* locale-decimal-point:                  Accessing Locale Information.
                                                              (line  58)
* locale-digit-grouping:                 Accessing Locale Information.
                                                              (line  64)
* locale-encoding:                       Accessing Locale Information.
                                                              (line  14)
* locale-era:                            Accessing Locale Information.
                                                              (line  47)
* locale-era-date+time-format:           Accessing Locale Information.
                                                              (line  39)
* locale-era-date-format:                Accessing Locale Information.
                                                              (line  38)
* locale-era-time-format:                Accessing Locale Information.
                                                              (line  40)
* locale-era-year:                       Accessing Locale Information.
                                                              (line  48)
* locale-monetary-decimal-point:         Accessing Locale Information.
                                                              (line  82)
* locale-monetary-fractional-digits:     Accessing Locale Information.
                                                              (line 101)
* locale-monetary-grouping:              Accessing Locale Information.
                                                              (line  84)
* locale-monetary-negative-sign:         Accessing Locale Information.
                                                              (line 118)
* locale-monetary-positive-sign:         Accessing Locale Information.
                                                              (line 117)
* locale-monetary-thousands-separator:   Accessing Locale Information.
                                                              (line  83)
* locale-month:                          Accessing Locale Information.
                                                              (line  22)
* locale-month-short:                    Accessing Locale Information.
                                                              (line  23)
* locale-negative-separated-by-space?:   Accessing Locale Information.
                                                              (line 111)
* locale-negative-sign-position:         Accessing Locale Information.
                                                              (line 123)
* locale-no-regexp:                      Accessing Locale Information.
                                                              (line 147)
* locale-pm-string:                      Accessing Locale Information.
                                                              (line  30)
* locale-positive-separated-by-space?:   Accessing Locale Information.
                                                              (line 110)
* locale-positive-sign-position:         Accessing Locale Information.
                                                              (line 122)
* locale-string->inexact:                Number Input and Output.
                                                              (line  25)
* locale-string->integer:                Number Input and Output.
                                                              (line  12)
* locale-thousands-separator:            Accessing Locale Information.
                                                              (line  59)
* locale-time+am/pm-format:              Accessing Locale Information.
                                                              (line  37)
* locale-time-format:                    Accessing Locale Information.
                                                              (line  36)
* locale-yes-regexp:                     Accessing Locale Information.
                                                              (line 146)
* locale?:                               i18n Introduction.   (line  68)
* locals:                                Debug Commands.      (line  36)
* localtime:                             Time.                (line  64)
* lock-mutex:                            Mutexes and Condition Variables.
                                                              (line  52)
* log:                                   Scientific.          (line  45)
* log <1>:                               rnrs base.           (line 145)
* log10:                                 Scientific.          (line  48)
* log2-binary-factors:                   SRFI-60.             (line  43)
* logand:                                Bitwise Operations.  (line  11)
* logand <1>:                            Inlined Mathematical Instructions.
                                                              (line  31)
* logbit?:                               Bitwise Operations.  (line  56)
* logcount:                              Bitwise Operations.  (line  99)
* logior:                                Bitwise Operations.  (line  19)
* logior <1>:                            Inlined Mathematical Instructions.
                                                              (line  32)
* lognot:                                Bitwise Operations.  (line  37)
* logtest:                               Bitwise Operations.  (line  47)
* logxor:                                Bitwise Operations.  (line  27)
* logxor <1>:                            Inlined Mathematical Instructions.
                                                              (line  33)
* long-local-bound?:                     Lexical Environment Instructions.
                                                              (line  89)
* long-local-ref:                        Lexical Environment Instructions.
                                                              (line  17)
* long-local-set:                        Lexical Environment Instructions.
                                                              (line  26)
* long-object-ref:                       Data Constructor Instructions.
                                                              (line  88)
* long-toplevel-ref:                     Top-Level Environment Instructions.
                                                              (line  18)
* long-toplevel-set:                     Top-Level Environment Instructions.
                                                              (line  46)
* lookahead-char:                        R6RS Textual Input.  (line  16)
* lookahead-u8:                          R6RS Binary Input.   (line  77)
* lookup-compilation-order:              Compiler Tower.      (line  67)
* lookup-language:                       Compiler Tower.      (line  55)
* lookup-server-impl:                    Web Server.          (line  71)
* lset-adjoin:                           SRFI-1 Set Operations.
                                                              (line  51)
* lset-diff+intersection:                SRFI-1 Set Operations.
                                                              (line 135)
* lset-diff+intersection!:               SRFI-1 Set Operations.
                                                              (line 136)
* lset-difference:                       SRFI-1 Set Operations.
                                                              (line 118)
* lset-difference!:                      SRFI-1 Set Operations.
                                                              (line 119)
* lset-intersection:                     SRFI-1 Set Operations.
                                                              (line  94)
* lset-intersection!:                    SRFI-1 Set Operations.
                                                              (line  95)
* lset-union:                            SRFI-1 Set Operations.
                                                              (line  63)
* lset-union!:                           SRFI-1 Set Operations.
                                                              (line  64)
* lset-xor:                              SRFI-1 Set Operations.
                                                              (line 150)
* lset-xor!:                             SRFI-1 Set Operations.
                                                              (line 151)
* lset<=:                                SRFI-1 Set Operations.
                                                              (line  21)
* lset=:                                 SRFI-1 Set Operations.
                                                              (line  35)
* lstat:                                 File System.         (line 114)
* lt?:                                   Inlined Mathematical Instructions.
                                                              (line  26)
* macro-binding:                         Internal Macros.     (line  31)
* macro-name:                            Internal Macros.     (line  27)
* macro-transformer:                     Internal Macros.     (line  35)
* macro-type:                            Internal Macros.     (line  22)
* macro?:                                Internal Macros.     (line  10)
* magnitude:                             Complex.             (line  23)
* magnitude <1>:                         rnrs base.           (line 138)
* major-version:                         Build Config.        (line  11)
* make:                                  Instance Creation.   (line  12)
* make <1>:                              Instance Creation.   (line  17)
* make <2>:                              Instance Creation.   (line  18)
* make <3>:                              Class Definition Protocol.
                                                              (line 128)
* make-accessor:                         Generic Function Internals.
                                                              (line  51)
* make-arbiter:                          Arbiters.            (line  15)
* make-array:                            Array Procedures.    (line  39)
* make-array <1>:                        Data Constructor Instructions.
                                                              (line  74)
* make-assertion-violation:              rnrs conditions.     (line 100)
* make-binding:                          Compiled Procedures. (line  76)
* make-bitvector:                        Bit Vectors.         (line  22)
* make-buffered-input-port:              Buffered Input.      (line  15)
* make-bytevector:                       Bytevector Manipulation.
                                                              (line   9)
* make-c-struct:                         Foreign Structs.     (line  33)
* make-c32vector:                        SRFI-4 API.          (line  46)
* make-c64vector:                        SRFI-4 API.          (line  47)
* make-char32:                           Data Constructor Instructions.
                                                              (line  45)
* make-char8:                            Data Constructor Instructions.
                                                              (line  42)
* make-chunked-input-port:               Transfer Codings.    (line  23)
* make-chunked-output-port:              Transfer Codings.    (line  38)
* make-class:                            Class Definition Protocol.
                                                              (line  80)
* make-closure:                          Lexical Environment Instructions.
                                                              (line  58)
* make-completion-function:              Readline Functions.  (line 115)
* make-compound-condition:               SRFI-35.             (line  47)
* make-condition:                        SRFI-35.             (line  37)
* make-condition-type:                   SRFI-35.             (line  26)
* make-condition-variable:               Mutexes and Condition Variables.
                                                              (line 131)
* make-condition-variable <1>:           SRFI-18 Condition variables.
                                                              (line  16)
* make-custom-binary-input-port:         R6RS Binary Input.   (line  16)
* make-custom-binary-output-port:        R6RS Binary Output.  (line  25)
* make-date:                             SRFI-19 Date.        (line  16)
* make-doubly-weak-hash-table:           Weak hash tables.    (line   8)
* make-dynamic-state:                    Fluids and Dynamic States.
                                                              (line 109)
* make-empty-attlist:                    SSAX.                (line 165)
* make-enumeration:                      rnrs enums.          (line  17)
* make-eol:                              Data Constructor Instructions.
                                                              (line  39)
* make-eq-hashtable:                     rnrs hashtables.     (line  20)
* make-eq-hashtable <1>:                 rnrs hashtables.     (line  21)
* make-eqv-hashtable:                    rnrs hashtables.     (line  26)
* make-eqv-hashtable <1>:                rnrs hashtables.     (line  27)
* make-error:                            rnrs conditions.     (line  89)
* make-f32vector:                        SRFI-4 API.          (line  44)
* make-f64vector:                        SRFI-4 API.          (line  45)
* make-false:                            Data Constructor Instructions.
                                                              (line  30)
* make-fluid:                            Fluids and Dynamic States.
                                                              (line  25)
* make-future:                           Futures.             (line  90)
* make-generic:                          Generic Function Internals.
                                                              (line  27)
* make-guardian:                         Guardians.           (line  15)
* make-hash-table:                       Hash Table Reference.
                                                              (line  56)
* make-hash-table <1>:                   SRFI-69 Creating hash tables.
                                                              (line   6)
* make-hashtable:                        rnrs hashtables.     (line  32)
* make-hashtable <1>:                    rnrs hashtables.     (line  33)
* make-hook:                             Hook Reference.      (line  28)
* make-i/o-decoding-error:               R6RS Transcoders.    (line  82)
* make-i/o-encoding-error:               R6RS Transcoders.    (line  99)
* make-i/o-error:                        I/O Conditions.      (line  10)
* make-i/o-file-already-exists-error:    I/O Conditions.      (line  52)
* make-i/o-file-does-not-exist-error:    I/O Conditions.      (line  58)
* make-i/o-file-is-read-only-error:      I/O Conditions.      (line  46)
* make-i/o-file-protection-error:        I/O Conditions.      (line  39)
* make-i/o-invalid-position-error:       I/O Conditions.      (line  25)
* make-i/o-port-error:                   I/O Conditions.      (line  64)
* make-i/o-read-error:                   I/O Conditions.      (line  15)
* make-i/o-write-error:                  I/O Conditions.      (line  20)
* make-implementation-restriction-violation: rnrs conditions. (line 127)
* make-instance:                         Instance Creation.   (line  40)
* make-instance <1>:                     Instance Creation.   (line  41)
* make-int16:                            Data Constructor Instructions.
                                                              (line  18)
* make-int64:                            Data Constructor Instructions.
                                                              (line  25)
* make-int8:                             Data Constructor Instructions.
                                                              (line   9)
* make-int8:0:                           Data Constructor Instructions.
                                                              (line  12)
* make-int8:1:                           Data Constructor Instructions.
                                                              (line  15)
* make-io-filename-error:                I/O Conditions.      (line  32)
* make-irritants-condition:              rnrs conditions.     (line 106)
* make-keyword:                          Data Constructor Instructions.
                                                              (line  52)
* make-lexical-violation:                rnrs conditions.     (line 133)
* make-line-buffered-input-port:         Buffered Input.      (line  30)
* make-list:                             List Constructors.   (line  36)
* make-locale:                           i18n Introduction.   (line  37)
* make-message-condition:                rnrs conditions.     (line  71)
* make-method:                           Method Definition Internals.
                                                              (line  38)
* make-mutex:                            Mutexes and Condition Variables.
                                                              (line  24)
* make-mutex <1>:                        SRFI-18 Mutexes.     (line  17)
* make-nil:                              Data Constructor Instructions.
                                                              (line  36)
* make-no-infinities-violation:          rnrs arithmetic flonums.
                                                              (line 118)
* make-no-nans-violation:                rnrs arithmetic flonums.
                                                              (line 125)
* make-non-continuable-violation:        rnrs conditions.     (line 121)
* make-object-property:                  Object Properties.   (line  34)
* make-parameter:                        Parameters.          (line  41)
* make-pointer:                          Foreign Variables.   (line  40)
* make-polar:                            Complex.             (line  11)
* make-polar <1>:                        rnrs base.           (line 137)
* make-procedure-with-setter:            Procedures with Setters.
                                                              (line  43)
* make-program:                          Bytecode and Objcode.
                                                              (line  73)
* make-prompt-tag:                       Prompt Primitives.   (line  22)
* make-q:                                Queues.              (line  18)
* make-random-source:                    SRFI-27 Random Sources.
                                                              (line   6)
* make-record-constructor-descriptor:    rnrs records procedural.
                                                              (line  27)
* make-record-type:                      Records.             (line  19)
* make-record-type-descriptor:           rnrs records procedural.
                                                              (line   9)
* make-rectangular:                      Complex.             (line   6)
* make-rectangular <1>:                  rnrs base.           (line 136)
* make-recursive-mutex:                  Mutexes and Condition Variables.
                                                              (line  46)
* make-regexp:                           Regexp Functions.    (line  51)
* make-s16vector:                        SRFI-4 API.          (line  39)
* make-s32vector:                        SRFI-4 API.          (line  41)
* make-s64vector:                        SRFI-4 API.          (line  43)
* make-s8vector:                         SRFI-4 API.          (line  37)
* make-serious-condition:                rnrs conditions.     (line  83)
* make-shared-array:                     Shared Arrays.       (line   6)
* make-socket-address:                   Network Socket Address.
                                                              (line  12)
* make-socket-address <1>:               Network Socket Address.
                                                              (line  13)
* make-socket-address <2>:               Network Socket Address.
                                                              (line  15)
* make-soft-port:                        Soft Ports.          (line   9)
* make-stack:                            Stack Capture.       (line  17)
* make-stream:                           Streams.             (line  49)
* make-string:                           String Constructors. (line  30)
* make-string <1>:                       rnrs base.           (line 210)
* make-struct:                           Structure Basics.    (line  10)
* make-struct <1>:                       Data Constructor Instructions.
                                                              (line  66)
* make-struct-layout:                    Meta-Vtables.        (line  85)
* make-struct/no-tail:                   Structure Basics.    (line  11)
* make-symbol:                           Symbol Uninterned.   (line  46)
* make-symbol <1>:                       Data Constructor Instructions.
                                                              (line  49)
* make-syntax-transformer:               Internal Macros.     (line   6)
* make-syntax-violation:                 rnrs conditions.     (line 139)
* make-tcp-server-socket:                REPL Servers.        (line  18)
* make-text-wrapper:                     texinfo string-utils.
                                                              (line 117)
* make-thread:                           Threads.             (line 110)
* make-thread <1>:                       SRFI-18 Threads.     (line  24)
* make-time:                             SRFI-19 Time.        (line  43)
* make-transcoder:                       R6RS Transcoders.    (line 155)
* make-transcoder <1>:                   R6RS Transcoders.    (line 156)
* make-transcoder <2>:                   R6RS Transcoders.    (line 157)
* make-true:                             Data Constructor Instructions.
                                                              (line  33)
* make-typed-array:                      Array Procedures.    (line  43)
* make-u16vector:                        SRFI-4 API.          (line  38)
* make-u32vector:                        SRFI-4 API.          (line  40)
* make-u64vector:                        SRFI-4 API.          (line  42)
* make-u8vector:                         SRFI-4 API.          (line  36)
* make-uint64:                           Data Constructor Instructions.
                                                              (line  21)
* make-unbound-fluid:                    Fluids and Dynamic States.
                                                              (line  37)
* make-undefined-variable:               Variables.           (line  38)
* make-undefined-violation:              rnrs conditions.     (line 148)
* make-unix-domain-server-socket:        REPL Servers.        (line  25)
* make-variable:                         Variables.           (line  42)
* make-variable <1>:                     Top-Level Environment Instructions.
                                                              (line  77)
* make-variable-transformer:             Identifier Macros.   (line  51)
* make-variable-transformer <1>:         rnrs syntax-case.    (line  12)
* make-vector:                           Vector Creation.     (line  34)
* make-vector <1>:                       SRFI-43 Constructors.
                                                              (line   6)
* make-vector <2>:                       rnrs base.           (line 337)
* make-vector <3>:                       rnrs base.           (line 338)
* make-violation:                        rnrs conditions.     (line  94)
* make-vtable:                           Vtables.             (line  10)
* make-warning:                          rnrs conditions.     (line  78)
* make-weak-key-hash-table:              Weak hash tables.    (line   6)
* make-weak-value-hash-table:            Weak hash tables.    (line   7)
* make-weak-vector:                      Weak vectors.        (line   6)
* make-who-condition:                    rnrs conditions.     (line 113)
* malloc-stats:                          Memory Blocks.       (line 121)
* map:                                   List Mapping.        (line  13)
* map <1>:                               SRFI-1 Fold and Map. (line 160)
* map!:                                  SRFI-1 Fold and Map. (line 194)
* map-in-order:                          List Mapping.        (line  14)
* map-union:                             SXPath.              (line 112)
* match:                                 Pattern Matching.    (line  67)
* match:count:                           Match Structures.    (line  73)
* match:end:                             Match Structures.    (line  49)
* match:prefix:                          Match Structures.    (line  59)
* match:start:                           Match Structures.    (line  39)
* match:string:                          Match Structures.    (line  78)
* match:substring:                       Match Structures.    (line  24)
* match:suffix:                          Match Structures.    (line  66)
* max:                                   Arithmetic.          (line  48)
* max <1>:                               rnrs base.           (line 240)
* member:                                List Searching.      (line  26)
* member <1>:                            SRFI-1 Searching.    (line  90)
* member <2>:                            rnrs lists.          (line  42)
* memp:                                  rnrs lists.          (line  41)
* memq:                                  List Searching.      (line  12)
* memq <1>:                              rnrs lists.          (line  44)
* memv:                                  List Searching.      (line  19)
* memv <1>:                              rnrs lists.          (line  43)
* merge:                                 Sorting.             (line  15)
* merge!:                                Sorting.             (line  23)
* message-condition?:                    SRFI-35.             (line 120)
* message-condition? <1>:                rnrs conditions.     (line  72)
* method:                                Method Definition Internals.
                                                              (line  20)
* method-generic-function:               Generic Functions.   (line  21)
* method-procedure:                      Generic Functions.   (line  29)
* method-source:                         Generic Functions.   (line  33)
* method-source <1>:                     Generic Functions.   (line  34)
* method-specializers:                   Generic Functions.   (line  25)
* micro-version:                         Build Config.        (line  13)
* min:                                   Arithmetic.          (line  52)
* min <1>:                               rnrs base.           (line 241)
* minor-version:                         Build Config.        (line  12)
* mkdir:                                 File System.         (line 214)
* mknod:                                 File System.         (line 270)
* mkstemp!:                              File System.         (line 300)
* mktime:                                Time.                (line  78)
* mod:                                   rnrs base.           (line 250)
* mod <1>:                               Inlined Mathematical Instructions.
                                                              (line  24)
* mod0:                                  rnrs base.           (line 269)
* modified-julian-day->date:             SRFI-19 Time/Date conversions.
                                                              (line  15)
* modified-julian-day->time-monotonic:   SRFI-19 Time/Date conversions.
                                                              (line  16)
* modified-julian-day->time-tai:         SRFI-19 Time/Date conversions.
                                                              (line  17)
* modified-julian-day->time-utc:         SRFI-19 Time/Date conversions.
                                                              (line  18)
* module:                                Module Commands.     (line   6)
* module-add!:                           Module System Reflection.
                                                              (line  74)
* module-define!:                        Module System Reflection.
                                                              (line  83)
* module-ref:                            Module System Reflection.
                                                              (line  78)
* module-set!:                           Module System Reflection.
                                                              (line  90)
* module-stexi-documentation:            texinfo reflection.  (line  17)
* module-use!:                           Module System Reflection.
                                                              (line  56)
* module-uses:                           Module System Reflection.
                                                              (line  53)
* module-variable:                       Module System Reflection.
                                                              (line  70)
* modulo:                                Integer Operations.  (line  28)
* modulo <1>:                            rnrs r5rs.           (line  16)
* modulo-expt:                           Integer Operations.  (line  56)
* monetary-amount->locale-string:        Number Input and Output.
                                                              (line  43)
* monitor:                               Mutexes and Condition Variables.
                                                              (line 181)
* move->fdes:                            Ports and File Descriptors.
                                                              (line 106)
* mul:                                   Inlined Mathematical Instructions.
                                                              (line  20)
* mutex-level:                           Mutexes and Condition Variables.
                                                              (line 120)
* mutex-lock!:                           SRFI-18 Mutexes.     (line  45)
* mutex-locked?:                         Mutexes and Condition Variables.
                                                              (line 126)
* mutex-name:                            SRFI-18 Mutexes.     (line  25)
* mutex-owner:                           Mutexes and Condition Variables.
                                                              (line 114)
* mutex-specific:                        SRFI-18 Mutexes.     (line  29)
* mutex-specific-set!:                   SRFI-18 Mutexes.     (line  30)
* mutex-state:                           SRFI-18 Mutexes.     (line  35)
* mutex-unlock!:                         SRFI-18 Mutexes.     (line  52)
* mutex?:                                Mutexes and Condition Variables.
                                                              (line  42)
* mv-call:                               Procedure Call and Return Instructions.
                                                              (line  49)
* n-for-each-par-map:                    Parallel Forms.      (line  64)
* n-par-for-each:                        Parallel Forms.      (line  53)
* n-par-map:                             Parallel Forms.      (line  52)
* nan:                                   Reals and Rationals. (line 112)
* nan?:                                  Reals and Rationals. (line 103)
* nan? <1>:                              rnrs base.           (line 303)
* native-endianness:                     Bytevector Endianness.
                                                              (line  17)
* native-eol-style:                      R6RS Transcoders.    (line  77)
* native-transcoder:                     R6RS Transcoders.    (line 167)
* negate:                                Higher-Order Functions.
                                                              (line  19)
* negative?:                             Comparison.          (line  43)
* negative? <1>:                         rnrs base.           (line 186)
* netent:addrtype:                       Network Databases.   (line 240)
* netent:aliases:                        Network Databases.   (line 238)
* netent:name:                           Network Databases.   (line 236)
* netent:net:                            Network Databases.   (line 243)
* new-frame:                             Procedure Call and Return Instructions.
                                                              (line   6)
* newline:                               Writing.             (line  17)
* newline <1>:                           rnrs io simple.      (line  57)
* newline <2>:                           rnrs io simple.      (line  58)
* next:                                  Debug Commands.      (line  79)
* next-token:                            sxml ssax input-parse.
                                                              (line  47)
* next-token-of:                         sxml ssax input-parse.
                                                              (line  50)
* nftw:                                  File Tree Walk.      (line 209)
* ngettext:                              Gettext Support.     (line  44)
* nice:                                  Processes.           (line 304)
* ninth:                                 SRFI-1 Selectors.    (line  14)
* nl_langinfo:                           Accessing Locale Information.
                                                              (line   6)
* no-applicable-method:                  Handling Invocation Errors.
                                                              (line  16)
* no-applicable-method <1>:              Handling Invocation Errors.
                                                              (line  17)
* no-infinities-violation?:              rnrs arithmetic flonums.
                                                              (line 119)
* no-method:                             Handling Invocation Errors.
                                                              (line   9)
* no-method <1>:                         Handling Invocation Errors.
                                                              (line  10)
* no-nans-violation?:                    rnrs arithmetic flonums.
                                                              (line 126)
* no-next-method:                        Handling Invocation Errors.
                                                              (line  23)
* no-next-method <1>:                    Handling Invocation Errors.
                                                              (line  24)
* node-closure:                          SXPath.              (line 139)
* node-eq?:                              SXPath.              (line  89)
* node-equal?:                           SXPath.              (line  91)
* node-join:                             SXPath.              (line 133)
* node-or:                               SXPath.              (line 137)
* node-parent:                           SXPath.              (line 141)
* node-pos:                              SXPath.              (line  93)
* node-reduce:                           SXPath.              (line 135)
* node-reverse:                          SXPath.              (line 114)
* node-self:                             SXPath.              (line 120)
* node-trace:                            SXPath.              (line 116)
* node-typeof?:                          SXPath.              (line  87)
* nodeset?:                              SXPath.              (line  85)
* non-continuable-violation?:            rnrs conditions.     (line 122)
* nop:                                   Miscellaneous Instructions.
                                                              (line   6)
* not:                                   Booleans.            (line  57)
* not <1>:                               rnrs base.           (line  12)
* not <2>:                               Inlined Scheme Instructions.
                                                              (line  22)
* not-eq?:                               Inlined Scheme Instructions.
                                                              (line  25)
* not-not:                               Inlined Scheme Instructions.
                                                              (line  23)
* not-null?:                             Inlined Scheme Instructions.
                                                              (line  27)
* not-pair?:                             SRFI-1 Predicates.   (line  53)
* null-environment:                      Environments.        (line  26)
* null-environment <1>:                  rnrs r5rs.           (line  26)
* null-list?:                            SRFI-1 Predicates.   (line  47)
* null-pointer?:                         Foreign Variables.   (line  51)
* null?:                                 List Predicates.     (line  20)
* null? <1>:                             rnrs base.           (line  31)
* null? <2>:                             Inlined Scheme Instructions.
                                                              (line  26)
* number->locale-string:                 Number Input and Output.
                                                              (line  36)
* number->string:                        Conversion.          (line  11)
* number->string <1>:                    rnrs base.           (line 205)
* number?:                               Numerical Tower.     (line  47)
* number? <1>:                           rnrs base.           (line  68)
* numerator:                             Reals and Rationals. (line 120)
* numerator <1>:                         rnrs base.           (line 156)
* objcode->bytecode:                     Bytecode and Objcode.
                                                              (line  66)
* objcode?:                              Bytecode and Objcode.
                                                              (line  44)
* object->string:                        General Conversion.  (line  18)
* object-properties:                     Object Properties.   (line  57)
* object-property:                       Object Properties.   (line  65)
* object-ref:                            Data Constructor Instructions.
                                                              (line  87)
* object-stexi-documentation:            texinfo reflection.  (line  28)
* odd?:                                  Integer Operations.  (line   6)
* odd? <1>:                              rnrs base.           (line 172)
* open:                                  Ports and File Descriptors.
                                                              (line 123)
* open-bytevector-input-port:            R6RS Binary Input.   (line   9)
* open-bytevector-output-port:           R6RS Binary Output.  (line   8)
* open-fdes:                             Ports and File Descriptors.
                                                              (line 147)
* open-file:                             File Ports.          (line  14)
* open-file-input-port:                  R6RS Input Ports.    (line  17)
* open-file-input-port <1>:              R6RS Input Ports.    (line  18)
* open-file-input-port <2>:              R6RS Input Ports.    (line  19)
* open-file-input-port <3>:              R6RS Input Ports.    (line  21)
* open-file-output-port:                 R6RS Output Ports.   (line  15)
* open-file-output-port <1>:             R6RS Output Ports.   (line  16)
* open-file-output-port <2>:             R6RS Output Ports.   (line  17)
* open-file-output-port <3>:             R6RS Output Ports.   (line  19)
* open-input-file:                       File Ports.          (line 101)
* open-input-file <1>:                   rnrs io simple.      (line  31)
* open-input-output-pipe:                Pipes.               (line  63)
* open-input-pipe:                       Pipes.               (line  46)
* open-input-string:                     String Ports.        (line  62)
* open-output-file:                      File Ports.          (line 113)
* open-output-file <1>:                  rnrs io simple.      (line  32)
* open-output-pipe:                      Pipes.               (line  55)
* open-output-string:                    String Ports.        (line  69)
* open-pipe:                             Pipes.               (line  11)
* open-pipe*:                            Pipes.               (line  12)
* open-server:                           Web Server.          (line  87)
* open-socket-for-uri:                   Web Client.          (line  11)
* opendir:                               File System.         (line 226)
* optimize:                              Compile Commands.    (line  15)
* option:                                System Commands.     (line  12)
* option <1>:                            SRFI-37.             (line  37)
* option-names:                          SRFI-37.             (line  56)
* option-optional-arg?:                  SRFI-37.             (line  58)
* option-processor:                      SRFI-37.             (line  59)
* option-ref:                            option-ref Reference.
                                                              (line   6)
* option-required-arg?:                  SRFI-37.             (line  57)
* or:                                    and or.              (line  19)
* or <1>:                                rnrs base.           (line 120)
* output-port?:                          Ports.               (line  73)
* output-port? <1>:                      R6RS Output Ports.   (line   6)
* output-port? <2>:                      rnrs io simple.      (line  25)
* package-stexi-documentation:           texinfo reflection.  (line  85)
* package-stexi-documentation-for-include: texinfo reflection.
                                                              (line 105)
* package-stexi-extended-menu:           texinfo reflection.  (line  65)
* package-stexi-generic-menu:            texinfo reflection.  (line  55)
* package-stexi-standard-copying:        texinfo reflection.  (line  30)
* package-stexi-standard-menu:           texinfo reflection.  (line  60)
* package-stexi-standard-prologue:       texinfo reflection.  (line  70)
* package-stexi-standard-titlepage:      texinfo reflection.  (line  37)
* pair-fold:                             SRFI-1 Fold and Map. (line  67)
* pair-fold-right:                       SRFI-1 Fold and Map. (line  68)
* pair-for-each:                         SRFI-1 Fold and Map. (line 203)
* pair?:                                 Pairs.               (line  51)
* pair? <1>:                             rnrs base.           (line  34)
* pair? <2>:                             Inlined Scheme Instructions.
                                                              (line  30)
* par-for-each:                          Parallel Forms.      (line  29)
* par-map:                               Parallel Forms.      (line  28)
* parallel:                              Parallel Forms.      (line  15)
* parameterize:                          Parameters.          (line  59)
* parse-c-struct:                        Foreign Structs.     (line  39)
* parse-header:                          HTTP.                (line 113)
* parse-http-method:                     HTTP.                (line 132)
* parse-http-version:                    HTTP.                (line 136)
* parse-path:                            Load Paths.          (line 108)
* parse-path-with-ellipsis:              Load Paths.          (line 114)
* parse-request-uri:                     HTTP.                (line 140)
* partial-cont-call:                     Trampoline Instructions.
                                                              (line  37)
* partition:                             SRFI-1 Filtering and Partitioning.
                                                              (line  14)
* partition <1>:                         rnrs lists.          (line  21)
* partition!:                            SRFI-1 Filtering and Partitioning.
                                                              (line  15)
* passwd:dir:                            User Information.    (line  23)
* passwd:gecos:                          User Information.    (line  21)
* passwd:gid:                            User Information.    (line  19)
* passwd:name:                           User Information.    (line  13)
* passwd:passwd:                         User Information.    (line  15)
* passwd:shell:                          User Information.    (line  25)
* passwd:uid:                            User Information.    (line  17)
* pause:                                 Signals.             (line 113)
* pclose:                                Pipes.               (line  66)
* peek-char:                             Reading.             (line  48)
* peek-char <1>:                         rnrs io simple.      (line  43)
* peek-char <2>:                         rnrs io simple.      (line  44)
* peek-next-char:                        sxml ssax input-parse.
                                                              (line  39)
* pipe:                                  Ports and File Descriptors.
                                                              (line 179)
* PKG_CHECK_MODULES:                     Autoconf Macros.     (line  12)
* pointer->bytevector:                   Void Pointers and Byte Access.
                                                              (line  13)
* pointer->procedure:                    Dynamic FFI.         (line   9)
* pointer->scm:                          Foreign Variables.   (line  61)
* pointer->string:                       Void Pointers and Byte Access.
                                                              (line  50)
* pointer-address:                       Foreign Variables.   (line  33)
* pointer?:                              Foreign Variables.   (line  45)
* poll-coop-repl-server:                 Cooperative REPL Servers.
                                                              (line  34)
* popen:                                 Pipes.               (line  11)
* port->fdes:                            Ports and File Descriptors.
                                                              (line  71)
* port->stream:                          SRFI-41 Stream Library.
                                                              (line  27)
* port->stream <1>:                      Streams.             (line  76)
* port-closed?:                          Closing.             (line  25)
* port-column:                           Reading.             (line  97)
* port-conversion-strategy:              Ports.               (line 120)
* port-encoding:                         Ports.               (line  99)
* port-eof?:                             R6RS Input Ports.    (line  10)
* port-filename:                         File Ports.          (line 171)
* port-for-each:                         Ports and File Descriptors.
                                                              (line 270)
* port-has-port-position?:               R6RS Port Manipulation.
                                                              (line  63)
* port-has-set-port-position!?:          R6RS Port Manipulation.
                                                              (line  74)
* port-line:                             Reading.             (line  98)
* port-mode:                             File Ports.          (line 164)
* port-mode <1>:                         Ports and File Descriptors.
                                                              (line 264)
* port-position:                         R6RS Port Manipulation.
                                                              (line  54)
* port-revealed:                         Ports and File Descriptors.
                                                              (line  57)
* port-transcoder:                       R6RS Port Manipulation.
                                                              (line  11)
* port-with-print-state:                 Writing.             (line  22)
* port?:                                 Ports.               (line  78)
* port? <1>:                             R6RS Port Manipulation.
                                                              (line   8)
* positive?:                             Comparison.          (line  39)
* positive? <1>:                         rnrs base.           (line 185)
* post-order:                            Transforming SXML.   (line  71)
* pre-post-order:                        Transforming SXML.   (line  73)
* pretty-print:                          Inspect Commands.    (line   9)
* pretty-print <1>:                      Pretty Printing.     (line  28)
* primitive-eval:                        Fly Evaluation.      (line 122)
* primitive-exit:                        Processes.           (line 223)
* primitive-fork:                        Processes.           (line 280)
* primitive-generic-generic:             Extending Primitives.
                                                              (line  22)
* primitive-load:                        Loading.             (line  32)
* primitive-load-path:                   Load Paths.          (line  40)
* primitive-move->fdes:                  Ports and File Descriptors.
                                                              (line  97)
* primitive-_exit:                       Processes.           (line 224)
* print-options:                         Scheme Write.        (line  30)
* print-set!:                            Scheme Write.        (line  57)
* procedure:                             Debug Commands.      (line  33)
* procedure <1>:                         Procedures with Setters.
                                                              (line  53)
* procedure->pointer:                    Dynamic FFI.         (line 105)
* procedure-documentation:               Procedure Properties.
                                                              (line  58)
* procedure-execution-count:             Code Coverage.       (line  61)
* procedure-name:                        Procedure Properties.
                                                              (line  30)
* procedure-properties:                  Procedure Properties.
                                                              (line  39)
* procedure-property:                    Procedure Properties.
                                                              (line  43)
* procedure-source:                      Procedure Properties.
                                                              (line  34)
* procedure-with-setter?:                Procedures with Setters.
                                                              (line  48)
* procedure?:                            Procedure Properties.
                                                              (line  17)
* procedure? <1>:                        rnrs base.           (line  74)
* profile:                               Profile Commands.    (line   9)
* program-arguments:                     Runtime Environment. (line   6)
* program-arguments-alist:               Compiled Procedures. (line 139)
* program-arities:                       Compiled Procedures. (line 107)
* program-arity:                         Compiled Procedures. (line 109)
* program-bindings:                      Compiled Procedures. (line  75)
* program-free-variables:                Compiled Procedures. (line  53)
* program-lambda-list:                   Compiled Procedures. (line 156)
* program-meta:                          Compiled Procedures. (line  66)
* program-module:                        Compiled Procedures. (line  47)
* program-objcode:                       Compiled Procedures. (line  37)
* program-objects:                       Compiled Procedures. (line  42)
* program-sources:                       Compiled Procedures. (line  92)
* program?:                              Compiled Procedures. (line  33)
* promise?:                              Delayed Evaluation.  (line  14)
* promise? <1>:                          SRFI-45.             (line  34)
* prompt:                                Dynamic Environment Instructions.
                                                              (line  43)
* proper-list?:                          SRFI-1 Predicates.   (line   8)
* protoent:aliases:                      Network Databases.   (line 288)
* protoent:name:                         Network Databases.   (line 286)
* protoent:proto:                        Network Databases.   (line 290)
* provide:                               Feature Manipulation.
                                                              (line  16)
* provided?:                             Feature Manipulation.
                                                              (line   9)
* PTR2SCM:                               Non-immediate objects.
                                                              (line  16)
* push-rest:                             Function Prologue Instructions.
                                                              (line  45)
* put-bytevector:                        R6RS Binary Output.  (line  48)
* put-char:                              R6RS Textual Output. (line   6)
* put-datum:                             R6RS Textual Output. (line  21)
* put-string:                            R6RS Textual Output. (line  10)
* put-string <1>:                        R6RS Textual Output. (line  11)
* put-string <2>:                        R6RS Textual Output. (line  12)
* put-u8:                                R6RS Binary Output.  (line  43)
* putenv:                                Runtime Environment. (line  94)
* pwd:                                   Processes.           (line  11)
* q-empty-check:                         Queues.              (line  49)
* q-empty?:                              Queues.              (line  46)
* q-front:                               Queues.              (line  52)
* q-length:                              Queues.              (line  43)
* q-pop!:                                Queues.              (line  32)
* q-push!:                               Queues.              (line  40)
* q-rear:                                Queues.              (line  56)
* q-remove!:                             Queues.              (line  60)
* q?:                                    Queues.              (line  21)
* quasiquote:                            Expression Syntax.   (line  67)
* quasiquote <1>:                        rnrs base.           (line 109)
* quasisyntax:                           rnrs syntax-case.    (line  24)
* quit:                                  System Commands.     (line  17)
* quit <1>:                              Processes.           (line 212)
* quo:                                   Inlined Mathematical Instructions.
                                                              (line  22)
* quote:                                 Expression Syntax.   (line  49)
* quote <1>:                             rnrs base.           (line 108)
* quotient:                              Integer Operations.  (line  14)
* quotient <1>:                          rnrs r5rs.           (line  14)
* raise:                                 Signals.             (line  43)
* raise <1>:                             SRFI-18 Exceptions.  (line  24)
* raise <2>:                             rnrs exceptions.     (line  56)
* raise-continuable:                     rnrs exceptions.     (line  62)
* random:                                Random.              (line  18)
* random-integer:                        SRFI-27 Default Random Source.
                                                              (line   6)
* random-real:                           SRFI-27 Default Random Source.
                                                              (line  11)
* random-source-make-integers:           SRFI-27 Random Number Generators.
                                                              (line   6)
* random-source-make-reals:              SRFI-27 Random Number Generators.
                                                              (line  28)
* random-source-make-reals <1>:          SRFI-27 Random Number Generators.
                                                              (line  29)
* random-source-pseudo-randomize!:       SRFI-27 Random Sources.
                                                              (line  21)
* random-source-randomize!:              SRFI-27 Random Sources.
                                                              (line  16)
* random-source-state-ref:               SRFI-27 Random Sources.
                                                              (line  33)
* random-source-state-set!:              SRFI-27 Random Sources.
                                                              (line  34)
* random-source?:                        SRFI-27 Random Sources.
                                                              (line  12)
* random-state->datum:                   Random.              (line  72)
* random-state-from-platform:            Random.              (line  77)
* random:exp:                            Random.              (line  26)
* random:hollow-sphere!:                 Random.              (line  32)
* random:normal:                         Random.              (line  39)
* random:normal-vector!:                 Random.              (line  46)
* random:solid-sphere!:                  Random.              (line  52)
* random:uniform:                        Random.              (line  59)
* rational-valued?:                      rnrs base.           (line 294)
* rational?:                             Reals and Rationals. (line  79)
* rational? <1>:                         rnrs base.           (line 155)
* rationalize:                           Reals and Rationals. (line  86)
* rationalize <1>:                       rnrs base.           (line 158)
* re-export:                             Creating Guile Modules.
                                                              (line 182)
* read:                                  Scheme Read.         (line   6)
* read <1>:                              rnrs io simple.      (line  50)
* read <2>:                              rnrs io simple.      (line  51)
* read-char:                             Reading.             (line  30)
* read-char <1>:                         rnrs io simple.      (line  45)
* read-char <2>:                         rnrs io simple.      (line  46)
* read-client:                           Web Server.          (line  92)
* read-delimited:                        Line/Delimited.      (line  45)
* read-delimited!:                       Line/Delimited.      (line  51)
* read-disable:                          Scheme Read.         (line  52)
* read-enable:                           Scheme Read.         (line  51)
* read-hash-extend:                      Reader Extensions.   (line   6)
* read-header:                           HTTP.                (line 105)
* read-headers:                          HTTP.                (line 121)
* read-line:                             Line/Delimited.      (line  15)
* read-line!:                            Line/Delimited.      (line  39)
* read-options:                          Scheme Read.         (line  15)
* read-request:                          Requests.            (line  65)
* read-request-body:                     Requests.            (line  89)
* read-request-line:                     HTTP.                (line 145)
* read-response:                         Responses.           (line  32)
* read-response-body:                    Responses.           (line  80)
* read-response-line:                    HTTP.                (line 152)
* read-set!:                             Scheme Read.         (line  53)
* read-string:                           Line/Delimited.      (line  81)
* read-string <1>:                       sxml ssax input-parse.
                                                              (line  54)
* read-string!:                          Line/Delimited.      (line  90)
* read-string!/partial:                  Block Reading and Writing.
                                                              (line  13)
* read-text-line:                        sxml ssax input-parse.
                                                              (line  52)
* read-with-shared-structure:            SRFI-38.             (line  69)
* read-with-shared-structure <1>:        SRFI-38.             (line  70)
* readdir:                               File System.         (line 240)
* readline:                              Readline Functions.  (line  14)
* readline-disable:                      Readline Options.    (line  13)
* readline-enable:                       Readline Options.    (line  12)
* readline-options:                      Readline Options.    (line  11)
* readline-port:                         Readline Functions.  (line  35)
* readline-set!:                         Readline Options.    (line  14)
* readlink:                              File System.         (line 120)
* real->flonum:                          rnrs arithmetic flonums.
                                                              (line  17)
* real-part:                             Complex.             (line  15)
* real-part <1>:                         rnrs base.           (line 134)
* real-valued?:                          rnrs base.           (line 293)
* real?:                                 Reals and Rationals. (line  72)
* real? <1>:                             rnrs base.           (line 154)
* rec:                                   SRFI-31.             (line   6)
* receive:                               Multiple Values.     (line  70)
* record-accessor:                       Records.             (line  52)
* record-accessor <1>:                   rnrs records procedural.
                                                              (line  49)
* record-constructor:                    Records.             (line  34)
* record-constructor <1>:                rnrs records procedural.
                                                              (line  41)
* record-constructor-descriptor:         rnrs records syntactic.
                                                              (line  71)
* record-field-mutable?:                 rnrs records inspection.
                                                              (line  45)
* record-modifier:                       Records.             (line  61)
* record-mutator:                        rnrs records procedural.
                                                              (line  53)
* record-predicate:                      Records.             (line  46)
* record-predicate <1>:                  rnrs records procedural.
                                                              (line  45)
* record-rtd:                            rnrs records inspection.
                                                              (line  13)
* record-type-descriptor:                Records.             (line  72)
* record-type-descriptor <1>:            rnrs records syntactic.
                                                              (line  67)
* record-type-descriptor?:               rnrs records procedural.
                                                              (line  24)
* record-type-field-names:               rnrs records inspection.
                                                              (line  40)
* record-type-fields:                    Records.             (line  87)
* record-type-generative?:               rnrs records inspection.
                                                              (line  28)
* record-type-name:                      Records.             (line  81)
* record-type-name <1>:                  rnrs records inspection.
                                                              (line  17)
* record-type-opaque?:                   rnrs records inspection.
                                                              (line  36)
* record-type-parent:                    rnrs records inspection.
                                                              (line  20)
* record-type-sealed?:                   rnrs records inspection.
                                                              (line  32)
* record-type-uid:                       rnrs records inspection.
                                                              (line  24)
* record?:                               Records.             (line  13)
* record? <1>:                           rnrs records inspection.
                                                              (line   9)
* recv!:                                 Network Sockets and Communication.
                                                              (line 220)
* recvfrom!:                             Network Sockets and Communication.
                                                              (line 249)
* redirect-port:                         Ports and File Descriptors.
                                                              (line 240)
* reduce:                                SRFI-1 Fold and Map. (line  72)
* reduce-right:                          SRFI-1 Fold and Map. (line  73)
* regexp-exec:                           Regexp Functions.    (line  90)
* regexp-match?:                         Match Structures.    (line  20)
* regexp-quote:                          Backslash Escapes.   (line  30)
* regexp-substitute:                     Regexp Functions.    (line 166)
* regexp-substitute/global:              Regexp Functions.    (line 201)
* regexp?:                               Regexp Functions.    (line 129)
* registers:                             Debug Commands.      (line  48)
* release-arbiter:                       Arbiters.            (line  26)
* release-port-handle:                   Ports and File Descriptors.
                                                              (line 113)
* reload:                                Module Commands.     (line  15)
* reload-module:                         Module System Reflection.
                                                              (line  61)
* rem:                                   Inlined Mathematical Instructions.
                                                              (line  23)
* remainder:                             Integer Operations.  (line  15)
* remainder <1>:                         rnrs r5rs.           (line  15)
* remove:                                SRFI-1 Filtering and Partitioning.
                                                              (line  31)
* remove <1>:                            rnrs lists.          (line  33)
* remove!:                               SRFI-1 Filtering and Partitioning.
                                                              (line  32)
* remove-class-accessors!:               Customizing Class Redefinition.
                                                              (line  28)
* remove-hook!:                          Hook Reference.      (line  48)
* remp:                                  rnrs lists.          (line  32)
* remq:                                  rnrs lists.          (line  35)
* remv:                                  rnrs lists.          (line  34)
* rename:                                File System.         (line 198)
* rename-file:                           File System.         (line 198)
* repl-default-option-set!:              System Commands.     (line  47)
* replace-range:                         Transforming SXML.   (line  75)
* replace-titles:                        texinfo docbook.     (line  58)
* request-absolute-uri:                  Requests.            (line 141)
* request-accept:                        Requests.            (line 101)
* request-accept-charset:                Requests.            (line 102)
* request-accept-encoding:               Requests.            (line 103)
* request-accept-language:               Requests.            (line 104)
* request-allow:                         Requests.            (line 105)
* request-authorization:                 Requests.            (line 106)
* request-cache-control:                 Requests.            (line 107)
* request-connection:                    Requests.            (line 108)
* request-content-encoding:              Requests.            (line 109)
* request-content-language:              Requests.            (line 110)
* request-content-length:                Requests.            (line 111)
* request-content-location:              Requests.            (line 112)
* request-content-md5:                   Requests.            (line 113)
* request-content-range:                 Requests.            (line 114)
* request-content-type:                  Requests.            (line 115)
* request-date:                          Requests.            (line 116)
* request-expect:                        Requests.            (line 117)
* request-expires:                       Requests.            (line 118)
* request-from:                          Requests.            (line 119)
* request-headers:                       Requests.            (line  45)
* request-host:                          Requests.            (line 120)
* request-if-match:                      Requests.            (line 121)
* request-if-modified-since:             Requests.            (line 122)
* request-if-none-match:                 Requests.            (line 123)
* request-if-range:                      Requests.            (line 124)
* request-if-unmodified-since:           Requests.            (line 125)
* request-last-modified:                 Requests.            (line 126)
* request-max-forwards:                  Requests.            (line 127)
* request-meta:                          Requests.            (line  46)
* request-method:                        Requests.            (line  42)
* request-port:                          Requests.            (line  47)
* request-pragma:                        Requests.            (line 128)
* request-proxy-authorization:           Requests.            (line 129)
* request-range:                         Requests.            (line 130)
* request-referer:                       Requests.            (line 131)
* request-te:                            Requests.            (line 132)
* request-trailer:                       Requests.            (line 133)
* request-transfer-encoding:             Requests.            (line 134)
* request-upgrade:                       Requests.            (line 135)
* request-uri:                           Requests.            (line  43)
* request-user-agent:                    Requests.            (line 136)
* request-version:                       Requests.            (line  44)
* request-via:                           Requests.            (line 137)
* request-warning:                       Requests.            (line 138)
* request?:                              Requests.            (line  41)
* require:                               SLIB.                (line  17)
* require-extension:                     SRFI-55.             (line  10)
* reserve-locals:                        Function Prologue Instructions.
                                                              (line 103)
* reset:                                 Shift and Reset.     (line  64)
* reset-hook!:                           Hook Reference.      (line  53)
* reset-parsed-entity-definitions!:      SSAX.                (line 184)
* resolve-interface:                     Module System Reflection.
                                                              (line  47)
* resolve-module:                        Module System Reflection.
                                                              (line  37)
* response-accept-ranges:                Responses.           (line  93)
* response-age:                          Responses.           (line  94)
* response-allow:                        Responses.           (line  95)
* response-body-port:                    Responses.           (line  70)
* response-cache-control:                Responses.           (line  96)
* response-code:                         Responses.           (line  14)
* response-connection:                   Responses.           (line  97)
* response-content-encoding:             Responses.           (line  98)
* response-content-language:             Responses.           (line  99)
* response-content-length:               Responses.           (line 100)
* response-content-location:             Responses.           (line 101)
* response-content-md5:                  Responses.           (line 102)
* response-content-range:                Responses.           (line 103)
* response-content-type:                 Responses.           (line 104)
* response-date:                         Responses.           (line 105)
* response-etag:                         Responses.           (line 106)
* response-expires:                      Responses.           (line 107)
* response-headers:                      Responses.           (line  16)
* response-last-modified:                Responses.           (line 108)
* response-location:                     Responses.           (line 109)
* response-must-not-include-body?:       Responses.           (line  62)
* response-port:                         Responses.           (line  17)
* response-pragma:                       Responses.           (line 110)
* response-proxy-authenticate:           Responses.           (line 111)
* response-reason-phrase:                Responses.           (line  15)
* response-retry-after:                  Responses.           (line 112)
* response-server:                       Responses.           (line 113)
* response-trailer:                      Responses.           (line 114)
* response-transfer-encoding:            Responses.           (line 115)
* response-upgrade:                      Responses.           (line 116)
* response-vary:                         Responses.           (line 117)
* response-version:                      Responses.           (line  13)
* response-via:                          Responses.           (line 118)
* response-warning:                      Responses.           (line 119)
* response-www-authenticate:             Responses.           (line 120)
* response?:                             Responses.           (line  12)
* restore-signals:                       Signals.             (line  97)
* restricted-vector-sort!:               Sorting.             (line  86)
* return:                                Procedure Call and Return Instructions.
                                                              (line  60)
* return/nvalues:                        Procedure Call and Return Instructions.
                                                              (line  71)
* return/values:                         Procedure Call and Return Instructions.
                                                              (line  70)
* return/values*:                        Procedure Call and Return Instructions.
                                                              (line  85)
* reverse:                               Append/Reverse.      (line  40)
* reverse <1>:                           rnrs base.           (line 202)
* reverse!:                              Append/Reverse.      (line  41)
* reverse-bit-field:                     SRFI-60.             (line  77)
* reverse-list->string:                  String Constructors. (line  23)
* reverse-list->vector:                  SRFI-43 Conversion.  (line  22)
* reverse-vector->list:                  SRFI-43 Conversion.  (line  11)
* rewinddir:                             File System.         (line 246)
* right-justify-string:                  texinfo string-utils.
                                                              (line  99)
* rmdir:                                 File System.         (line 221)
* rotate-bit-field:                      SRFI-60.             (line  68)
* round:                                 Arithmetic.          (line  60)
* round <1>:                             rnrs base.           (line 246)
* round-ash:                             Bitwise Operations.  (line  82)
* round-quotient:                        Arithmetic.          (line 211)
* round-remainder:                       Arithmetic.          (line 212)
* round/:                                Arithmetic.          (line 210)
* run-asyncs:                            User asyncs.         (line  22)
* run-hook:                              Hook Reference.      (line  62)
* run-server:                            REPL Servers.        (line  29)
* run-server <1>:                        Web Server.          (line 148)
* s16vector:                             SRFI-4 API.          (line  68)
* s16vector->list:                       SRFI-4 API.          (line 176)
* s16vector-length:                      SRFI-4 API.          (line  96)
* s16vector-ref:                         SRFI-4 API.          (line 122)
* s16vector-set!:                        SRFI-4 API.          (line 149)
* s16vector?:                            SRFI-4 API.          (line  12)
* s32vector:                             SRFI-4 API.          (line  70)
* s32vector->list:                       SRFI-4 API.          (line 178)
* s32vector-length:                      SRFI-4 API.          (line  98)
* s32vector-ref:                         SRFI-4 API.          (line 124)
* s32vector-set!:                        SRFI-4 API.          (line 151)
* s32vector?:                            SRFI-4 API.          (line  14)
* s64vector:                             SRFI-4 API.          (line  72)
* s64vector->list:                       SRFI-4 API.          (line 180)
* s64vector-length:                      SRFI-4 API.          (line 100)
* s64vector-ref:                         SRFI-4 API.          (line 126)
* s64vector-set!:                        SRFI-4 API.          (line 153)
* s64vector?:                            SRFI-4 API.          (line  16)
* s8vector:                              SRFI-4 API.          (line  66)
* s8vector->list:                        SRFI-4 API.          (line 174)
* s8vector-length:                       SRFI-4 API.          (line  94)
* s8vector-ref:                          SRFI-4 API.          (line 120)
* s8vector-set!:                         SRFI-4 API.          (line 147)
* s8vector?:                             SRFI-4 API.          (line  10)
* sanitize-response:                     Web Server.          (line 112)
* save-module-excursion:                 Module System Reflection.
                                                              (line  26)
* scandir:                               File Tree Walk.      (line 150)
* scheme-report-environment:             Environments.        (line  25)
* scheme-report-environment <1>:         rnrs r5rs.           (line  27)
* scm->pointer:                          Foreign Variables.   (line  58)
* scm-error:                             Error Reporting.     (line  14)
* SCM2PTR:                               Non-immediate objects.
                                                              (line  12)
* scm_abs:                               Arithmetic.          (line  42)
* scm_accept:                            Network Sockets and Communication.
                                                              (line 186)
* scm_access:                            File System.         (line  13)
* scm_acons:                             Adding or Setting Alist Entries.
                                                              (line  93)
* scm_add_feature:                       Feature Manipulation.
                                                              (line  23)
* scm_add_hook_x:                        Hook Reference.      (line  43)
* scm_alarm:                             Signals.             (line 103)
* scm_alignof:                           Foreign Structs.     (line  22)
* scm_all_threads:                       Threads.             (line  17)
* scm_angle:                             Complex.             (line  29)
* scm_any_to_c32vector:                  SRFI-4 Extensions.   (line  34)
* scm_any_to_c64vector:                  SRFI-4 Extensions.   (line  35)
* scm_any_to_f32vector:                  SRFI-4 Extensions.   (line  32)
* scm_any_to_f64vector:                  SRFI-4 Extensions.   (line  33)
* scm_any_to_s16vector:                  SRFI-4 Extensions.   (line  27)
* scm_any_to_s32vector:                  SRFI-4 Extensions.   (line  29)
* scm_any_to_s64vector:                  SRFI-4 Extensions.   (line  31)
* scm_any_to_s8vector:                   SRFI-4 Extensions.   (line  25)
* scm_any_to_u16vector:                  SRFI-4 Extensions.   (line  26)
* scm_any_to_u32vector:                  SRFI-4 Extensions.   (line  28)
* scm_any_to_u64vector:                  SRFI-4 Extensions.   (line  30)
* scm_any_to_u8vector:                   SRFI-4 Extensions.   (line  24)
* scm_append:                            Append/Reverse.      (line  17)
* scm_append_x:                          Append/Reverse.      (line  18)
* scm_apply:                             Fly Evaluation.      (line  71)
* scm_apply_0:                           Fly Evaluation.      (line  67)
* scm_apply_1:                           Fly Evaluation.      (line  68)
* scm_apply_2:                           Fly Evaluation.      (line  69)
* scm_apply_3:                           Fly Evaluation.      (line  70)
* SCM_ARG1:                              Handling Errors.     (line 137)
* SCM_ARG2:                              Handling Errors.     (line 138)
* SCM_ARG3:                              Handling Errors.     (line 139)
* SCM_ARG4:                              Handling Errors.     (line 140)
* SCM_ARG5:                              Handling Errors.     (line 141)
* SCM_ARG6:                              Handling Errors.     (line 142)
* SCM_ARG7:                              Handling Errors.     (line 143)
* SCM_ARGn:                              Handling Errors.     (line 152)
* scm_array_contents:                    Shared Arrays.       (line 108)
* scm_array_copy_x:                      Array Procedures.    (line 150)
* scm_array_dimensions:                  Array Procedures.    (line 118)
* scm_array_fill_x:                      Array Procedures.    (line 156)
* scm_array_for_each:                    Array Procedures.    (line 182)
* scm_array_get_handle:                  Accessing Arrays from C.
                                                              (line  65)
* scm_array_handle_bit_elements:         Accessing Arrays from C.
                                                              (line 235)
* scm_array_handle_bit_writable_elements: Accessing Arrays from C.
                                                              (line 276)
* scm_array_handle_c32_elements:         Accessing Arrays from C.
                                                              (line 196)
* scm_array_handle_c32_writable_elements: Accessing Arrays from C.
                                                              (line 228)
* scm_array_handle_c64_elements:         Accessing Arrays from C.
                                                              (line 198)
* scm_array_handle_c64_writable_elements: Accessing Arrays from C.
                                                              (line 230)
* scm_array_handle_dims:                 Accessing Arrays from C.
                                                              (line  97)
* scm_array_handle_elements:             Accessing Arrays from C.
                                                              (line 148)
* scm_array_handle_f32_elements:         Accessing Arrays from C.
                                                              (line 192)
* scm_array_handle_f32_writable_elements: Accessing Arrays from C.
                                                              (line 224)
* scm_array_handle_f64_elements:         Accessing Arrays from C.
                                                              (line 194)
* scm_array_handle_f64_writable_elements: Accessing Arrays from C.
                                                              (line 226)
* scm_array_handle_pos:                  Accessing Arrays from C.
                                                              (line 127)
* scm_array_handle_rank:                 Accessing Arrays from C.
                                                              (line  79)
* scm_array_handle_ref:                  Accessing Arrays from C.
                                                              (line 135)
* scm_array_handle_release:              Accessing Arrays from C.
                                                              (line  74)
* scm_array_handle_s16_elements:         Accessing Arrays from C.
                                                              (line 182)
* scm_array_handle_s16_writable_elements: Accessing Arrays from C.
                                                              (line 214)
* scm_array_handle_s32_elements:         Accessing Arrays from C.
                                                              (line 186)
* scm_array_handle_s32_writable_elements: Accessing Arrays from C.
                                                              (line 218)
* scm_array_handle_s64_elements:         Accessing Arrays from C.
                                                              (line 190)
* scm_array_handle_s64_writable_elements: Accessing Arrays from C.
                                                              (line 222)
* scm_array_handle_s8_elements:          Accessing Arrays from C.
                                                              (line 178)
* scm_array_handle_s8_writable_elements: Accessing Arrays from C.
                                                              (line 210)
* scm_array_handle_set:                  Accessing Arrays from C.
                                                              (line 141)
* scm_array_handle_u16_elements:         Accessing Arrays from C.
                                                              (line 180)
* scm_array_handle_u16_writable_elements: Accessing Arrays from C.
                                                              (line 212)
* scm_array_handle_u32_elements:         Accessing Arrays from C.
                                                              (line 184)
* scm_array_handle_u32_writable_elements: Accessing Arrays from C.
                                                              (line 216)
* scm_array_handle_u64_elements:         Accessing Arrays from C.
                                                              (line 188)
* scm_array_handle_u64_writable_elements: Accessing Arrays from C.
                                                              (line 220)
* scm_array_handle_u8_elements:          Accessing Arrays from C.
                                                              (line 176)
* scm_array_handle_u8_writable_elements: Accessing Arrays from C.
                                                              (line 208)
* scm_array_handle_uniform_elements:     Accessing Arrays from C.
                                                              (line 159)
* scm_array_handle_uniform_element_size: Accessing Arrays from C.
                                                              (line 171)
* scm_array_handle_uniform_writable_elements: Accessing Arrays from C.
                                                              (line 166)
* scm_array_handle_writable_elements:    Accessing Arrays from C.
                                                              (line 154)
* scm_array_index_map_x:                 Array Procedures.    (line 187)
* scm_array_in_bounds_p:                 Array Procedures.    (line  99)
* scm_array_length:                      Array Procedures.    (line 132)
* scm_array_map_x:                       Array Procedures.    (line 168)
* scm_array_p:                           Array Procedures.    (line  22)
* scm_array_rank:                        Array Procedures.    (line 138)
* scm_array_ref:                         Array Procedures.    (line  92)
* scm_array_set_x:                       Array Procedures.    (line 108)
* scm_array_to_list:                     Array Procedures.    (line 145)
* scm_array_type:                        Array Procedures.    (line  86)
* scm_ash:                               Bitwise Operations.  (line  68)
* SCM_ASSERT:                            Handling Errors.     (line 126)
* scm_assert_smob_type:                  Smobs.               (line 100)
* SCM_ASSERT_TYPE:                       Handling Errors.     (line 128)
* scm_assoc:                             Retrieving Alist Entries.
                                                              (line  15)
* scm_assoc_ref:                         Retrieving Alist Entries.
                                                              (line  29)
* scm_assoc_remove_x:                    Removing Alist Entries.
                                                              (line  61)
* scm_assoc_set_x:                       Adding or Setting Alist Entries.
                                                              (line 104)
* scm_assq:                              Retrieving Alist Entries.
                                                              (line  13)
* scm_assq_ref:                          Retrieving Alist Entries.
                                                              (line  27)
* scm_assq_remove_x:                     Removing Alist Entries.
                                                              (line  59)
* scm_assq_set_x:                        Adding or Setting Alist Entries.
                                                              (line 102)
* scm_assv:                              Retrieving Alist Entries.
                                                              (line  14)
* scm_assv_ref:                          Retrieving Alist Entries.
                                                              (line  28)
* scm_assv_remove_x:                     Removing Alist Entries.
                                                              (line  60)
* scm_assv_set_x:                        Adding or Setting Alist Entries.
                                                              (line 103)
* scm_async:                             User asyncs.         (line  15)
* scm_async_mark:                        User asyncs.         (line  19)
* scm_backtrace:                         Pre-Unwind Debugging.
                                                              (line  25)
* scm_backtrace_with_highlights:         Pre-Unwind Debugging.
                                                              (line  24)
* scm_basename:                          File System.         (line 332)
* scm_bind:                              Network Sockets and Communication.
                                                              (line 162)
* scm_bindtextdomain:                    Gettext Support.     (line  85)
* scm_bind_textdomain_codeset:           Gettext Support.     (line 101)
* scm_bitvector:                         Bit Vectors.         (line  31)
* scm_bitvector_elements:                Bit Vectors.         (line 131)
* scm_bitvector_fill_x:                  Bit Vectors.         (line  59)
* scm_bitvector_length:                  Bit Vectors.         (line  35)
* scm_bitvector_p:                       Bit Vectors.         (line  16)
* scm_bitvector_ref:                     Bit Vectors.         (line  43)
* scm_bitvector_set_x:                   Bit Vectors.         (line  50)
* scm_bitvector_to_list:                 Bit Vectors.         (line  68)
* scm_bitvector_writable_elements:       Bit Vectors.         (line 140)
* scm_bit_count:                         Bit Vectors.         (line  73)
* scm_bit_count_star:                    Bit Vectors.         (line 116)
* scm_bit_extract:                       Bitwise Operations.  (line 142)
* scm_bit_invert_x:                      Bit Vectors.         (line  89)
* scm_bit_position:                      Bit Vectors.         (line  80)
* scm_bit_set_star_x:                    Bit Vectors.         (line  93)
* scm_boolean_p:                         Booleans.            (line  62)
* scm_boot_guile:                        Initialization.      (line  78)
* scm_broadcast_condition_variable:      Mutexes and Condition Variables.
                                                              (line 163)
* scm_bytecode_to_objcode:               Bytecode and Objcode.
                                                              (line  49)
* SCM_BYTEVECTOR_CONTENTS:               Bytevector Manipulation.
                                                              (line  64)
* scm_bytevector_copy:                   Bytevector Manipulation.
                                                              (line  48)
* scm_bytevector_copy_x:                 Bytevector Manipulation.
                                                              (line  40)
* scm_bytevector_eq_p:                   Bytevector Manipulation.
                                                              (line  30)
* scm_bytevector_fill_x:                 Bytevector Manipulation.
                                                              (line  35)
* scm_bytevector_ieee_double_native_ref: Bytevectors as Floats.
                                                              (line  32)
* scm_bytevector_ieee_double_native_set_x: Bytevectors as Floats.
                                                              (line  40)
* scm_bytevector_ieee_double_ref:        Bytevectors as Floats.
                                                              (line  13)
* scm_bytevector_ieee_double_set_x:      Bytevectors as Floats.
                                                              (line  23)
* scm_bytevector_ieee_single_native_ref: Bytevectors as Floats.
                                                              (line  31)
* scm_bytevector_ieee_single_native_set_x: Bytevectors as Floats.
                                                              (line  38)
* scm_bytevector_ieee_single_ref:        Bytevectors as Floats.
                                                              (line  12)
* scm_bytevector_ieee_single_set_x:      Bytevectors as Floats.
                                                              (line  21)
* scm_bytevector_length:                 Bytevector Manipulation.
                                                              (line  23)
* SCM_BYTEVECTOR_LENGTH:                 Bytevector Manipulation.
                                                              (line  61)
* scm_bytevector_p:                      Bytevector Manipulation.
                                                              (line  16)
* scm_bytevector_s16_native_ref:         Bytevectors as Integers.
                                                              (line 102)
* scm_bytevector_s16_native_set_x:       Bytevectors as Integers.
                                                              (line 118)
* scm_bytevector_s16_ref:                Bytevectors as Integers.
                                                              (line  64)
* scm_bytevector_s16_set_x:              Bytevectors as Integers.
                                                              (line  83)
* scm_bytevector_s32_native_ref:         Bytevectors as Integers.
                                                              (line 104)
* scm_bytevector_s32_native_set_x:       Bytevectors as Integers.
                                                              (line 120)
* scm_bytevector_s32_ref:                Bytevectors as Integers.
                                                              (line  66)
* scm_bytevector_s32_set_x:              Bytevectors as Integers.
                                                              (line  85)
* scm_bytevector_s64_native_ref:         Bytevectors as Integers.
                                                              (line 106)
* scm_bytevector_s64_native_set_x:       Bytevectors as Integers.
                                                              (line 122)
* scm_bytevector_s64_ref:                Bytevectors as Integers.
                                                              (line  68)
* scm_bytevector_s64_set_x:              Bytevectors as Integers.
                                                              (line  87)
* scm_bytevector_s8_ref:                 Bytevectors as Integers.
                                                              (line  62)
* scm_bytevector_s8_set_x:               Bytevectors as Integers.
                                                              (line  81)
* scm_bytevector_sint_ref:               Bytevectors as Integers.
                                                              (line  32)
* scm_bytevector_sint_set_x:             Bytevectors as Integers.
                                                              (line  45)
* scm_bytevector_to_pointer:             Void Pointers and Byte Access.
                                                              (line  31)
* scm_bytevector_to_sint_list:           Bytevectors and Integer Lists.
                                                              (line  29)
* scm_bytevector_to_u8_list:             Bytevectors and Integer Lists.
                                                              (line  14)
* scm_bytevector_to_uint_list:           Bytevectors and Integer Lists.
                                                              (line  24)
* scm_bytevector_u16_native_ref:         Bytevectors as Integers.
                                                              (line 101)
* scm_bytevector_u16_native_set_x:       Bytevectors as Integers.
                                                              (line 117)
* scm_bytevector_u16_ref:                Bytevectors as Integers.
                                                              (line  63)
* scm_bytevector_u16_set_x:              Bytevectors as Integers.
                                                              (line  82)
* scm_bytevector_u32_native_ref:         Bytevectors as Integers.
                                                              (line 103)
* scm_bytevector_u32_native_set_x:       Bytevectors as Integers.
                                                              (line 119)
* scm_bytevector_u32_ref:                Bytevectors as Integers.
                                                              (line  65)
* scm_bytevector_u32_set_x:              Bytevectors as Integers.
                                                              (line  84)
* scm_bytevector_u64_native_ref:         Bytevectors as Integers.
                                                              (line 105)
* scm_bytevector_u64_native_set_x:       Bytevectors as Integers.
                                                              (line 121)
* scm_bytevector_u64_ref:                Bytevectors as Integers.
                                                              (line  67)
* scm_bytevector_u64_set_x:              Bytevectors as Integers.
                                                              (line  86)
* scm_bytevector_u8_ref:                 Bytevectors as Integers.
                                                              (line  61)
* scm_bytevector_u8_set_x:               Bytevectors as Integers.
                                                              (line  80)
* scm_bytevector_uint_ref:               Bytevectors as Integers.
                                                              (line  27)
* scm_bytevector_uint_set_x:             Bytevectors as Integers.
                                                              (line  38)
* scm_c32vector:                         SRFI-4 API.          (line  87)
* scm_c32vector_elements:                SRFI-4 API.          (line 277)
* scm_c32vector_length:                  SRFI-4 API.          (line 115)
* scm_c32vector_p:                       SRFI-4 API.          (line  31)
* scm_c32vector_ref:                     SRFI-4 API.          (line 141)
* scm_c32vector_set_x:                   SRFI-4 API.          (line 168)
* scm_c32vector_to_list:                 SRFI-4 API.          (line 195)
* scm_c32vector_writable_elements:       SRFI-4 API.          (line 305)
* scm_c64vector:                         SRFI-4 API.          (line  88)
* scm_c64vector_elements:                SRFI-4 API.          (line 279)
* scm_c64vector_length:                  SRFI-4 API.          (line 116)
* scm_c64vector_p:                       SRFI-4 API.          (line  32)
* scm_c64vector_ref:                     SRFI-4 API.          (line 142)
* scm_c64vector_set_x:                   SRFI-4 API.          (line 169)
* scm_c64vector_to_list:                 SRFI-4 API.          (line 196)
* scm_c64vector_writable_elements:       SRFI-4 API.          (line 307)
* scm_caaaar:                            Pairs.               (line 140)
* scm_caaadr:                            Pairs.               (line 139)
* scm_caaar:                             Pairs.               (line 124)
* scm_caadar:                            Pairs.               (line 138)
* scm_caaddr:                            Pairs.               (line 137)
* scm_caadr:                             Pairs.               (line 123)
* scm_caar:                              Pairs.               (line 116)
* scm_cadaar:                            Pairs.               (line 136)
* scm_cadadr:                            Pairs.               (line 135)
* scm_cadar:                             Pairs.               (line 122)
* scm_caddar:                            Pairs.               (line 134)
* scm_cadddr:                            Pairs.               (line 133)
* scm_caddr:                             Pairs.               (line 121)
* scm_cadr:                              Pairs.               (line 115)
* scm_call:                              Fly Evaluation.      (line  98)
* scm_calloc:                            Memory Blocks.       (line  42)
* scm_call_0:                            Fly Evaluation.      (line  83)
* scm_call_1:                            Fly Evaluation.      (line  84)
* scm_call_2:                            Fly Evaluation.      (line  85)
* scm_call_3:                            Fly Evaluation.      (line  86)
* scm_call_4:                            Fly Evaluation.      (line  87)
* scm_call_5:                            Fly Evaluation.      (line  88)
* scm_call_6:                            Fly Evaluation.      (line  89)
* scm_call_7:                            Fly Evaluation.      (line  90)
* scm_call_8:                            Fly Evaluation.      (line  92)
* scm_call_9:                            Fly Evaluation.      (line  94)
* scm_call_n:                            Fly Evaluation.      (line 107)
* scm_call_with_blocked_asyncs:          System asyncs.       (line  39)
* scm_call_with_input_string:            String Ports.        (line  44)
* scm_call_with_output_string:           String Ports.        (line  17)
* scm_call_with_unblocked_asyncs:        System asyncs.       (line  50)
* scm_cancel_thread:                     Threads.             (line  76)
* scm_car:                               Pairs.               (line  72)
* SCM_CAR:                               Pairs.               (line  76)
* scm_catch:                             Catch.               (line  56)
* scm_catch_with_pre_unwind_handler:     Catch.               (line  54)
* scm_cdaaar:                            Pairs.               (line 132)
* scm_cdaadr:                            Pairs.               (line 131)
* scm_cdaar:                             Pairs.               (line 120)
* scm_cdadar:                            Pairs.               (line 130)
* scm_cdaddr:                            Pairs.               (line 129)
* scm_cdadr:                             Pairs.               (line 119)
* scm_cdar:                              Pairs.               (line 114)
* scm_cddaar:                            Pairs.               (line 128)
* scm_cddadr:                            Pairs.               (line 127)
* scm_cddar:                             Pairs.               (line 118)
* scm_cdddar:                            Pairs.               (line 126)
* scm_cddddr:                            Pairs.               (line 125)
* scm_cdddr:                             Pairs.               (line 117)
* scm_cddr:                              Pairs.               (line 113)
* scm_cdr:                               Pairs.               (line  73)
* SCM_CDR:                               Pairs.               (line  77)
* scm_ceiling:                           Arithmetic.          (line  70)
* scm_ceiling_divide:                    Arithmetic.          (line 132)
* scm_ceiling_quotient:                  Arithmetic.          (line 133)
* scm_ceiling_remainder:                 Arithmetic.          (line 134)
* scm_cell:                              Allocating Cells.    (line  19)
* SCM_CELL_OBJECT:                       Accessing Cell Entries.
                                                              (line  22)
* SCM_CELL_TYPE:                         Heap Cell Type Information.
                                                              (line  12)
* SCM_CELL_WORD:                         Accessing Cell Entries.
                                                              (line  12)
* scm_centered_divide:                   Arithmetic.          (line 179)
* scm_centered_quotient:                 Arithmetic.          (line 180)
* scm_centered_remainder:                Arithmetic.          (line 181)
* scm_char_alphabetic_p:                 Characters.          (line 164)
* scm_char_downcase:                     Characters.          (line 226)
* scm_char_general_category:             Characters.          (line 188)
* scm_char_is_both_p:                    Characters.          (line 184)
* scm_char_locale_ci_eq:                 Text Collation.      (line  44)
* scm_char_locale_ci_gt:                 Text Collation.      (line  37)
* scm_char_locale_ci_lt:                 Text Collation.      (line  35)
* scm_char_locale_downcase:              Character Case Mapping.
                                                              (line  24)
* scm_char_locale_gt:                    Text Collation.      (line  33)
* scm_char_locale_lt:                    Text Collation.      (line  31)
* scm_char_locale_titlecase:             Character Case Mapping.
                                                              (line  29)
* scm_char_locale_upcase:                Character Case Mapping.
                                                              (line  19)
* scm_char_lower_case_p:                 Characters.          (line 180)
* scm_char_numeric_p:                    Characters.          (line 168)
* scm_char_p:                            Characters.          (line 107)
* scm_char_ready_p:                      Reading.             (line  16)
* scm_char_set:                          Creating Character Sets.
                                                              (line  14)
* scm_char_set_adjoin:                   Character-Set Algebra.
                                                              (line  12)
* scm_char_set_adjoin_x:                 Character-Set Algebra.
                                                              (line  22)
* scm_char_set_any:                      Querying Character Sets.
                                                              (line  54)
* scm_char_set_complement:               Character-Set Algebra.
                                                              (line  32)
* scm_char_set_complement_x:             Character-Set Algebra.
                                                              (line  63)
* scm_char_set_contains_p:               Querying Character Sets.
                                                              (line  44)
* scm_char_set_copy:                     Creating Character Sets.
                                                              (line   9)
* scm_char_set_count:                    Querying Character Sets.
                                                              (line  29)
* scm_char_set_cursor:                   Iterating Over Character Sets.
                                                              (line  17)
* scm_char_set_cursor_next:              Iterating Over Character Sets.
                                                              (line  27)
* scm_char_set_delete:                   Character-Set Algebra.
                                                              (line  17)
* scm_char_set_delete_x:                 Character-Set Algebra.
                                                              (line  27)
* scm_char_set_difference:               Character-Set Algebra.
                                                              (line  50)
* scm_char_set_difference_x:             Character-Set Algebra.
                                                              (line  75)
* scm_char_set_diff_plus_intersection:   Character-Set Algebra.
                                                              (line  58)
* scm_char_set_diff_plus_intersection_x: Character-Set Algebra.
                                                              (line  83)
* scm_char_set_eq:                       Character Set Predicates/Comparison.
                                                              (line  16)
* scm_char_set_every:                    Querying Character Sets.
                                                              (line  49)
* scm_char_set_filter:                   Creating Character Sets.
                                                              (line  40)
* scm_char_set_filter_x:                 Creating Character Sets.
                                                              (line  46)
* scm_char_set_fold:                     Iterating Over Character Sets.
                                                              (line  38)
* scm_char_set_for_each:                 Iterating Over Character Sets.
                                                              (line  65)
* scm_char_set_hash:                     Character Set Predicates/Comparison.
                                                              (line  25)
* scm_char_set_intersection:             Character-Set Algebra.
                                                              (line  46)
* scm_char_set_intersection_x:           Character-Set Algebra.
                                                              (line  71)
* scm_char_set_leq:                      Character Set Predicates/Comparison.
                                                              (line  20)
* scm_char_set_map:                      Iterating Over Character Sets.
                                                              (line  70)
* scm_char_set_p:                        Character Set Predicates/Comparison.
                                                              (line  12)
* scm_char_set_ref:                      Iterating Over Character Sets.
                                                              (line  21)
* scm_char_set_size:                     Querying Character Sets.
                                                              (line  25)
* scm_char_set_to_list:                  Querying Character Sets.
                                                              (line  34)
* scm_char_set_to_string:                Querying Character Sets.
                                                              (line  38)
* scm_char_set_unfold:                   Iterating Over Character Sets.
                                                              (line  43)
* scm_char_set_unfold_x:                 Iterating Over Character Sets.
                                                              (line  54)
* scm_char_set_union:                    Character-Set Algebra.
                                                              (line  42)
* scm_char_set_union_x:                  Character-Set Algebra.
                                                              (line  67)
* scm_char_set_xor:                      Character-Set Algebra.
                                                              (line  54)
* scm_char_set_xor_x:                    Character-Set Algebra.
                                                              (line  79)
* scm_char_titlecase:                    Characters.          (line 230)
* scm_char_to_integer:                   Characters.          (line 212)
* scm_char_upcase:                       Characters.          (line 222)
* scm_char_upper_case_p:                 Characters.          (line 176)
* scm_char_whitespace_p:                 Characters.          (line 172)
* scm_chdir:                             Processes.           (line   7)
* scm_chmod:                             File System.         (line 139)
* scm_chown:                             File System.         (line 126)
* scm_chroot:                            Processes.           (line  26)
* scm_close:                             Ports and File Descriptors.
                                                              (line 152)
* scm_closedir:                          File System.         (line 252)
* scm_close_fdes:                        Ports and File Descriptors.
                                                              (line 160)
* scm_close_input_port:                  Closing.             (line  16)
* scm_close_output_port:                 Closing.             (line  17)
* scm_close_port:                        Closing.             (line   7)
* scm_complex_p:                         Complex Numbers.     (line  37)
* scm_condition_variable_p:              Mutexes and Condition Variables.
                                                              (line 136)
* scm_connect:                           Network Sockets and Communication.
                                                              (line 148)
* scm_cons:                              Pairs.               (line  46)
* scm_cons_source:                       Source Properties.   (line  87)
* scm_copy_file:                         File System.         (line 168)
* scm_copy_random_state:                 Random.              (line  15)
* scm_copy_tree:                         Copying.             (line  13)
* SCM_CRITICAL_SECTION_END:              Critical Sections.   (line   7)
* SCM_CRITICAL_SECTION_START:            Critical Sections.   (line   6)
* scm_crypt:                             Encryption.          (line  14)
* scm_ctermid:                           Terminals and Ptys.  (line  17)
* scm_current_dynamic_state:             Fluids and Dynamic States.
                                                              (line 124)
* scm_current_error_port:                Default Ports.       (line  39)
* scm_current_input_port:                Default Ports.       (line   7)
* scm_current_load_port:                 Loading.             (line  79)
* scm_current_module:                    Module System Reflection.
                                                              (line  18)
* scm_current_output_port:               Default Ports.       (line  24)
* scm_current_processor_count:           Processes.           (line 369)
* scm_current_thread:                    Threads.             (line  21)
* scm_current_time:                      Time.                (line   7)
* scm_c_angle:                           Complex.             (line  42)
* scm_c_array_rank:                      Array Procedures.    (line 141)
* scm_c_bind_keyword_arguments:          Keyword Procedures.  (line  40)
* scm_c_bitvector_length:                Bit Vectors.         (line  38)
* scm_c_bitvector_ref:                   Bit Vectors.         (line  46)
* scm_c_bitvector_set_x:                 Bit Vectors.         (line  54)
* scm_c_bytevector_length:               Bytevector Manipulation.
                                                              (line  26)
* scm_c_bytevector_ref:                  Bytevector Manipulation.
                                                              (line  51)
* scm_c_bytevector_set_x:                Bytevector Manipulation.
                                                              (line  54)
* scm_c_call_with_blocked_asyncs:        System asyncs.       (line  45)
* scm_c_call_with_current_module:        Accessing Modules from C.
                                                              (line  12)
* scm_c_call_with_unblocked_asyncs:      System asyncs.       (line  56)
* scm_c_catch:                           Catch.               (line 107)
* scm_c_define:                          Top Level.           (line  42)
* scm_c_define <1>:                      Accessing Modules from C.
                                                              (line  97)
* scm_c_define_gsubr:                    Primitive Procedures.
                                                              (line  24)
* scm_c_define_module:                   Accessing Modules from C.
                                                              (line 126)
* scm_c_downcase:                        Characters.          (line 241)
* scm_c_eval_string:                     Fly Evaluation.      (line  62)
* scm_c_export:                          Accessing Modules from C.
                                                              (line 149)
* scm_c_hook_add:                        C Hooks.             (line  70)
* scm_c_hook_init:                       C Hooks.             (line  42)
* scm_c_hook_remove:                     C Hooks.             (line  76)
* scm_c_hook_run:                        C Hooks.             (line  86)
* scm_c_imag_part:                       Complex.             (line  38)
* scm_c_locale_stringn_to_number:        Conversion.          (line  26)
* scm_c_lookup:                          Accessing Modules from C.
                                                              (line  78)
* scm_c_magnitude:                       Complex.             (line  41)
* scm_c_make_bitvector:                  Bit Vectors.         (line  27)
* scm_c_make_bytevector:                 Bytevector Manipulation.
                                                              (line  11)
* scm_c_make_gsubr:                      Primitive Procedures.
                                                              (line  12)
* scm_c_make_polar:                      Complex.             (line  33)
* scm_c_make_rectangular:                Complex.             (line  32)
* scm_c_make_socket_address:             Network Socket Address.
                                                              (line  74)
* scm_c_make_string:                     String Constructors. (line  36)
* scm_c_make_struct:                     Structure Basics.    (line  43)
* scm_c_make_structv:                    Structure Basics.    (line  45)
* scm_c_make_vector:                     Vector Creation.     (line  40)
* scm_c_module_define:                   Accessing Modules from C.
                                                              (line 105)
* scm_c_module_lookup:                   Accessing Modules from C.
                                                              (line  86)
* scm_c_nvalues:                         Multiple Values.     (line  40)
* scm_c_port_for_each:                   Ports and File Descriptors.
                                                              (line 272)
* scm_c_primitive_load:                  Loading.             (line  41)
* scm_c_private_lookup:                  Accessing Modules from C.
                                                              (line  43)
* scm_c_private_ref:                     Accessing Modules from C.
                                                              (line  68)
* scm_c_private_variable:                Accessing Modules from C.
                                                              (line  32)
* scm_c_public_lookup:                   Accessing Modules from C.
                                                              (line  40)
* scm_c_public_ref:                      Accessing Modules from C.
                                                              (line  65)
* scm_c_public_variable:                 Accessing Modules from C.
                                                              (line  19)
* scm_c_read:                            Reading.             (line  40)
* scm_c_real_part:                       Complex.             (line  37)
* scm_c_resolve_module:                  Accessing Modules from C.
                                                              (line 138)
* scm_c_round:                           Arithmetic.          (line  74)
* scm_c_run_hook:                        Hook Reference.      (line  72)
* scm_c_string_length:                   String Selection.    (line  14)
* scm_c_string_ref:                      String Selection.    (line  22)
* scm_c_string_set_x:                    String Modification. (line  15)
* scm_c_substring:                       String Selection.    (line  61)
* scm_c_substring_copy:                  String Selection.    (line  64)
* scm_c_substring_read_only:             String Selection.    (line  66)
* scm_c_substring_shared:                String Selection.    (line  62)
* scm_c_symbol_length:                   Symbol Primitives.   (line 152)
* scm_c_titlecase:                       Characters.          (line 242)
* scm_c_truncate:                        Arithmetic.          (line  73)
* scm_c_upcase:                          Characters.          (line 240)
* scm_c_use_module:                      Accessing Modules from C.
                                                              (line 144)
* scm_c_values:                          Multiple Values.     (line  32)
* scm_c_value_ref:                       Multiple Values.     (line  44)
* scm_c_vector_length:                   Vector Accessors.    (line  14)
* scm_c_vector_ref:                      Vector Accessors.    (line  28)
* scm_c_vector_set_x:                    Vector Accessors.    (line  48)
* scm_c_with_continuation_barrier:       Continuation Barriers.
                                                              (line  23)
* scm_c_with_dynamic_state:              Fluids and Dynamic States.
                                                              (line 140)
* scm_c_with_fluid:                      Fluids and Dynamic States.
                                                              (line  92)
* scm_c_with_fluids:                     Fluids and Dynamic States.
                                                              (line  90)
* scm_c_with_throw_handler:              Throw Handlers.      (line  49)
* scm_c_write:                           Writing.             (line  42)
* scm_datum_to_random_state:             Random.              (line  68)
* SCM_DEFINE:                            Snarfing Macros.     (line  24)
* scm_define:                            Top Level.           (line  41)
* scm_define <1>:                        Accessing Modules from C.
                                                              (line 102)
* scm_defined_p:                         Binding Reflection.  (line  10)
* scm_delete:                            List Modification.   (line  30)
* scm_delete1_x:                         List Modification.   (line  64)
* scm_delete_file:                       File System.         (line 164)
* scm_delete_x:                          List Modification.   (line  44)
* scm_delq:                              List Modification.   (line  18)
* scm_delq1_x:                           List Modification.   (line  52)
* scm_delq_x:                            List Modification.   (line  42)
* scm_delv:                              List Modification.   (line  24)
* scm_delv1_x:                           List Modification.   (line  58)
* scm_delv_x:                            List Modification.   (line  43)
* scm_denominator:                       Reals and Rationals. (line 125)
* scm_difference:                        Arithmetic.          (line  18)
* scm_directory_stream_p:                File System.         (line 236)
* scm_dirname:                           File System.         (line 327)
* scm_display_application:               Frames.              (line  49)
* scm_display_backtrace:                 Stacks.              (line  26)
* scm_display_backtrace_with_highlights: Stacks.              (line  24)
* scm_display_error:                     Handling Errors.     (line  35)
* scm_divide:                            Arithmetic.          (line  29)
* scm_done_free:                         Memory Blocks.       (line 158)
* scm_done_malloc:                       Memory Blocks.       (line 158)
* scm_double_cell:                       Allocating Cells.    (line  26)
* scm_doubly_weak_hash_table_p:          Weak hash tables.    (line  23)
* scm_drain_input:                       Reading.             (line  83)
* scm_dup2:                              Ports and File Descriptors.
                                                              (line 256)
* scm_dup_to_fdes:                       Ports and File Descriptors.
                                                              (line 209)
* scm_dynamic_call:                      Foreign Functions.   (line  25)
* scm_dynamic_func:                      Foreign Functions.   (line  11)
* scm_dynamic_link:                      Foreign Libraries.   (line  38)
* scm_dynamic_object_p:                  Foreign Libraries.   (line  60)
* scm_dynamic_pointer:                   Foreign Variables.   (line  10)
* scm_dynamic_state_p:                   Fluids and Dynamic States.
                                                              (line 115)
* scm_dynamic_unlink:                    Foreign Libraries.   (line  64)
* scm_dynamic_wind:                      Dynamic Wind.        (line  70)
* scm_dynwind_begin:                     Dynamic Wind.        (line 127)
* scm_dynwind_block_asyncs:              System asyncs.       (line  60)
* scm_dynwind_critical_section:          Critical Sections.   (line  30)
* scm_dynwind_current_dynamic_state:     Fluids and Dynamic States.
                                                              (line 136)
* scm_dynwind_current_error_port:        Default Ports.       (line  58)
* scm_dynwind_current_input_port:        Default Ports.       (line  56)
* scm_dynwind_current_output_port:       Default Ports.       (line  57)
* scm_dynwind_end:                       Dynamic Wind.        (line 153)
* scm_dynwind_fluid:                     Fluids and Dynamic States.
                                                              (line 100)
* scm_dynwind_free:                      Dynamic Wind.        (line 190)
* scm_dynwind_free <1>:                  Memory Blocks.       (line 115)
* scm_dynwind_lock_mutex:                Mutexes and Condition Variables.
                                                              (line  83)
* scm_dynwind_rewind_handler:            Dynamic Wind.        (line 178)
* scm_dynwind_rewind_handler_with_scm:   Dynamic Wind.        (line 180)
* scm_dynwind_unblock_asyncs:            System asyncs.       (line  65)
* scm_dynwind_unwind_handler:            Dynamic Wind.        (line 166)
* scm_dynwind_unwind_handler_with_scm:   Dynamic Wind.        (line 168)
* scm_effective_version:                 Build Config.        (line  15)
* scm_end_of_char_set_p:                 Iterating Over Character Sets.
                                                              (line  33)
* scm_environ:                           Runtime Environment. (line  85)
* scm_eof_object:                        R6RS End-of-File.    (line  16)
* scm_eof_object_p:                      Reading.             (line  12)
* scm_eof_object_p <1>:                  R6RS End-of-File.    (line  10)
* SCM_EOF_VAL:                           Immediate objects.   (line  35)
* SCM_EOL:                               Immediate objects.   (line  31)
* scm_equal_p:                           Equality.            (line  92)
* scm_eqv_p:                             Equality.            (line  76)
* scm_eq_p:                              Equality.            (line  33)
* scm_error:                             Handling Errors.     (line  81)
* scm_error_scm:                         Error Reporting.     (line  15)
* scm_euclidean_divide:                  Arithmetic.          (line  81)
* scm_euclidean_quotient:                Arithmetic.          (line  82)
* scm_euclidean_remainder:               Arithmetic.          (line  83)
* scm_eval:                              Fly Evaluation.      (line  11)
* scm_eval_string:                       Fly Evaluation.      (line  57)
* scm_eval_string_in_module:             Fly Evaluation.      (line  58)
* scm_even_p:                            Integer Operations.  (line  11)
* scm_exact_integer_p:                   Integers.            (line  85)
* scm_exact_integer_sqrt:                Integer Operations.  (line  64)
* scm_exact_p:                           Exactness.           (line  20)
* scm_exact_to_inexact:                  Exactness.           (line  69)
* scm_execl:                             Processes.           (line 246)
* scm_execle:                            Processes.           (line 271)
* scm_execlp:                            Processes.           (line 261)
* scm_f32vector:                         SRFI-4 API.          (line  85)
* scm_f32vector_elements:                SRFI-4 API.          (line 273)
* scm_f32vector_length:                  SRFI-4 API.          (line 113)
* scm_f32vector_p:                       SRFI-4 API.          (line  29)
* scm_f32vector_ref:                     SRFI-4 API.          (line 139)
* scm_f32vector_set_x:                   SRFI-4 API.          (line 166)
* scm_f32vector_to_list:                 SRFI-4 API.          (line 193)
* scm_f32vector_writable_elements:       SRFI-4 API.          (line 301)
* scm_f64vector:                         SRFI-4 API.          (line  86)
* scm_f64vector_elements:                SRFI-4 API.          (line 275)
* scm_f64vector_length:                  SRFI-4 API.          (line 114)
* scm_f64vector_p:                       SRFI-4 API.          (line  30)
* scm_f64vector_ref:                     SRFI-4 API.          (line 140)
* scm_f64vector_set_x:                   SRFI-4 API.          (line 167)
* scm_f64vector_to_list:                 SRFI-4 API.          (line 194)
* scm_f64vector_writable_elements:       SRFI-4 API.          (line 303)
* scm_fcntl:                             Ports and File Descriptors.
                                                              (line 301)
* scm_fdes_to_ports:                     Ports and File Descriptors.
                                                              (line  83)
* scm_fdopen:                            Ports and File Descriptors.
                                                              (line  76)
* scm_fileno:                            Ports and File Descriptors.
                                                              (line  67)
* scm_file_encoding:                     Character Encoding of Source Files.
                                                              (line  65)
* scm_file_port_p:                       File Ports.          (line 187)
* scm_finite_p:                          Reals and Rationals. (line 108)
* scm_flock:                             Ports and File Descriptors.
                                                              (line 347)
* scm_floor:                             Arithmetic.          (line  66)
* scm_floor_divide:                      Arithmetic.          (line 107)
* scm_floor_quotient:                    Arithmetic.          (line 108)
* scm_floor_remainder:                   Arithmetic.          (line 109)
* scm_fluid_bound_p:                     Fluids and Dynamic States.
                                                              (line  61)
* scm_fluid_p:                           Fluids and Dynamic States.
                                                              (line  43)
* scm_fluid_ref:                         Fluids and Dynamic States.
                                                              (line  47)
* scm_fluid_set_x:                       Fluids and Dynamic States.
                                                              (line  53)
* scm_fluid_unset_x:                     Fluids and Dynamic States.
                                                              (line  57)
* scm_flush_all_ports:                   Writing.             (line  60)
* scm_force:                             Delayed Evaluation.  (line  19)
* scm_force_output:                      Writing.             (line  50)
* scm_fork:                              Processes.           (line 281)
* scm_frame_arguments:                   Frames.              (line  21)
* scm_frame_p:                           Frames.              (line   7)
* scm_frame_previous:                    Frames.              (line  11)
* scm_frame_procedure:                   Frames.              (line  16)
* scm_from_bool:                         Booleans.            (line  80)
* scm_from_char:                         Integers.            (line 177)
* scm_from_double:                       Reals and Rationals. (line 138)
* scm_from_int:                          Integers.            (line 182)
* scm_from_int16:                        Integers.            (line 193)
* scm_from_int32:                        Integers.            (line 195)
* scm_from_int64:                        Integers.            (line 197)
* scm_from_int8:                         Integers.            (line 191)
* scm_from_intmax:                       Integers.            (line 199)
* scm_from_latin1_keyword:               Keyword Procedures.  (line  34)
* scm_from_latin1_string:                Conversion to/from C.
                                                              (line 164)
* scm_from_latin1_stringn:               Conversion to/from C.
                                                              (line 172)
* scm_from_latin1_symbol:                Symbol Primitives.   (line 122)
* scm_from_locale_keyword:               Keyword Procedures.  (line  21)
* scm_from_locale_keywordn:              Keyword Procedures.  (line  22)
* scm_from_locale_string:                Conversion to/from C.
                                                              (line  37)
* scm_from_locale_stringn:               Conversion to/from C.
                                                              (line  38)
* scm_from_locale_symbol:                Symbol Primitives.   (line 128)
* scm_from_locale_symboln:               Symbol Primitives.   (line 129)
* scm_from_long:                         Integers.            (line 184)
* scm_from_long_long:                    Integers.            (line 186)
* scm_from_mpz:                          Integers.            (line 212)
* scm_from_pointer:                      Foreign Variables.   (line  70)
* scm_from_ptrdiff_t:                    Integers.            (line 190)
* scm_from_schar:                        Integers.            (line 178)
* scm_from_short:                        Integers.            (line 180)
* scm_from_signed_integer:               Integers.            (line 138)
* scm_from_size_t:                       Integers.            (line 188)
* scm_from_sockaddr:                     Network Socket Address.
                                                              (line  83)
* scm_from_ssize_t:                      Integers.            (line 189)
* scm_from_stringn:                      Conversion to/from C.
                                                              (line 149)
* scm_from_uchar:                        Integers.            (line 179)
* scm_from_uint:                         Integers.            (line 183)
* scm_from_uint16:                       Integers.            (line 194)
* scm_from_uint32:                       Integers.            (line 196)
* scm_from_uint64:                       Integers.            (line 198)
* scm_from_uint8:                        Integers.            (line 192)
* scm_from_uintmax:                      Integers.            (line 200)
* scm_from_ulong:                        Integers.            (line 185)
* scm_from_ulong_long:                   Integers.            (line 187)
* scm_from_unsigned_integer:             Integers.            (line 139)
* scm_from_ushort:                       Integers.            (line 181)
* scm_from_utf32_string:                 Conversion to/from C.
                                                              (line 166)
* scm_from_utf32_stringn:                Conversion to/from C.
                                                              (line 175)
* scm_from_utf8_keyword:                 Keyword Procedures.  (line  35)
* scm_from_utf8_string:                  Conversion to/from C.
                                                              (line 165)
* scm_from_utf8_stringn:                 Conversion to/from C.
                                                              (line 174)
* scm_from_utf8_symbol:                  Symbol Primitives.   (line 123)
* scm_fsync:                             Ports and File Descriptors.
                                                              (line 117)
* scm_ftell:                             Random Access.       (line  26)
* scm_gc:                                Garbage Collection Functions.
                                                              (line   7)
* scm_gcd:                               Integer Operations.  (line  41)
* scm_gc_calloc:                         Memory Blocks.       (line  77)
* scm_gc_free:                           Memory Blocks.       (line  91)
* scm_gc_live_object_stats:              Garbage Collection Functions.
                                                              (line  57)
* scm_gc_malloc:                         Memory Blocks.       (line  72)
* scm_gc_malloc_pointerless:             Memory Blocks.       (line  73)
* scm_gc_mark:                           Garbage Collection Functions.
                                                              (line  60)
* scm_gc_protect_object:                 Garbage Collection Functions.
                                                              (line  12)
* scm_gc_realloc:                        Memory Blocks.       (line  75)
* scm_gc_register_allocation:            Memory Blocks.       (line 102)
* scm_gc_stats:                          Garbage Collection Functions.
                                                              (line  52)
* scm_gc_unprotect_object:               Garbage Collection Functions.
                                                              (line  25)
* scm_gensym:                            Symbol Primitives.   (line 160)
* scm_geq_p:                             Comparison.          (line  31)
* scm_getaddrinfo:                       Network Databases.   (line  18)
* scm_getaffinity:                       Processes.           (line 337)
* scm_getcwd:                            Processes.           (line  12)
* scm_getegid:                           Processes.           (line  62)
* scm_getenv:                            Runtime Environment. (line  65)
* scm_geteuid:                           Processes.           (line  55)
* scm_getgid:                            Processes.           (line  51)
* scm_getgrgid:                          User Information.    (line  97)
* scm_getgroups:                         Processes.           (line  37)
* scm_gethost:                           Network Databases.   (line 187)
* scm_gethostname:                       System Identification.
                                                              (line  31)
* scm_getitimer:                         Signals.             (line 139)
* scm_getlogin:                          User Information.    (line 106)
* scm_getnet:                            Network Databases.   (line 251)
* scm_getpass:                           Encryption.          (line  22)
* scm_getpeername:                       Network Sockets and Communication.
                                                              (line 213)
* scm_getpgrp:                           Processes.           (line 103)
* scm_getpid:                            Processes.           (line  33)
* scm_getppid:                           Processes.           (line  42)
* scm_getpriority:                       Processes.           (line 325)
* scm_getproto:                          Network Databases.   (line 298)
* scm_getpwuid:                          User Information.    (line  54)
* scm_getserv:                           Network Databases.   (line 348)
* scm_getsid:                            Processes.           (line 122)
* scm_getsockname:                       Network Sockets and Communication.
                                                              (line 203)
* scm_getsockopt:                        Network Sockets and Communication.
                                                              (line  59)
* scm_gettext:                           Gettext Support.     (line  20)
* scm_gettimeofday:                      Time.                (line  12)
* scm_getuid:                            Processes.           (line  47)
* scm_get_bytevector_all:                R6RS Binary Input.   (line 102)
* scm_get_bytevector_n:                  R6RS Binary Input.   (line  83)
* scm_get_bytevector_n_x:                R6RS Binary Input.   (line  89)
* scm_get_bytevector_some:               R6RS Binary Input.   (line  95)
* scm_get_internal_real_time:            Time.                (line 164)
* scm_get_internal_run_time:             Time.                (line 168)
* scm_get_output_string:                 String Ports.        (line  77)
* scm_get_print_state:                   Writing.             (line  13)
* scm_get_u8:                            R6RS Binary Input.   (line  73)
* SCM_GLOBAL_KEYWORD:                    Snarfing Macros.     (line  63)
* SCM_GLOBAL_SYMBOL:                     Snarfing Macros.     (line  45)
* SCM_GLOBAL_VARIABLE:                   Snarfing Macros.     (line  81)
* SCM_GLOBAL_VARIABLE_INIT:              Snarfing Macros.     (line  87)
* scm_gmtime:                            Time.                (line  73)
* scm_gr_p:                              Comparison.          (line  22)
* scm_hash:                              Hash Table Reference.
                                                              (line 127)
* scm_hashq:                             Hash Table Reference.
                                                              (line 128)
* scm_hashq_create_handle_x:             Hash Table Reference.
                                                              (line 164)
* scm_hashq_get_handle:                  Hash Table Reference.
                                                              (line 153)
* scm_hashq_ref:                         Hash Table Reference.
                                                              (line  94)
* scm_hashq_remove_x:                    Hash Table Reference.
                                                              (line 118)
* scm_hashq_set_x:                       Hash Table Reference.
                                                              (line 106)
* scm_hashv:                             Hash Table Reference.
                                                              (line 129)
* scm_hashv_create_handle_x:             Hash Table Reference.
                                                              (line 165)
* scm_hashv_get_handle:                  Hash Table Reference.
                                                              (line 154)
* scm_hashv_ref:                         Hash Table Reference.
                                                              (line  95)
* scm_hashv_remove_x:                    Hash Table Reference.
                                                              (line 119)
* scm_hashv_set_x:                       Hash Table Reference.
                                                              (line 107)
* scm_hashx_create_handle_x:             Hash Table Reference.
                                                              (line 166)
* scm_hashx_get_handle:                  Hash Table Reference.
                                                              (line 155)
* scm_hashx_ref:                         Hash Table Reference.
                                                              (line  96)
* scm_hashx_remove_x:                    Hash Table Reference.
                                                              (line 120)
* scm_hashx_set_x:                       Hash Table Reference.
                                                              (line 108)
* scm_hash_clear_x:                      Hash Table Reference.
                                                              (line  86)
* scm_hash_count:                        Hash Table Reference.
                                                              (line 220)
* scm_hash_create_handle_x:              Hash Table Reference.
                                                              (line 163)
* scm_hash_fold:                         Hash Table Reference.
                                                              (line 201)
* scm_hash_for_each:                     Hash Table Reference.
                                                              (line 175)
* scm_hash_for_each_handle:              Hash Table Reference.
                                                              (line 192)
* scm_hash_get_handle:                   Hash Table Reference.
                                                              (line 152)
* scm_hash_map_to_list:                  Hash Table Reference.
                                                              (line 174)
* scm_hash_ref:                          Hash Table Reference.
                                                              (line  93)
* scm_hash_remove_x:                     Hash Table Reference.
                                                              (line 117)
* scm_hash_set_x:                        Hash Table Reference.
                                                              (line 105)
* scm_hash_table_p:                      Hash Table Reference.
                                                              (line  82)
* SCM_HOOKP:                             Hook Reference.      (line  79)
* scm_hook_empty_p:                      Hook Reference.      (line  39)
* scm_hook_p:                            Hook Reference.      (line  35)
* scm_hook_to_list:                      Hook Reference.      (line  59)
* scm_imag_part:                         Complex.             (line  20)
* SCM_IMP:                               Immediate objects.   (line  13)
* scm_inet_aton:                         Network Address Conversion.
                                                              (line  33)
* scm_inet_makeaddr:                     Network Address Conversion.
                                                              (line  65)
* scm_inet_netof:                        Network Address Conversion.
                                                              (line  51)
* scm_inet_ntoa:                         Network Address Conversion.
                                                              (line  42)
* scm_inet_ntop:                         Network Address Conversion.
                                                              (line  78)
* scm_inet_pton:                         Network Address Conversion.
                                                              (line  87)
* scm_inexact_p:                         Exactness.           (line  40)
* scm_inexact_to_exact:                  Exactness.           (line  48)
* scm_inf:                               Reals and Rationals. (line 117)
* scm_inf_p:                             Reals and Rationals. (line  99)
* scm_init_guile:                        Initialization.      (line  52)
* scm_input_port_p:                      Ports.               (line  69)
* scm_integer_expt:                      Bitwise Operations.  (line 129)
* scm_integer_length:                    Bitwise Operations.  (line 114)
* scm_integer_p:                         Integers.            (line  65)
* scm_integer_to_char:                   Characters.          (line 216)
* scm_interaction_environment:           Fly Evaluation.      (line  20)
* scm_internal_catch:                    Catch.               (line 111)
* scm_isatty_p:                          Terminals and Ptys.  (line   7)
* scm_is_array:                          Array Procedures.    (line  33)
* scm_is_bitvector:                      Bit Vectors.         (line  19)
* scm_is_bool:                           Booleans.            (line  77)
* scm_is_bytevector:                     Bytevector Manipulation.
                                                              (line  19)
* scm_is_complex:                        Complex Numbers.     (line  43)
* scm_is_dynamic_state:                  Fluids and Dynamic States.
                                                              (line 119)
* scm_is_eq:                             Equality.            (line  66)
* scm_is_exact:                          Exactness.           (line  32)
* scm_is_exact_integer:                  Integers.            (line  94)
* scm_is_false:                          Booleans.            (line  74)
* scm_is_inexact:                        Exactness.           (line  43)
* scm_is_integer:                        Integers.            (line  81)
* scm_is_keyword:                        Keyword Procedures.  (line  18)
* scm_is_null:                           List Predicates.     (line  24)
* scm_is_number:                         Numerical Tower.     (line  63)
* scm_is_pair:                           Pairs.               (line  55)
* scm_is_rational:                       Reals and Rationals. (line 129)
* scm_is_real:                           Reals and Rationals. (line 128)
* scm_is_signed_integer:                 Integers.            (line 117)
* scm_is_simple_vector:                  Vector Accessing from C.
                                                              (line  17)
* scm_is_string:                         String Predicates.   (line  13)
* scm_is_symbol:                         Symbol Primitives.   (line  13)
* scm_is_true:                           Booleans.            (line  71)
* scm_is_typed_array:                    Array Procedures.    (line  36)
* scm_is_unsigned_integer:               Integers.            (line 119)
* scm_is_vector:                         Vector Creation.     (line  50)
* scm_join_thread:                       Threads.             (line  55)
* scm_join_thread_timed:                 Threads.             (line  56)
* SCM_KEYWORD:                           Snarfing Macros.     (line  62)
* scm_keyword_p:                         Keyword Procedures.  (line   7)
* scm_keyword_to_symbol:                 Keyword Procedures.  (line  11)
* scm_kill:                              Signals.             (line  15)
* scm_last_pair:                         List Selection.      (line  14)
* scm_lcm:                               Integer Operations.  (line  49)
* scm_length:                            List Selection.      (line  10)
* scm_leq_p:                             Comparison.          (line  26)
* scm_less_p:                            Comparison.          (line  18)
* scm_link:                              File System.         (line 204)
* scm_listen:                            Network Sockets and Communication.
                                                              (line 177)
* scm_list_1:                            List Constructors.   (line  12)
* scm_list_2:                            List Constructors.   (line  13)
* scm_list_3:                            List Constructors.   (line  14)
* scm_list_4:                            List Constructors.   (line  15)
* scm_list_5:                            List Constructors.   (line  16)
* scm_list_cdr_set_x:                    List Modification.   (line  14)
* scm_list_copy:                         List Constructors.   (line  33)
* scm_list_head:                         List Selection.      (line  33)
* scm_list_n:                            List Constructors.   (line  17)
* scm_list_p:                            List Predicates.     (line  12)
* scm_list_ref:                          List Selection.      (line  19)
* scm_list_set_x:                        List Modification.   (line  10)
* scm_list_tail:                         List Selection.      (line  24)
* scm_list_to_bitvector:                 Bit Vectors.         (line  64)
* scm_list_to_c32vector:                 SRFI-4 API.          (line 221)
* scm_list_to_c64vector:                 SRFI-4 API.          (line 222)
* scm_list_to_char_set:                  Creating Character Sets.
                                                              (line  18)
* scm_list_to_char_set_x:                Creating Character Sets.
                                                              (line  24)
* scm_list_to_f32vector:                 SRFI-4 API.          (line 219)
* scm_list_to_f64vector:                 SRFI-4 API.          (line 220)
* scm_list_to_s16vector:                 SRFI-4 API.          (line 214)
* scm_list_to_s32vector:                 SRFI-4 API.          (line 216)
* scm_list_to_s64vector:                 SRFI-4 API.          (line 218)
* scm_list_to_s8vector:                  SRFI-4 API.          (line 212)
* scm_list_to_typed_array:               Array Procedures.    (line  74)
* scm_list_to_u16vector:                 SRFI-4 API.          (line 213)
* scm_list_to_u32vector:                 SRFI-4 API.          (line 215)
* scm_list_to_u64vector:                 SRFI-4 API.          (line 217)
* scm_list_to_u8vector:                  SRFI-4 API.          (line 211)
* scm_lnaof:                             Network Address Conversion.
                                                              (line  58)
* scm_load_extension:                    Foreign Functions.   (line  56)
* scm_load_objcode:                      Bytecode and Objcode.
                                                              (line  54)
* scm_locale_p:                          i18n Introduction.   (line  69)
* scm_locale_string_to_inexact:          Number Input and Output.
                                                              (line  26)
* scm_locale_string_to_integer:          Number Input and Output.
                                                              (line  13)
* scm_localtime:                         Time.                (line  65)
* scm_local_eval:                        Local Evaluation.    (line  17)
* scm_lock_mutex:                        Mutexes and Condition Variables.
                                                              (line  53)
* scm_lock_mutex_timed:                  Mutexes and Condition Variables.
                                                              (line  54)
* scm_logand:                            Bitwise Operations.  (line  12)
* scm_logbit_p:                          Bitwise Operations.  (line  57)
* scm_logcount:                          Bitwise Operations.  (line 100)
* scm_logior:                            Bitwise Operations.  (line  20)
* scm_lognot:                            Bitwise Operations.  (line  38)
* scm_logtest:                           Bitwise Operations.  (line  48)
* scm_lookahead_u8:                      R6RS Binary Input.   (line  78)
* scm_lookup:                            Accessing Modules from C.
                                                              (line  83)
* scm_loxor:                             Bitwise Operations.  (line  28)
* scm_lstat:                             File System.         (line 115)
* scm_macro_binding:                     Internal Macros.     (line  32)
* scm_macro_name:                        Internal Macros.     (line  28)
* scm_macro_p:                           Internal Macros.     (line  11)
* scm_macro_transformer:                 Internal Macros.     (line  36)
* scm_macro_type:                        Internal Macros.     (line  23)
* scm_magnitude:                         Complex.             (line  24)
* scm_major_version:                     Build Config.        (line  16)
* scm_make_arbiter:                      Arbiters.            (line  16)
* scm_make_array:                        Array Procedures.    (line  40)
* scm_make_bitvector:                    Bit Vectors.         (line  23)
* scm_make_bytevector:                   Bytevector Manipulation.
                                                              (line  10)
* scm_make_c32vector:                    SRFI-4 API.          (line  58)
* scm_make_c64vector:                    SRFI-4 API.          (line  59)
* scm_make_condition_variable:           Mutexes and Condition Variables.
                                                              (line 132)
* scm_make_custom_binary_input_port:     R6RS Binary Input.   (line  18)
* scm_make_custom_binary_output_port:    R6RS Binary Output.  (line  27)
* scm_make_doubly_weak_hash_table:       Weak hash tables.    (line  11)
* scm_make_dynamic_state:                Fluids and Dynamic States.
                                                              (line 110)
* scm_make_f32vector:                    SRFI-4 API.          (line  56)
* scm_make_f64vector:                    SRFI-4 API.          (line  57)
* scm_make_fluid:                        Fluids and Dynamic States.
                                                              (line  26)
* scm_make_fluid_with_default:           Fluids and Dynamic States.
                                                              (line  27)
* scm_make_guardian:                     Guardians.           (line  16)
* scm_make_hook:                         Hook Reference.      (line  29)
* scm_make_locale:                       i18n Introduction.   (line  39)
* scm_make_mutex:                        Mutexes and Condition Variables.
                                                              (line  25)
* scm_make_mutex_with_flags:             Mutexes and Condition Variables.
                                                              (line  26)
* scm_make_polar:                        Complex.             (line  12)
* scm_make_port_type:                    Port Implementation. (line  12)
* scm_make_procedure_with_setter:        Procedures with Setters.
                                                              (line  44)
* scm_make_program:                      Bytecode and Objcode.
                                                              (line  74)
* scm_make_rectangular:                  Complex.             (line   7)
* scm_make_recursive_mutex:              Mutexes and Condition Variables.
                                                              (line  47)
* scm_make_regexp:                       Regexp Functions.    (line  52)
* scm_make_s16vector:                    SRFI-4 API.          (line  51)
* scm_make_s32vector:                    SRFI-4 API.          (line  53)
* scm_make_s64vector:                    SRFI-4 API.          (line  55)
* scm_make_s8vector:                     SRFI-4 API.          (line  49)
* scm_make_shared_array:                 Shared Arrays.       (line   7)
* scm_make_smob_type:                    Smobs.               (line  10)
* scm_make_socket_address:               Network Socket Address.
                                                              (line  16)
* scm_make_soft_port:                    Soft Ports.          (line  10)
* scm_make_stack:                        Stack Capture.       (line  18)
* scm_make_string:                       String Constructors. (line  31)
* scm_make_struct:                       Structure Basics.    (line  41)
* scm_make_struct_layout:                Meta-Vtables.        (line  86)
* scm_make_symbol:                       Symbol Uninterned.   (line  47)
* scm_make_typed_array:                  Array Procedures.    (line  44)
* scm_make_u16vector:                    SRFI-4 API.          (line  50)
* scm_make_u32vector:                    SRFI-4 API.          (line  52)
* scm_make_u64vector:                    SRFI-4 API.          (line  54)
* scm_make_u8vector:                     SRFI-4 API.          (line  48)
* scm_make_unbound_fluid:                Fluids and Dynamic States.
                                                              (line  38)
* scm_make_undefined_variable:           Variables.           (line  39)
* scm_make_variable:                     Variables.           (line  43)
* scm_make_vector:                       Vector Creation.     (line  35)
* scm_make_weak_key_hash_table:          Weak hash tables.    (line   9)
* scm_make_weak_value_hash_table:        Weak hash tables.    (line  10)
* scm_make_weak_vector:                  Weak vectors.        (line   7)
* scm_malloc:                            Memory Blocks.       (line  41)
* scm_map:                               List Mapping.        (line  15)
* scm_markcdr:                           Smobs.               (line 166)
* scm_max:                               Arithmetic.          (line  49)
* scm_member:                            List Searching.      (line  27)
* scm_memory_error:                      Handling Errors.     (line 102)
* scm_memq:                              List Searching.      (line  13)
* scm_memv:                              List Searching.      (line  20)
* scm_merge:                             Sorting.             (line  16)
* scm_merge_x:                           Sorting.             (line  24)
* scm_micro_version:                     Build Config.        (line  18)
* scm_min:                               Arithmetic.          (line  53)
* scm_minor_version:                     Build Config.        (line  17)
* scm_misc_error:                        Handling Errors.     (line 103)
* scm_mkdir:                             File System.         (line 215)
* scm_mknod:                             File System.         (line 271)
* scm_mkstemp:                           File System.         (line 301)
* scm_mktime:                            Time.                (line  79)
* scm_module_define:                     Accessing Modules from C.
                                                              (line 107)
* scm_module_ensure_local_variable:      Accessing Modules from C.
                                                              (line 116)
* scm_module_lookup:                     Accessing Modules from C.
                                                              (line  87)
* scm_module_reverse_lookup:             Accessing Modules from C.
                                                              (line 122)
* scm_module_variable:                   Accessing Modules from C.
                                                              (line  91)
* scm_modulo:                            Integer Operations.  (line  29)
* scm_modulo_expt:                       Integer Operations.  (line  57)
* scm_must_calloc:                       Memory Blocks.       (line 137)
* scm_must_free:                         Memory Blocks.       (line 137)
* scm_must_malloc:                       Memory Blocks.       (line 137)
* scm_must_realloc:                      Memory Blocks.       (line 137)
* scm_mutex_level:                       Mutexes and Condition Variables.
                                                              (line 121)
* scm_mutex_locked_p:                    Mutexes and Condition Variables.
                                                              (line 127)
* scm_mutex_owner:                       Mutexes and Condition Variables.
                                                              (line 115)
* scm_mutex_p:                           Mutexes and Condition Variables.
                                                              (line  43)
* scm_nan:                               Reals and Rationals. (line 113)
* scm_nan_p:                             Reals and Rationals. (line 104)
* scm_native_endianness:                 Bytevector Endianness.
                                                              (line  18)
* scm_nconc2last:                        Fly Evaluation.      (line 112)
* scm_negative_p:                        Comparison.          (line  44)
* scm_newline:                           Writing.             (line  18)
* scm_new_double_smob:                   Smobs.               (line 110)
* scm_new_smob:                          Smobs.               (line 109)
* scm_ngettext:                          Gettext Support.     (line  45)
* scm_nice:                              Processes.           (line 305)
* scm_not:                               Booleans.            (line  58)
* scm_null_p:                            List Predicates.     (line  21)
* scm_number_p:                          Numerical Tower.     (line  48)
* scm_number_to_string:                  Conversion.          (line  12)
* scm_numerator:                         Reals and Rationals. (line 121)
* scm_num_eq_p:                          Comparison.          (line  14)
* scm_num_overflow:                      Handling Errors.     (line  95)
* scm_objcode_p:                         Bytecode and Objcode.
                                                              (line  45)
* scm_objcode_to_bytecode:               Bytecode and Objcode.
                                                              (line  67)
* scm_object_properties:                 Object Properties.   (line  58)
* scm_object_property:                   Object Properties.   (line  66)
* scm_object_to_string:                  General Conversion.  (line  19)
* scm_odd_p:                             Integer Operations.  (line   7)
* scm_oneminus:                          Arithmetic.          (line  38)
* scm_oneplus:                           Arithmetic.          (line  34)
* scm_open:                              Ports and File Descriptors.
                                                              (line 124)
* scm_opendir:                           File System.         (line 227)
* scm_open_bytevector_input_port:        R6RS Binary Input.   (line  10)
* scm_open_bytevector_output_port:       R6RS Binary Output.  (line   9)
* scm_open_fdes:                         Ports and File Descriptors.
                                                              (line 148)
* scm_open_file:                         File Ports.          (line  18)
* scm_open_file_with_encoding:           File Ports.          (line  16)
* scm_open_input_string:                 String Ports.        (line  63)
* scm_open_output_string:                String Ports.        (line  70)
* scm_output_port_p:                     Ports.               (line  74)
* scm_out_of_range:                      Handling Errors.     (line  96)
* SCM_PACK:                              The SCM Type.        (line  32)
* scm_pair_p:                            Pairs.               (line  52)
* scm_parse_path:                        Load Paths.          (line 109)
* scm_parse_path_with_ellipsis:          Load Paths.          (line 115)
* scm_pause:                             Signals.             (line 114)
* scm_peek_char:                         Reading.             (line  49)
* scm_permanent_object:                  Garbage Collection Functions.
                                                              (line  31)
* scm_pipe:                              Ports and File Descriptors.
                                                              (line 180)
* scm_pointer_address:                   Foreign Variables.   (line  34)
* scm_pointer_to_bytevector:             Void Pointers and Byte Access.
                                                              (line  15)
* scm_pointer_to_procedure:              Dynamic FFI.         (line  10)
* scm_port_closed_p:                     Closing.             (line  26)
* scm_port_column:                       Reading.             (line  99)
* scm_port_conversion_strategy:          Ports.               (line 121)
* scm_port_encoding:                     Ports.               (line 100)
* scm_port_filename:                     File Ports.          (line 172)
* scm_port_for_each:                     Ports and File Descriptors.
                                                              (line 271)
* scm_port_line:                         Reading.             (line 100)
* scm_port_mode:                         File Ports.          (line 165)
* scm_port_p:                            Ports.               (line  79)
* scm_port_revealed:                     Ports and File Descriptors.
                                                              (line  58)
* scm_port_with_print_state:             Writing.             (line  23)
* scm_positive_p:                        Comparison.          (line  40)
* scm_primitive_eval:                    Fly Evaluation.      (line 123)
* scm_primitive_exit:                    Processes.           (line 225)
* scm_primitive_load:                    Loading.             (line  33)
* scm_primitive_load_path:               Load Paths.          (line  42)
* scm_primitive_move_to_fdes:            Ports and File Descriptors.
                                                              (line  98)
* scm_primitive__exit:                   Processes.           (line 226)
* scm_private_lookup:                    Accessing Modules from C.
                                                              (line  42)
* scm_private_ref:                       Accessing Modules from C.
                                                              (line  67)
* scm_private_variable:                  Accessing Modules from C.
                                                              (line  31)
* scm_procedure:                         Procedures with Setters.
                                                              (line  54)
* scm_procedure_documentation:           Procedure Properties.
                                                              (line  59)
* scm_procedure_name:                    Procedure Properties.
                                                              (line  31)
* scm_procedure_p:                       Procedure Properties.
                                                              (line  18)
* scm_procedure_properties:              Procedure Properties.
                                                              (line  40)
* scm_procedure_property:                Procedure Properties.
                                                              (line  44)
* scm_procedure_source:                  Procedure Properties.
                                                              (line  35)
* scm_procedure_to_pointer:              Dynamic FFI.         (line 106)
* scm_procedure_with_setter_p:           Procedures with Setters.
                                                              (line  49)
* scm_product:                           Arithmetic.          (line  24)
* scm_program_arguments:                 Runtime Environment. (line   9)
* scm_program_arities:                   Compiled Procedures. (line 108)
* scm_program_free_variables:            Compiled Procedures. (line  54)
* scm_program_meta:                      Compiled Procedures. (line  67)
* scm_program_module:                    Compiled Procedures. (line  48)
* scm_program_objcode:                   Compiled Procedures. (line  38)
* scm_program_objects:                   Compiled Procedures. (line  43)
* scm_program_p:                         Compiled Procedures. (line  34)
* scm_promise_p:                         Delayed Evaluation.  (line  15)
* SCM_PTAB_ENTRY:                        C Port Interface.    (line  11)
* scm_pthread_cond_timedwait:            Blocking.            (line  41)
* scm_pthread_cond_wait:                 Blocking.            (line  39)
* scm_pthread_mutex_lock:                Blocking.            (line  35)
* SCM_PTOBNUM:                           C Port Interface.    (line  11)
* scm_public_lookup:                     Accessing Modules from C.
                                                              (line  39)
* scm_public_ref:                        Accessing Modules from C.
                                                              (line  64)
* scm_public_variable:                   Accessing Modules from C.
                                                              (line  18)
* scm_putenv:                            Runtime Environment. (line  95)
* scm_put_bytevector:                    R6RS Binary Output.  (line  49)
* scm_put_u8:                            R6RS Binary Output.  (line  44)
* scm_quotient:                          Integer Operations.  (line  16)
* scm_raise:                             Signals.             (line  44)
* scm_random:                            Random.              (line  19)
* scm_random_exp:                        Random.              (line  27)
* scm_random_hollow_sphere_x:            Random.              (line  33)
* scm_random_normal:                     Random.              (line  40)
* scm_random_normal_vector_x:            Random.              (line  47)
* scm_random_solid_sphere_x:             Random.              (line  53)
* scm_random_state_from_platform:        Random.              (line  78)
* scm_random_state_to_datum:             Random.              (line  73)
* scm_random_uniform:                    Random.              (line  60)
* scm_rationalize:                       Reals and Rationals. (line  87)
* scm_rational_p:                        Reals and Rationals. (line  80)
* scm_read:                              Scheme Read.         (line   7)
* scm_readdir:                           File System.         (line 241)
* scm_readlink:                          File System.         (line 121)
* scm_read_char:                         Reading.             (line  31)
* scm_read_delimited_x:                  Line/Delimited.      (line 104)
* scm_read_hash_extend:                  Reader Extensions.   (line   7)
* scm_read_line:                         Line/Delimited.      (line 121)
* scm_read_string_x_partial:             Block Reading and Writing.
                                                              (line  15)
* scm_realloc:                           Memory Blocks.       (line  59)
* scm_real_p:                            Reals and Rationals. (line  73)
* scm_real_part:                         Complex.             (line  16)
* scm_recv:                              Network Sockets and Communication.
                                                              (line 221)
* scm_recvfrom:                          Network Sockets and Communication.
                                                              (line 250)
* scm_redirect_port:                     Ports and File Descriptors.
                                                              (line 241)
* scm_regexp_exec:                       Regexp Functions.    (line  91)
* scm_regexp_p:                          Regexp Functions.    (line 130)
* scm_release_arbiter:                   Arbiters.            (line  27)
* scm_remainder:                         Integer Operations.  (line  17)
* scm_remember_upto_here_1:              Garbage Collection Functions.
                                                              (line  40)
* scm_remember_upto_here_2:              Garbage Collection Functions.
                                                              (line  41)
* scm_remove_hook_x:                     Hook Reference.      (line  49)
* scm_rename:                            File System.         (line 199)
* scm_reset_hook_x:                      Hook Reference.      (line  54)
* scm_resolve_module:                    Module System Reflection.
                                                              (line  39)
* scm_restore_signals:                   Signals.             (line  98)
* scm_restricted_vector_sort_x:          Sorting.             (line  87)
* scm_reverse:                           Append/Reverse.      (line  42)
* scm_reverse_list_to_string:            String Constructors. (line  24)
* scm_reverse_x:                         Append/Reverse.      (line  43)
* scm_rewinddir:                         File System.         (line 247)
* scm_rmdir:                             File System.         (line 222)
* scm_round_ash:                         Bitwise Operations.  (line  83)
* scm_round_divide:                      Arithmetic.          (line 213)
* scm_round_number:                      Arithmetic.          (line  61)
* scm_round_quotient:                    Arithmetic.          (line 214)
* scm_round_remainder:                   Arithmetic.          (line 215)
* scm_run_asyncs:                        User asyncs.         (line  23)
* scm_run_hook:                          Hook Reference.      (line  63)
* scm_s16vector:                         SRFI-4 API.          (line  80)
* scm_s16vector_elements:                SRFI-4 API.          (line 263)
* scm_s16vector_length:                  SRFI-4 API.          (line 108)
* scm_s16vector_p:                       SRFI-4 API.          (line  24)
* scm_s16vector_ref:                     SRFI-4 API.          (line 134)
* scm_s16vector_set_x:                   SRFI-4 API.          (line 161)
* scm_s16vector_to_list:                 SRFI-4 API.          (line 188)
* scm_s16vector_writable_elements:       SRFI-4 API.          (line 291)
* scm_s32vector:                         SRFI-4 API.          (line  82)
* scm_s32vector_elements:                SRFI-4 API.          (line 267)
* scm_s32vector_length:                  SRFI-4 API.          (line 110)
* scm_s32vector_p:                       SRFI-4 API.          (line  26)
* scm_s32vector_ref:                     SRFI-4 API.          (line 136)
* scm_s32vector_set_x:                   SRFI-4 API.          (line 163)
* scm_s32vector_to_list:                 SRFI-4 API.          (line 190)
* scm_s32vector_writable_elements:       SRFI-4 API.          (line 295)
* scm_s64vector:                         SRFI-4 API.          (line  84)
* scm_s64vector_elements:                SRFI-4 API.          (line 271)
* scm_s64vector_length:                  SRFI-4 API.          (line 112)
* scm_s64vector_p:                       SRFI-4 API.          (line  28)
* scm_s64vector_ref:                     SRFI-4 API.          (line 138)
* scm_s64vector_set_x:                   SRFI-4 API.          (line 165)
* scm_s64vector_to_list:                 SRFI-4 API.          (line 192)
* scm_s64vector_writable_elements:       SRFI-4 API.          (line 299)
* scm_s8vector:                          SRFI-4 API.          (line  78)
* scm_s8vector_elements:                 SRFI-4 API.          (line 259)
* scm_s8vector_length:                   SRFI-4 API.          (line 106)
* scm_s8vector_p:                        SRFI-4 API.          (line  22)
* scm_s8vector_ref:                      SRFI-4 API.          (line 132)
* scm_s8vector_set_x:                    SRFI-4 API.          (line 159)
* scm_s8vector_to_list:                  SRFI-4 API.          (line 186)
* scm_s8vector_writable_elements:        SRFI-4 API.          (line 287)
* scm_search_path:                       Load Paths.          (line 123)
* scm_seed_to_random_state:              Random.              (line  64)
* scm_seek:                              Random Access.       (line   7)
* scm_select:                            Ports and File Descriptors.
                                                              (line 371)
* scm_send:                              Network Sockets and Communication.
                                                              (line 238)
* scm_sendfile:                          File System.         (line 173)
* scm_sendto:                            Network Sockets and Communication.
                                                              (line 282)
* scm_setaffinity:                       Processes.           (line 348)
* scm_setegid:                           Processes.           (line  96)
* scm_seteuid:                           Processes.           (line  89)
* scm_setgid:                            Processes.           (line  83)
* scm_setgrent:                          User Information.    (line  91)
* scm_setgroups:                         Processes.           (line  69)
* scm_sethost:                           Network Databases.   (line 226)
* scm_sethostname:                       System Identification.
                                                              (line  35)
* scm_setitimer:                         Signals.             (line 140)
* scm_setlocale:                         Locales.             (line   7)
* scm_setnet:                            Network Databases.   (line 276)
* scm_setpgid:                           Processes.           (line 108)
* scm_setpriority:                       Processes.           (line 311)
* scm_setproto:                          Network Databases.   (line 323)
* scm_setpwent:                          User Information.    (line  48)
* scm_setserv:                           Network Databases.   (line 384)
* scm_setsid:                            Processes.           (line 115)
* scm_setsockopt:                        Network Sockets and Communication.
                                                              (line  60)
* scm_setuid:                            Processes.           (line  77)
* scm_setvbuf:                           Ports and File Descriptors.
                                                              (line 286)
* scm_set_car_x:                         Pairs.               (line 152)
* scm_set_cdr_x:                         Pairs.               (line 157)
* SCM_SET_CELL_OBJECT:                   Accessing Cell Entries.
                                                              (line  47)
* SCM_SET_CELL_TYPE:                     Heap Cell Type Information.
                                                              (line  17)
* SCM_SET_CELL_WORD:                     Accessing Cell Entries.
                                                              (line  33)
* scm_set_current_dynamic_state:         Fluids and Dynamic States.
                                                              (line 128)
* scm_set_current_error_port:            Default Ports.       (line  51)
* scm_set_current_input_port:            Default Ports.       (line  49)
* scm_set_current_module:                Module System Reflection.
                                                              (line  22)
* scm_set_current_output_port:           Default Ports.       (line  50)
* scm_set_object_properties_x:           Object Properties.   (line  62)
* scm_set_object_property_x:             Object Properties.   (line  70)
* scm_set_port_close:                    Port Implementation. (line  64)
* scm_set_port_column_x:                 Reading.             (line 112)
* scm_set_port_conversion_strategy_x:    Ports.               (line 106)
* scm_set_port_encoding_x:               Ports.               (line  84)
* scm_set_port_end_input:                Port Implementation. (line  84)
* scm_set_port_equalp:                   Port Implementation. (line  57)
* scm_set_port_filename_x:               File Ports.          (line 180)
* scm_set_port_flush:                    Port Implementation. (line  76)
* scm_set_port_free:                     Port Implementation. (line  41)
* scm_set_port_input_waiting:            Port Implementation. (line  97)
* scm_set_port_line_x:                   Reading.             (line 113)
* scm_set_port_mark:                     Port Implementation. (line  34)
* scm_set_port_print:                    Port Implementation. (line  49)
* scm_set_port_revealed_x:               Ports and File Descriptors.
                                                              (line  62)
* scm_set_port_seek:                     Port Implementation. (line 119)
* scm_set_port_truncate:                 Port Implementation. (line 127)
* scm_set_procedure_properties_x:        Procedure Properties.
                                                              (line  48)
* scm_set_procedure_property_x:          Procedure Properties.
                                                              (line  52)
* scm_set_program_arguments:             Runtime Environment. (line  36)
* scm_set_program_arguments_scm:         Runtime Environment. (line  10)
* SCM_SET_SMOB_DATA:                     Smobs.               (line 137)
* SCM_SET_SMOB_DATA_2:                   Smobs.               (line 138)
* SCM_SET_SMOB_DATA_3:                   Smobs.               (line 139)
* scm_set_smob_equalp:                   Smobs.               (line  90)
* SCM_SET_SMOB_FLAGS:                    Smobs.               (line 126)
* scm_set_smob_free:                     Smobs.               (line  30)
* scm_set_smob_mark:                     Smobs.               (line  53)
* SCM_SET_SMOB_OBJECT:                   Smobs.               (line 151)
* SCM_SET_SMOB_OBJECT_2:                 Smobs.               (line 152)
* SCM_SET_SMOB_OBJECT_3:                 Smobs.               (line 153)
* scm_set_smob_print:                    Smobs.               (line  74)
* scm_set_source_properties_x:           Source Properties.   (line  45)
* scm_set_source_property_x:             Source Properties.   (line  50)
* scm_set_struct_vtable_name_x:          Vtable Contents.     (line  47)
* scm_set_thread_cleanup_x:              Threads.             (line  90)
* scm_shared_array_increments:           Shared Arrays.       (line  95)
* scm_shared_array_offset:               Shared Arrays.       (line 100)
* scm_shared_array_root:                 Shared Arrays.       (line 104)
* scm_shell:                             Initialization.      (line  94)
* scm_shutdown:                          Network Sockets and Communication.
                                                              (line 126)
* scm_sigaction:                         Signals.             (line  49)
* scm_sigaction_for_thread:              Signals.             (line  50)
* scm_signal_condition_variable:         Mutexes and Condition Variables.
                                                              (line 159)
* scm_simple_format:                     Writing.             (line  29)
* SCM_SIMPLE_VECTOR_LENGTH:              Vector Accessing from C.
                                                              (line  26)
* SCM_SIMPLE_VECTOR_REF:                 Vector Accessing from C.
                                                              (line  30)
* SCM_SIMPLE_VECTOR_SET:                 Vector Accessing from C.
                                                              (line  34)
* scm_sint_list_to_bytevector:           Bytevectors and Integer Lists.
                                                              (line  39)
* scm_sizeof:                            Foreign Structs.     (line  13)
* scm_sleep:                             Signals.             (line 121)
* scm_sloppy_assoc:                      Sloppy Alist Functions.
                                                              (line  54)
* scm_sloppy_assq:                       Sloppy Alist Functions.
                                                              (line  44)
* scm_sloppy_assv:                       Sloppy Alist Functions.
                                                              (line  49)
* SCM_SMOB_DATA:                         Smobs.               (line 130)
* SCM_SMOB_DATA_2:                       Smobs.               (line 131)
* SCM_SMOB_DATA_3:                       Smobs.               (line 132)
* SCM_SMOB_FLAGS:                        Smobs.               (line 122)
* SCM_SMOB_OBJECT:                       Smobs.               (line 144)
* SCM_SMOB_OBJECT_2:                     Smobs.               (line 145)
* SCM_SMOB_OBJECT_2_LOC:                 Smobs.               (line 159)
* SCM_SMOB_OBJECT_3:                     Smobs.               (line 146)
* SCM_SMOB_OBJECT_3_LOC:                 Smobs.               (line 160)
* SCM_SMOB_OBJECT_LOC:                   Smobs.               (line 158)
* SCM_SMOB_PREDICATE:                    Smobs.               (line 104)
* SCM_SNARF_INIT:                        Snarfing Macros.     (line  15)
* scm_socket:                            Network Sockets and Communication.
                                                              (line  21)
* scm_socketpair:                        Network Sockets and Communication.
                                                              (line  48)
* scm_sort:                              Sorting.             (line  48)
* scm_sorted_p:                          Sorting.             (line  42)
* scm_sort_list:                         Sorting.             (line  76)
* scm_sort_list_x:                       Sorting.             (line  81)
* scm_sort_x:                            Sorting.             (line  54)
* scm_source_properties:                 Source Properties.   (line  55)
* scm_source_property:                   Source Properties.   (line  59)
* scm_spawn_thread:                      Threads.             (line  36)
* scm_stable_sort:                       Sorting.             (line  61)
* scm_stable_sort_x:                     Sorting.             (line  66)
* scm_stack_id:                          Stacks.              (line  11)
* scm_stack_length:                      Stacks.              (line  15)
* scm_stack_p:                           Stacks.              (line   7)
* scm_stack_ref:                         Stacks.              (line  19)
* scm_stat:                              File System.         (line  50)
* scm_status_exit_val:                   Processes.           (line 168)
* scm_status_stop_sig:                   Processes.           (line 179)
* scm_status_term_sig:                   Processes.           (line 174)
* scm_std_select:                        Blocking.            (line  46)
* scm_std_sleep:                         Blocking.            (line  52)
* scm_std_usleep:                        Blocking.            (line  56)
* scm_strerror:                          Error Reporting.     (line  30)
* scm_strftime:                          Time.                (line 113)
* scm_string:                            String Constructors. (line  18)
* scm_string_any:                        String Predicates.   (line  24)
* scm_string_append:                     Reversing and Appending Strings.
                                                              (line  18)
* scm_string_append_shared:              Reversing and Appending Strings.
                                                              (line  27)
* scm_string_bytes_per_char:             String Internals.    (line  25)
* scm_string_capitalize:                 Alphabetic Case Mapping.
                                                              (line  49)
* scm_string_capitalize_x:               Alphabetic Case Mapping.
                                                              (line  54)
* scm_string_ci_eq:                      String Comparison.   (line 122)
* scm_string_ci_ge:                      String Comparison.   (line 147)
* scm_string_ci_gt:                      String Comparison.   (line 137)
* scm_string_ci_le:                      String Comparison.   (line 142)
* scm_string_ci_lt:                      String Comparison.   (line 132)
* scm_string_ci_neq:                     String Comparison.   (line 127)
* scm_string_ci_to_symbol:               Symbol Primitives.   (line  75)
* scm_string_compare:                    String Comparison.   (line  78)
* scm_string_compare_ci:                 String Comparison.   (line  88)
* scm_string_concatenate:                Reversing and Appending Strings.
                                                              (line  32)
* scm_string_concatenate_reverse:        Reversing and Appending Strings.
                                                              (line  37)
* scm_string_concatenate_reverse_shared: Reversing and Appending Strings.
                                                              (line  56)
* scm_string_concatenate_shared:         Reversing and Appending Strings.
                                                              (line  50)
* scm_string_contains:                   String Searching.    (line 129)
* scm_string_contains_ci:                String Searching.    (line 136)
* scm_string_copy:                       String Selection.    (line  28)
* scm_string_copy_x:                     String Modification. (line  40)
* scm_string_count:                      String Searching.    (line 118)
* scm_string_delete:                     Miscellaneous String Operations.
                                                              (line  51)
* scm_string_downcase:                   Alphabetic Case Mapping.
                                                              (line  33)
* scm_string_downcase_x:                 Alphabetic Case Mapping.
                                                              (line  38)
* scm_string_drop:                       String Selection.    (line  75)
* scm_string_drop_right:                 String Selection.    (line  83)
* scm_string_eq:                         String Comparison.   (line  97)
* scm_string_every:                      String Predicates.   (line  41)
* scm_string_fill_x:                     String Modification. (line  20)
* scm_string_filter:                     Miscellaneous String Operations.
                                                              (line  42)
* scm_string_fold:                       Mapping Folding and Unfolding.
                                                              (line  41)
* scm_string_fold_right:                 Mapping Folding and Unfolding.
                                                              (line  47)
* scm_string_for_each:                   Mapping Folding and Unfolding.
                                                              (line  20)
* scm_string_for_each_index:             Mapping Folding and Unfolding.
                                                              (line  25)
* scm_string_ge:                         String Comparison.   (line 118)
* scm_string_gt:                         String Comparison.   (line 110)
* scm_string_index:                      String Searching.    (line   7)
* scm_string_index_right:                String Searching.    (line  81)
* scm_string_join:                       String Constructors. (line  47)
* scm_string_le:                         String Comparison.   (line 114)
* scm_string_length:                     String Selection.    (line  11)
* scm_string_locale_ci_eq:               Text Collation.      (line  24)
* scm_string_locale_ci_gt:               Text Collation.      (line  16)
* scm_string_locale_ci_lt:               Text Collation.      (line  14)
* scm_string_locale_downcase:            Character Case Mapping.
                                                              (line  39)
* scm_string_locale_gt:                  Text Collation.      (line  12)
* scm_string_locale_lt:                  Text Collation.      (line  10)
* scm_string_locale_titlecase:           Character Case Mapping.
                                                              (line  44)
* scm_string_locale_upcase:              Character Case Mapping.
                                                              (line  34)
* scm_string_lt:                         String Comparison.   (line 105)
* scm_string_map:                        Mapping Folding and Unfolding.
                                                              (line   7)
* scm_string_map_x:                      Mapping Folding and Unfolding.
                                                              (line  13)
* scm_string_neq:                        String Comparison.   (line 101)
* scm_string_normalize_nfc:              String Comparison.   (line 216)
* scm_string_normalize_nfd:              String Comparison.   (line 208)
* scm_string_normalize_nfkc:             String Comparison.   (line 220)
* scm_string_normalize_nfkd:             String Comparison.   (line 212)
* scm_string_null_p:                     String Predicates.   (line  17)
* scm_string_p:                          String Predicates.   (line  10)
* scm_string_pad:                        String Selection.    (line  88)
* scm_string_pad_right:                  String Selection.    (line  89)
* scm_string_prefix_ci_p:                String Searching.    (line  65)
* scm_string_prefix_length:              String Searching.    (line  34)
* scm_string_prefix_length_ci:           String Searching.    (line  40)
* scm_string_prefix_p:                   String Searching.    (line  60)
* scm_string_ref:                        String Selection.    (line  18)
* scm_string_replace:                    Miscellaneous String Operations.
                                                              (line  29)
* scm_string_reverse:                    Reversing and Appending Strings.
                                                              (line   7)
* scm_string_reverse_x:                  Reversing and Appending Strings.
                                                              (line  12)
* scm_string_rindex:                     String Searching.    (line  20)
* scm_string_set_x:                      String Modification. (line  11)
* scm_string_skip:                       String Searching.    (line  94)
* scm_string_skip_right:                 String Searching.    (line 106)
* scm_string_split:                      List/String Conversion.
                                                              (line  17)
* scm_string_suffix_ci_p:                String Searching.    (line  76)
* scm_string_suffix_length:              String Searching.    (line  47)
* scm_string_suffix_length_ci:           String Searching.    (line  53)
* scm_string_suffix_p:                   String Searching.    (line  71)
* scm_string_tabulate:                   String Constructors. (line  40)
* scm_string_take:                       String Selection.    (line  71)
* scm_string_take_right:                 String Selection.    (line  79)
* scm_string_titlecase:                  Alphabetic Case Mapping.
                                                              (line  63)
* scm_string_titlecase_x:                Alphabetic Case Mapping.
                                                              (line  67)
* scm_string_tokenize:                   Miscellaneous String Operations.
                                                              (line  34)
* scm_string_to_char_set:                Creating Character Sets.
                                                              (line  29)
* scm_string_to_char_set_x:              Creating Character Sets.
                                                              (line  35)
* scm_string_to_list:                    List/String Conversion.
                                                              (line  13)
* scm_string_to_number:                  Conversion.          (line  17)
* scm_string_to_symbol:                  Symbol Primitives.   (line  67)
* scm_string_to_utf16:                   Bytevectors as Strings.
                                                              (line  20)
* scm_string_to_utf32:                   Bytevectors as Strings.
                                                              (line  21)
* scm_string_to_utf8:                    Bytevectors as Strings.
                                                              (line  19)
* scm_string_trim:                       String Selection.    (line 106)
* scm_string_trim_both:                  String Selection.    (line 108)
* scm_string_trim_right:                 String Selection.    (line 107)
* scm_string_unfold:                     Mapping Folding and Unfolding.
                                                              (line  53)
* scm_string_unfold_right:               Mapping Folding and Unfolding.
                                                              (line  68)
* scm_string_upcase:                     Alphabetic Case Mapping.
                                                              (line  18)
* scm_string_upcase_x:                   Alphabetic Case Mapping.
                                                              (line  23)
* scm_string_xcopy_x:                    Miscellaneous String Operations.
                                                              (line  20)
* scm_strptime:                          Time.                (line 128)
* scm_struct_p:                          Structure Basics.    (line  53)
* scm_struct_ref:                        Structure Basics.    (line  57)
* scm_struct_set_x:                      Structure Basics.    (line  65)
* scm_struct_vtable:                     Structure Basics.    (line  73)
* scm_struct_vtable_name:                Vtable Contents.     (line  46)
* scm_struct_vtable_p:                   Meta-Vtables.        (line  49)
* scm_substring:                         String Selection.    (line  35)
* scm_substring_copy:                    String Selection.    (line  27)
* scm_substring_copy <1>:                String Selection.    (line  53)
* scm_substring_downcase:                Alphabetic Case Mapping.
                                                              (line  32)
* scm_substring_downcase_x:              Alphabetic Case Mapping.
                                                              (line  37)
* scm_substring_fill_x:                  String Modification. (line  19)
* scm_substring_fill_x <1>:              String Modification. (line  25)
* scm_substring_hash:                    String Comparison.   (line 152)
* scm_substring_hash_ci:                 String Comparison.   (line 159)
* scm_substring_move_x:                  String Modification. (line  34)
* scm_substring_read_only:               String Selection.    (line  58)
* scm_substring_shared:                  String Selection.    (line  47)
* scm_substring_to_list:                 List/String Conversion.
                                                              (line  12)
* scm_substring_upcase:                  Alphabetic Case Mapping.
                                                              (line  17)
* scm_substring_upcase_x:                Alphabetic Case Mapping.
                                                              (line  22)
* scm_sum:                               Arithmetic.          (line  13)
* scm_supports_source_properties_p:      Source Properties.   (line  33)
* SCM_SYMBOL:                            Snarfing Macros.     (line  44)
* scm_symbol_fref:                       Symbol Props.        (line  30)
* scm_symbol_fset_x:                     Symbol Props.        (line  34)
* scm_symbol_hash:                       Symbol Keys.         (line  54)
* scm_symbol_interned_p:                 Symbol Uninterned.   (line  53)
* scm_symbol_p:                          Symbol Primitives.   (line  10)
* scm_symbol_pref:                       Symbol Props.        (line  38)
* scm_symbol_pset_x:                     Symbol Props.        (line  42)
* scm_symbol_to_keyword:                 Keyword Procedures.  (line  15)
* scm_symbol_to_string:                  Symbol Primitives.   (line  22)
* scm_symlink:                           File System.         (line 210)
* scm_sync:                              File System.         (line 266)
* scm_syserror:                          Handling Errors.     (line  85)
* scm_syserror_msg:                      Handling Errors.     (line  86)
* scm_system:                            Processes.           (line 184)
* scm_system_async_mark:                 System asyncs.       (line  27)
* scm_system_async_mark_for_thread:      System asyncs.       (line  28)
* scm_system_star:                       Processes.           (line 194)
* scm_sys_library_dir:                   Build Config.        (line  40)
* scm_sys_make_void_port:                Void Ports.          (line  10)
* scm_sys_package_data_dir:              Build Config.        (line  34)
* scm_sys_search_load_path:              Load Paths.          (line  62)
* scm_sys_site_ccache_dir:               Build Config.        (line  56)
* scm_sys_site_dir:                      Build Config.        (line  50)
* scm_sys_string_dump:                   String Internals.    (line  30)
* scm_take_c32vector:                    SRFI-4 API.          (line 244)
* scm_take_c64vector:                    SRFI-4 API.          (line 245)
* scm_take_f32vector:                    SRFI-4 API.          (line 242)
* scm_take_f64vector:                    SRFI-4 API.          (line 243)
* scm_take_locale_string:                Conversion to/from C.
                                                              (line  59)
* scm_take_locale_stringn:               Conversion to/from C.
                                                              (line  60)
* scm_take_locale_symbol:                Symbol Primitives.   (line 142)
* scm_take_locale_symboln:               Symbol Primitives.   (line 143)
* scm_take_s16vector:                    SRFI-4 API.          (line 232)
* scm_take_s32vector:                    SRFI-4 API.          (line 236)
* scm_take_s64vector:                    SRFI-4 API.          (line 240)
* scm_take_s8vector:                     SRFI-4 API.          (line 228)
* scm_take_u16vector:                    SRFI-4 API.          (line 230)
* scm_take_u32vector:                    SRFI-4 API.          (line 234)
* scm_take_u64vector:                    SRFI-4 API.          (line 238)
* scm_take_u8vector:                     SRFI-4 API.          (line 226)
* scm_tcgetpgrp:                         Terminals and Ptys.  (line  22)
* scm_tcsetpgrp:                         Terminals and Ptys.  (line  35)
* scm_textdomain:                        Gettext Support.     (line  75)
* scm_thread_cleanup:                    Threads.             (line 102)
* scm_thread_exited_p:                   Threads.             (line  67)
* scm_thread_p:                          Threads.             (line  51)
* scm_throw:                             Throw.               (line  15)
* scm_thunk_p:                           Procedure Properties.
                                                              (line  22)
* scm_times:                             Time.                (line 142)
* scm_tmpfile:                           File System.         (line 320)
* scm_tmpnam:                            File System.         (line 286)
* scm_total_processor_count:             Processes.           (line 356)
* scm_to_bool:                           Booleans.            (line  83)
* scm_to_char:                           Integers.            (line 144)
* scm_to_char_set:                       Creating Character Sets.
                                                              (line  77)
* scm_to_double:                         Reals and Rationals. (line 133)
* scm_to_int:                            Integers.            (line 149)
* scm_to_int16:                          Integers.            (line 160)
* scm_to_int32:                          Integers.            (line 162)
* scm_to_int64:                          Integers.            (line 164)
* scm_to_int8:                           Integers.            (line 158)
* scm_to_intmax:                         Integers.            (line 166)
* scm_to_locale_string:                  Conversion to/from C.
                                                              (line  67)
* scm_to_locale_stringbuf:               Conversion to/from C.
                                                              (line  93)
* scm_to_locale_stringn:                 Conversion to/from C.
                                                              (line  68)
* scm_to_long:                           Integers.            (line 151)
* scm_to_long_long:                      Integers.            (line 153)
* scm_to_mpz:                            Integers.            (line 205)
* scm_to_pointer:                        Foreign Variables.   (line  77)
* scm_to_ptrdiff_t:                      Integers.            (line 157)
* scm_to_schar:                          Integers.            (line 145)
* scm_to_short:                          Integers.            (line 147)
* scm_to_signed_integer:                 Integers.            (line 129)
* scm_to_size_t:                         Integers.            (line 155)
* scm_to_sockaddr:                       Network Socket Address.
                                                              (line  88)
* scm_to_ssize_t:                        Integers.            (line 156)
* scm_to_uchar:                          Integers.            (line 146)
* scm_to_uint:                           Integers.            (line 150)
* scm_to_uint16:                         Integers.            (line 161)
* scm_to_uint32:                         Integers.            (line 163)
* scm_to_uint64:                         Integers.            (line 165)
* scm_to_uint8:                          Integers.            (line 159)
* scm_to_uintmax:                        Integers.            (line 167)
* scm_to_ulong:                          Integers.            (line 152)
* scm_to_ulong_long:                     Integers.            (line 154)
* scm_to_unsigned_integer:               Integers.            (line 131)
* scm_to_ushort:                         Integers.            (line 148)
* scm_transpose_array:                   Shared Arrays.       (line 121)
* scm_truncate_divide:                   Arithmetic.          (line 154)
* scm_truncate_file:                     Random Access.       (line  33)
* scm_truncate_number:                   Arithmetic.          (line  57)
* scm_truncate_quotient:                 Arithmetic.          (line 155)
* scm_truncate_remainder:                Arithmetic.          (line 156)
* scm_try_arbiter:                       Arbiters.            (line  22)
* scm_try_mutex:                         Mutexes and Condition Variables.
                                                              (line  88)
* scm_ttyname:                           Terminals and Ptys.  (line  12)
* scm_typed_array_p:                     Array Procedures.    (line  30)
* scm_tzset:                             Time.                (line 106)
* scm_u16vector:                         SRFI-4 API.          (line  79)
* scm_u16vector_elements:                SRFI-4 API.          (line 261)
* scm_u16vector_length:                  SRFI-4 API.          (line 107)
* scm_u16vector_p:                       SRFI-4 API.          (line  23)
* scm_u16vector_ref:                     SRFI-4 API.          (line 133)
* scm_u16vector_set_x:                   SRFI-4 API.          (line 160)
* scm_u16vector_to_list:                 SRFI-4 API.          (line 187)
* scm_u16vector_writable_elements:       SRFI-4 API.          (line 289)
* scm_u32vector:                         SRFI-4 API.          (line  81)
* scm_u32vector_elements:                SRFI-4 API.          (line 265)
* scm_u32vector_length:                  SRFI-4 API.          (line 109)
* scm_u32vector_p:                       SRFI-4 API.          (line  25)
* scm_u32vector_ref:                     SRFI-4 API.          (line 135)
* scm_u32vector_set_x:                   SRFI-4 API.          (line 162)
* scm_u32vector_to_list:                 SRFI-4 API.          (line 189)
* scm_u32vector_writable_elements:       SRFI-4 API.          (line 293)
* scm_u64vector:                         SRFI-4 API.          (line  83)
* scm_u64vector_elements:                SRFI-4 API.          (line 269)
* scm_u64vector_length:                  SRFI-4 API.          (line 111)
* scm_u64vector_p:                       SRFI-4 API.          (line  27)
* scm_u64vector_ref:                     SRFI-4 API.          (line 137)
* scm_u64vector_set_x:                   SRFI-4 API.          (line 164)
* scm_u64vector_to_list:                 SRFI-4 API.          (line 191)
* scm_u64vector_writable_elements:       SRFI-4 API.          (line 297)
* scm_u8vector:                          SRFI-4 API.          (line  77)
* scm_u8vector_elements:                 SRFI-4 API.          (line 257)
* scm_u8vector_length:                   SRFI-4 API.          (line 105)
* scm_u8vector_p:                        SRFI-4 API.          (line  21)
* scm_u8vector_ref:                      SRFI-4 API.          (line 131)
* scm_u8vector_set_x:                    SRFI-4 API.          (line 158)
* scm_u8vector_to_list:                  SRFI-4 API.          (line 185)
* scm_u8vector_writable_elements:        SRFI-4 API.          (line 285)
* scm_u8_list_to_bytevector:             Bytevectors and Integer Lists.
                                                              (line  19)
* scm_ucs_range_to_char_set:             Creating Character Sets.
                                                              (line  52)
* scm_ucs_range_to_char_set_x:           Creating Character Sets.
                                                              (line  64)
* scm_uint_list_to_bytevector:           Bytevectors and Integer Lists.
                                                              (line  34)
* scm_umask:                             Processes.           (line  16)
* scm_uname:                             System Identification.
                                                              (line  10)
* SCM_UNBNDP:                            Immediate objects.   (line  59)
* SCM_UNDEFINED:                         Immediate objects.   (line  48)
* scm_unget_bytevector:                  R6RS Binary Input.   (line 111)
* scm_uniform_array_read_x:              Array Procedures.    (line 207)
* scm_uniform_array_write:               Array Procedures.    (line 222)
* scm_unlock_mutex:                      Mutexes and Condition Variables.
                                                              (line  95)
* scm_unlock_mutex_timed:                Mutexes and Condition Variables.
                                                              (line  96)
* SCM_UNPACK:                            The SCM Type.        (line  27)
* scm_unread_char:                       Reading.             (line  68)
* scm_unread_char <1>:                   Ports and File Descriptors.
                                                              (line 167)
* scm_unread_string:                     Reading.             (line  75)
* SCM_UNSPECIFIED:                       Immediate objects.   (line  39)
* scm_usleep:                            Signals.             (line 122)
* scm_utf16_to_string:                   Bytevectors as Strings.
                                                              (line  31)
* scm_utf32_to_string:                   Bytevectors as Strings.
                                                              (line  32)
* scm_utf8_to_string:                    Bytevectors as Strings.
                                                              (line  30)
* scm_utime:                             File System.         (line 149)
* scm_values:                            Multiple Values.     (line  20)
* SCM_VARIABLE:                          Snarfing Macros.     (line  80)
* scm_variable_bound_p:                  Variables.           (line  47)
* SCM_VARIABLE_INIT:                     Snarfing Macros.     (line  86)
* scm_variable_p:                        Variables.           (line  66)
* scm_variable_ref:                      Variables.           (line  52)
* scm_variable_set_x:                    Variables.           (line  57)
* scm_variable_unset_x:                  Variables.           (line  62)
* scm_vector:                            Vector Creation.     (line  14)
* scm_vector_copy:                       Vector Accessors.    (line  57)
* scm_vector_elements:                   Vector Accessing from C.
                                                              (line  38)
* scm_vector_fill_x:                     Vector Accessors.    (line  52)
* scm_vector_length:                     Vector Accessors.    (line  11)
* scm_vector_move_left_x:                Vector Accessors.    (line  61)
* scm_vector_move_right_x:               Vector Accessors.    (line  73)
* scm_vector_p:                          Vector Creation.     (line  47)
* scm_vector_ref:                        Vector Accessors.    (line  18)
* scm_vector_set_x:                      Vector Accessors.    (line  41)
* scm_vector_to_list:                    Vector Creation.     (line  23)
* scm_vector_writable_elements:          Vector Accessing from C.
                                                              (line  67)
* scm_version:                           Build Config.        (line  14)
* scm_waitpid:                           Processes.           (line 127)
* scm_wait_condition_variable:           Mutexes and Condition Variables.
                                                              (line 140)
* scm_weak_key_hash_table_p:             Weak hash tables.    (line  21)
* scm_weak_value_hash_table_p:           Weak hash tables.    (line  22)
* scm_weak_vector:                       Weak vectors.        (line  14)
* scm_weak_vector_p:                     Weak vectors.        (line  20)
* scm_weak_vector_ref:                   Weak vectors.        (line  24)
* scm_weak_vector_set_x:                 Weak vectors.        (line  29)
* scm_without_guile:                     Blocking.            (line  19)
* scm_with_continuation_barrier:         Continuation Barriers.
                                                              (line  11)
* scm_with_dynamic_state:                Fluids and Dynamic States.
                                                              (line 133)
* scm_with_fluid:                        Fluids and Dynamic States.
                                                              (line  70)
* scm_with_fluids:                       Fluids and Dynamic States.
                                                              (line  75)
* scm_with_guile:                        Initialization.      (line  19)
* scm_with_throw_handler:                Throw Handlers.      (line  13)
* scm_write_char:                        Writing.             (line  39)
* scm_write_line:                        Line/Delimited.      (line  66)
* scm_write_objcode:                     Bytecode and Objcode.
                                                              (line  62)
* scm_write_string_partial:              Block Reading and Writing.
                                                              (line  42)
* scm_wrong_num_args:                    Handling Errors.     (line  97)
* scm_wrong_type_arg:                    Handling Errors.     (line  98)
* scm_wrong_type_arg_msg:                Handling Errors.     (line 100)
* scm_xsubstring:                        Miscellaneous String Operations.
                                                              (line   7)
* scm_zero_p:                            Comparison.          (line  36)
* script-stexi-documentation:            texinfo reflection.  (line  23)
* sdocbook-flatten:                      texinfo docbook.     (line  22)
* search-path:                           Load Paths.          (line 121)
* second:                                SRFI-1 Selectors.    (line   7)
* seconds->time:                         SRFI-18 Time.        (line  21)
* seed->random-state:                    Random.              (line  63)
* seek:                                  Random Access.       (line   6)
* select:                                Ports and File Descriptors.
                                                              (line 370)
* select-kids:                           SXPath.              (line 118)
* send:                                  Network Sockets and Communication.
                                                              (line 237)
* sendfile:                              File System.         (line 172)
* sendto:                                Network Sockets and Communication.
                                                              (line 277)
* sendto <1>:                            Network Sockets and Communication.
                                                              (line 278)
* sendto <2>:                            Network Sockets and Communication.
                                                              (line 279)
* sendto <3>:                            Network Sockets and Communication.
                                                              (line 281)
* serious-condition?:                    SRFI-35.             (line 130)
* serious-condition? <1>:                rnrs conditions.     (line  84)
* serve-one-client:                      Web Server.          (line 143)
* servent:aliases:                       Network Databases.   (line 335)
* servent:name:                          Network Databases.   (line 333)
* servent:port:                          Network Databases.   (line 337)
* servent:proto:                         Network Databases.   (line 339)
* set!:                                  rnrs base.           (line  78)
* set! <1>:                              Slot Description Example.
                                                              (line  29)
* set-box!:                              SRFI-111.            (line  19)
* set-buffered-input-continuation?!:     Buffered Input.      (line  40)
* set-car!:                              Pairs.               (line 151)
* set-car! <1>:                          Inlined Scheme Instructions.
                                                              (line  32)
* set-cdr!:                              Pairs.               (line 156)
* set-cdr! <1>:                          Inlined Scheme Instructions.
                                                              (line  33)
* set-current-dynamic-state:             Fluids and Dynamic States.
                                                              (line 127)
* set-current-error-port:                Default Ports.       (line  48)
* set-current-input-port:                Default Ports.       (line  46)
* set-current-module:                    Module System Reflection.
                                                              (line  21)
* set-current-output-port:               Default Ports.       (line  47)
* set-field:                             SRFI-9 Records.      (line 127)
* set-fields:                            SRFI-9 Records.      (line 137)
* set-object-properties!:                Object Properties.   (line  61)
* set-object-property!:                  Object Properties.   (line  69)
* set-port-column!:                      Reading.             (line 110)
* set-port-conversion-strategy!:         Ports.               (line 105)
* set-port-encoding!:                    Ports.               (line  83)
* set-port-encoding! <1>:                Character Encoding of Source Files.
                                                              (line  43)
* set-port-filename!:                    File Ports.          (line 179)
* set-port-line!:                        Reading.             (line 111)
* set-port-position!:                    R6RS Port Manipulation.
                                                              (line  66)
* set-port-revealed!:                    Ports and File Descriptors.
                                                              (line  61)
* set-procedure-properties!:             Procedure Properties.
                                                              (line  47)
* set-procedure-property!:               Procedure Properties.
                                                              (line  51)
* set-program-arguments:                 Runtime Environment. (line   8)
* set-readline-input-port!:              Readline Functions.  (line  21)
* set-readline-output-port!:             Readline Functions.  (line  22)
* set-readline-prompt!:                  Readline Functions.  (line  59)
* set-record-type-printer!:              SRFI-9 Records.      (line  86)
* set-source-properties!:                Source Properties.   (line  44)
* set-source-property!:                  Source Properties.   (line  49)
* set-struct-vtable-name!:               Vtable Contents.     (line  45)
* set-symbol-property!:                  Symbol Props.        (line  52)
* set-thread-cleanup!:                   Threads.             (line  89)
* set-time-nanosecond!:                  SRFI-19 Time.        (line  50)
* set-time-second!:                      SRFI-19 Time.        (line  51)
* set-time-type!:                        SRFI-19 Time.        (line  49)
* set-tm:gmtoff:                         Time.                (line  52)
* set-tm:hour:                           Time.                (line  30)
* set-tm:isdst:                          Time.                (line  48)
* set-tm:mday:                           Time.                (line  33)
* set-tm:min:                            Time.                (line  27)
* set-tm:mon:                            Time.                (line  36)
* set-tm:sec:                            Time.                (line  24)
* set-tm:wday:                           Time.                (line  42)
* set-tm:yday:                           Time.                (line  45)
* set-tm:year:                           Time.                (line  39)
* set-tm:zone:                           Time.                (line  61)
* set-vm-trace-level!:                   VM Hooks.            (line  92)
* setaffinity:                           Processes.           (line 347)
* setegid:                               Processes.           (line  95)
* setenv:                                Runtime Environment. (line  70)
* seteuid:                               Processes.           (line  88)
* setgid:                                Processes.           (line  82)
* setgr:                                 User Information.    (line  90)
* setgrent:                              User Information.    (line  77)
* setgroups:                             Processes.           (line  68)
* sethost:                               Network Databases.   (line 225)
* sethostent:                            Network Databases.   (line 207)
* sethostname:                           System Identification.
                                                              (line  34)
* setitimer:                             Signals.             (line 137)
* setlocale:                             Locales.             (line   6)
* setnet:                                Network Databases.   (line 275)
* setnetent:                             Network Databases.   (line 260)
* setpgid:                               Processes.           (line 107)
* setpriority:                           Processes.           (line 310)
* setproto:                              Network Databases.   (line 322)
* setprotoent:                           Network Databases.   (line 307)
* setpw:                                 User Information.    (line  47)
* setpwent:                              User Information.    (line  34)
* setserv:                               Network Databases.   (line 383)
* setservent:                            Network Databases.   (line 368)
* setsid:                                Processes.           (line 114)
* setsockopt:                            Network Sockets and Communication.
                                                              (line  58)
* setter:                                Procedures with Setters.
                                                              (line  57)
* setuid:                                Processes.           (line  76)
* setvbuf:                               Ports and File Descriptors.
                                                              (line 285)
* seventh:                               SRFI-1 Selectors.    (line  12)
* shallow-clone:                         GOOPS Object Miscellany.
                                                              (line  28)
* shallow-clone <1>:                     GOOPS Object Miscellany.
                                                              (line  29)
* shared-array-increments:               Shared Arrays.       (line  94)
* shared-array-offset:                   Shared Arrays.       (line  99)
* shared-array-root:                     Shared Arrays.       (line 103)
* shift:                                 Shift and Reset.     (line  70)
* show:                                  Help Commands.       (line  23)
* shutdown:                              Network Sockets and Communication.
                                                              (line 125)
* sigaction:                             Signals.             (line  48)
* signal-condition-variable:             Mutexes and Condition Variables.
                                                              (line 158)
* simple-conditions:                     rnrs conditions.     (line  42)
* simple-format:                         Writing.             (line  28)
* sin:                                   Scientific.          (line  22)
* sin <1>:                               rnrs base.           (line 146)
* sinh:                                  Scientific.          (line  51)
* sint-list->bytevector:                 Bytevectors and Integer Lists.
                                                              (line  38)
* sixth:                                 SRFI-1 Selectors.    (line  11)
* sizeof:                                Foreign Structs.     (line  12)
* size_t:                                Array Procedures.    (line 133)
* skip-until:                            sxml ssax input-parse.
                                                              (line  43)
* skip-while:                            sxml ssax input-parse.
                                                              (line  45)
* sleep:                                 Signals.             (line 119)
* sloppy-assoc:                          Sloppy Alist Functions.
                                                              (line  53)
* sloppy-assq:                           Sloppy Alist Functions.
                                                              (line  43)
* sloppy-assv:                           Sloppy Alist Functions.
                                                              (line  48)
* slot-bound-using-class?:               Accessing Slots.     (line  54)
* slot-bound?:                           Accessing Slots.     (line  12)
* slot-definition-accessor:              Slots.               (line  31)
* slot-definition-allocation:            Slots.               (line  16)
* slot-definition-getter:                Slots.               (line  21)
* slot-definition-init-form:             Slots.               (line  42)
* slot-definition-init-keyword:          Slots.               (line  53)
* slot-definition-init-thunk:            Slots.               (line  48)
* slot-definition-init-value:            Slots.               (line  36)
* slot-definition-name:                  Slots.               (line  10)
* slot-definition-options:               Slots.               (line  13)
* slot-definition-setter:                Slots.               (line  26)
* slot-exists-using-class?:              Accessing Slots.     (line  50)
* slot-exists?:                          Accessing Slots.     (line   9)
* slot-init-function:                    Slots.               (line  59)
* slot-missing:                          Accessing Slots.     (line 110)
* slot-missing <1>:                      Accessing Slots.     (line 111)
* slot-missing <2>:                      Accessing Slots.     (line 112)
* slot-missing <3>:                      Accessing Slots.     (line 113)
* slot-ref:                              Instance Creation.   (line  48)
* slot-ref <1>:                          Accessing Slots.     (line  20)
* slot-ref <2>:                          Inlined Scheme Instructions.
                                                              (line  44)
* slot-ref-using-class:                  Accessing Slots.     (line  63)
* slot-set:                              Inlined Scheme Instructions.
                                                              (line  45)
* slot-set!:                             Instance Creation.   (line  48)
* slot-set! <1>:                         Accessing Slots.     (line  31)
* slot-set-using-class!:                 Accessing Slots.     (line  75)
* slot-unbound:                          Accessing Slots.     (line 123)
* slot-unbound <1>:                      Accessing Slots.     (line 124)
* slot-unbound <2>:                      Accessing Slots.     (line 125)
* slot-unbound <3>:                      Accessing Slots.     (line 126)
* sockaddr:addr:                         Network Socket Address.
                                                              (line  44)
* sockaddr:fam:                          Network Socket Address.
                                                              (line  37)
* sockaddr:flowinfo:                     Network Socket Address.
                                                              (line  52)
* sockaddr:path:                         Network Socket Address.
                                                              (line  41)
* sockaddr:port:                         Network Socket Address.
                                                              (line  48)
* sockaddr:scopeid:                      Network Socket Address.
                                                              (line  56)
* socket:                                Network Sockets and Communication.
                                                              (line  20)
* socketpair:                            Network Sockets and Communication.
                                                              (line  47)
* sort:                                  Sorting.             (line  47)
* sort!:                                 Sorting.             (line  53)
* sort-list:                             Sorting.             (line  75)
* sort-list!:                            Sorting.             (line  80)
* sorted?:                               Sorting.             (line  41)
* source-properties:                     Source Properties.   (line  54)
* source-property:                       Source Properties.   (line  58)
* source:addr:                           Compiled Procedures. (line  93)
* source:column:                         Compiled Procedures. (line  95)
* source:file:                           Compiled Procedures. (line  96)
* source:line:                           Compiled Procedures. (line  94)
* span:                                  SRFI-1 Searching.    (line  30)
* span!:                                 SRFI-1 Searching.    (line  31)
* spawn-coop-repl-server:                Cooperative REPL Servers.
                                                              (line  27)
* spawn-server:                          REPL Servers.        (line  30)
* split-and-decode-uri-path:             URIs.                (line 106)
* split-at:                              SRFI-1 Selectors.    (line  43)
* split-at!:                             SRFI-1 Selectors.    (line  44)
* sqrt:                                  Scientific.          (line   9)
* sqrt <1>:                              rnrs base.           (line 142)
* SRV:send-reply:                        Transforming SXML.   (line  58)
* ssax:complete-start-tag:               SSAX.                (line 203)
* ssax:make-elem-parser:                 SSAX.                (line 217)
* ssax:make-parser:                      SSAX.                (line 213)
* ssax:make-pi-parser:                   SSAX.                (line 215)
* ssax:read-attributes:                  SSAX.                (line 201)
* ssax:read-cdata-body:                  SSAX.                (line 197)
* ssax:read-char-data:                   SSAX.                (line 208)
* ssax:read-char-ref:                    SSAX.                (line 199)
* ssax:read-external-id:                 SSAX.                (line 206)
* ssax:read-markup-token:                SSAX.                (line 195)
* ssax:read-pi-body-as-string:           SSAX.                (line 191)
* ssax:reverse-collect-str-drop-ws:      SSAX.                (line 193)
* ssax:skip-internal-dtd:                SSAX.                (line 189)
* ssax:uri-string->symbol:               SSAX.                (line 187)
* ssax:xml->sxml:                        SSAX.                (line 211)
* stable-sort:                           Sorting.             (line  60)
* stable-sort!:                          Sorting.             (line  65)
* stack-id:                              Stacks.              (line  10)
* stack-length:                          Stacks.              (line  14)
* stack-ref:                             Stacks.              (line  18)
* stack?:                                Stacks.              (line   6)
* standard-error-port:                   R6RS Output Ports.   (line  45)
* standard-input-port:                   R6RS Input Ports.    (line  46)
* standard-output-port:                  R6RS Output Ports.   (line  44)
* start-stack:                           Stack Capture.       (line  48)
* stat:                                  File System.         (line  49)
* stat:atime:                            File System.         (line  80)
* stat:atimensec:                        File System.         (line  87)
* stat:blksize:                          File System.         (line  95)
* stat:blocks:                           File System.         (line  99)
* stat:ctime:                            File System.         (line  84)
* stat:ctimensec:                        File System.         (line  89)
* stat:dev:                              File System.         (line  59)
* stat:gid:                              File System.         (line  72)
* stat:ino:                              File System.         (line  61)
* stat:mode:                             File System.         (line  64)
* stat:mtime:                            File System.         (line  82)
* stat:mtimensec:                        File System.         (line  88)
* stat:nlink:                            File System.         (line  68)
* stat:perms:                            File System.         (line 111)
* stat:rdev:                             File System.         (line  74)
* stat:size:                             File System.         (line  78)
* stat:type:                             File System.         (line 107)
* stat:uid:                              File System.         (line  70)
* statistics:                            System Commands.     (line   9)
* statprof:                              Statprof.            (line 179)
* statprof-accumulated-time:             Statprof.            (line 113)
* statprof-active?:                      Statprof.            (line  93)
* statprof-call-data->stats:             Statprof.            (line 139)
* statprof-call-data-calls:              Statprof.            (line 133)
* statprof-call-data-cum-samples:        Statprof.            (line 135)
* statprof-call-data-name:               Statprof.            (line 131)
* statprof-call-data-self-samples:       Statprof.            (line 137)
* statprof-display:                      Statprof.            (line 156)
* statprof-display-anomolies:            Statprof.            (line 160)
* statprof-fetch-call-tree:              Statprof.            (line 171)
* statprof-fetch-stacks:                 Statprof.            (line 164)
* statprof-fold-call-data:               Statprof.            (line 119)
* statprof-proc-call-data:               Statprof.            (line 127)
* statprof-reset:                        Statprof.            (line 103)
* statprof-sample-count:                 Statprof.            (line 116)
* statprof-start:                        Statprof.            (line  97)
* statprof-stats-%-time-in-proc:         Statprof.            (line 144)
* statprof-stats-calls:                  Statprof.            (line 150)
* statprof-stats-cum-secs-in-proc:       Statprof.            (line 146)
* statprof-stats-cum-secs-per-call:      Statprof.            (line 154)
* statprof-stats-proc-name:              Statprof.            (line 142)
* statprof-stats-self-secs-in-proc:      Statprof.            (line 148)
* statprof-stats-self-secs-per-call:     Statprof.            (line 152)
* statprof-stop:                         Statprof.            (line 100)
* status:exit-val:                       Processes.           (line 167)
* status:stop-sig:                       Processes.           (line 178)
* status:term-sig:                       Processes.           (line 173)
* step:                                  Debug Commands.      (line  76)
* stexi->plain-text:                     texinfo plain-text.  (line  15)
* stexi->shtml:                          texinfo html.        (line  31)
* stexi->sxml:                           texinfo.             (line  73)
* stexi->texi:                           texinfo serialize.   (line  14)
* stexi-extract-index:                   texinfo indexing.    (line  17)
* stop-server-and-clients!:              REPL Servers.        (line  39)
* stream:                                SRFI-41 Stream Library.
                                                              (line  52)
* stream->list:                          SRFI-41 Stream Library.
                                                              (line  64)
* stream->list <1>:                      Streams.             (line  85)
* stream->list&length:                   Streams.             (line  92)
* stream->reversed-list:                 Streams.             (line  88)
* stream->reversed-list&length:          Streams.             (line  97)
* stream->vector:                        Streams.             (line 102)
* stream-append:                         SRFI-41 Stream Library.
                                                              (line  76)
* stream-car:                            SRFI-41 Stream Primitives.
                                                              (line  43)
* stream-car <1>:                        Streams.             (line  58)
* stream-cdr:                            SRFI-41 Stream Primitives.
                                                              (line  49)
* stream-cdr <1>:                        Streams.             (line  61)
* stream-concat:                         SRFI-41 Stream Library.
                                                              (line  83)
* stream-cons:                           SRFI-41 Stream Primitives.
                                                              (line  16)
* stream-constant:                       SRFI-41 Stream Library.
                                                              (line  90)
* stream-drop:                           SRFI-41 Stream Library.
                                                              (line  97)
* stream-drop-while:                     SRFI-41 Stream Library.
                                                              (line 105)
* stream-filter:                         SRFI-41 Stream Library.
                                                              (line 111)
* stream-fold:                           SRFI-41 Stream Library.
                                                              (line 118)
* stream-fold <1>:                       Streams.             (line 105)
* stream-for-each:                       SRFI-41 Stream Library.
                                                              (line 132)
* stream-for-each <1>:                   Streams.             (line 114)
* stream-from:                           SRFI-41 Stream Library.
                                                              (line 137)
* stream-iterate:                        SRFI-41 Stream Library.
                                                              (line 145)
* stream-lambda:                         SRFI-41 Stream Primitives.
                                                              (line  53)
* stream-length:                         SRFI-41 Stream Library.
                                                              (line 150)
* stream-let:                            SRFI-41 Stream Library.
                                                              (line 155)
* stream-map:                            SRFI-41 Stream Library.
                                                              (line 181)
* stream-map <1>:                        Streams.             (line 122)
* stream-match:                          SRFI-41 Stream Library.
                                                              (line 188)
* stream-null?:                          SRFI-41 Stream Primitives.
                                                              (line  34)
* stream-null? <1>:                      Streams.             (line  65)
* stream-of:                             SRFI-41 Stream Library.
                                                              (line 263)
* stream-pair?:                          SRFI-41 Stream Primitives.
                                                              (line  38)
* stream-range:                          SRFI-41 Stream Library.
                                                              (line 308)
* stream-ref:                            SRFI-41 Stream Library.
                                                              (line 326)
* stream-reverse:                        SRFI-41 Stream Library.
                                                              (line 335)
* stream-scan:                           SRFI-41 Stream Library.
                                                              (line 342)
* stream-take:                           SRFI-41 Stream Library.
                                                              (line 354)
* stream-take-while:                     SRFI-41 Stream Library.
                                                              (line 359)
* stream-unfold:                         SRFI-41 Stream Library.
                                                              (line 365)
* stream-unfolds:                        SRFI-41 Stream Library.
                                                              (line 388)
* stream-zip:                            SRFI-41 Stream Library.
                                                              (line 431)
* stream?:                               SRFI-41 Stream Primitives.
                                                              (line  27)
* strerror:                              Error Reporting.     (line  29)
* strftime:                              Time.                (line 112)
* string:                                String Constructors. (line  10)
* string <1>:                            rnrs base.           (line 209)
* string->bytevector:                    Representing Strings as Bytes.
                                                              (line  37)
* string->bytevector <1>:                R6RS Transcoders.    (line 184)
* string->char-set:                      Creating Character Sets.
                                                              (line  28)
* string->char-set!:                     Creating Character Sets.
                                                              (line  34)
* string->date:                          SRFI-19 String to date.
                                                              (line   6)
* string->header:                        HTTP.                (line  29)
* string->keyword:                       SRFI-88.             (line  35)
* string->list:                          List/String Conversion.
                                                              (line  11)
* string->list <1>:                      rnrs base.           (line 214)
* string->number:                        Conversion.          (line  16)
* string->number <1>:                    rnrs base.           (line 206)
* string->pointer:                       Void Pointers and Byte Access.
                                                              (line  42)
* string->symbol:                        Symbol Primitives.   (line  66)
* string->symbol <1>:                    rnrs base.           (line  17)
* string->uri:                           URIs.                (line  60)
* string->utf16:                         Bytevectors as Strings.
                                                              (line  17)
* string->utf32:                         Bytevectors as Strings.
                                                              (line  18)
* string->utf8:                          Bytevectors as Strings.
                                                              (line  16)
* string->wrapped-lines:                 texinfo string-utils.
                                                              (line 173)
* string-any:                            String Predicates.   (line  23)
* string-append:                         Reversing and Appending Strings.
                                                              (line  17)
* string-append <1>:                     rnrs base.           (line 230)
* string-append/shared:                  Reversing and Appending Strings.
                                                              (line  26)
* string-bytes-per-char:                 String Internals.    (line  24)
* string-capitalize:                     Alphabetic Case Mapping.
                                                              (line  48)
* string-capitalize!:                    Alphabetic Case Mapping.
                                                              (line  53)
* string-ci->symbol:                     Symbol Primitives.   (line  74)
* string-ci-hash:                        SRFI-69 Hash table algorithms.
                                                              (line  19)
* string-ci-hash <1>:                    rnrs hashtables.     (line 120)
* string-ci<:                            String Comparison.   (line 131)
* string-ci<=:                           String Comparison.   (line 141)
* string-ci<=?:                          String Comparison.   (line  59)
* string-ci<=? <1>:                      rnrs unicode.        (line  55)
* string-ci<>:                           String Comparison.   (line 126)
* string-ci<?:                           String Comparison.   (line  54)
* string-ci<? <1>:                       rnrs unicode.        (line  53)
* string-ci=:                            String Comparison.   (line 121)
* string-ci=?:                           String Comparison.   (line  49)
* string-ci=? <1>:                       rnrs unicode.        (line  52)
* string-ci>:                            String Comparison.   (line 136)
* string-ci>=:                           String Comparison.   (line 146)
* string-ci>=?:                          String Comparison.   (line  70)
* string-ci>=? <1>:                      rnrs unicode.        (line  56)
* string-ci>?:                           String Comparison.   (line  65)
* string-ci>? <1>:                       rnrs unicode.        (line  54)
* string-compare:                        String Comparison.   (line  76)
* string-compare-ci:                     String Comparison.   (line  86)
* string-concatenate:                    Reversing and Appending Strings.
                                                              (line  31)
* string-concatenate-reverse:            Reversing and Appending Strings.
                                                              (line  36)
* string-concatenate-reverse/shared:     Reversing and Appending Strings.
                                                              (line  54)
* string-concatenate/shared:             Reversing and Appending Strings.
                                                              (line  49)
* string-contains:                       String Searching.    (line 127)
* string-contains-ci:                    String Searching.    (line 134)
* string-copy:                           String Selection.    (line  26)
* string-copy <1>:                       rnrs base.           (line 219)
* string-copy!:                          String Modification. (line  39)
* string-count:                          String Searching.    (line 117)
* string-delete:                         Miscellaneous String Operations.
                                                              (line  50)
* string-downcase:                       Alphabetic Case Mapping.
                                                              (line  31)
* string-downcase <1>:                   rnrs unicode.        (line  46)
* string-downcase!:                      Alphabetic Case Mapping.
                                                              (line  36)
* string-drop:                           String Selection.    (line  74)
* string-drop-right:                     String Selection.    (line  82)
* string-every:                          String Predicates.   (line  40)
* string-fill!:                          String Modification. (line  18)
* string-filter:                         Miscellaneous String Operations.
                                                              (line  41)
* string-fold:                           Mapping Folding and Unfolding.
                                                              (line  40)
* string-fold-right:                     Mapping Folding and Unfolding.
                                                              (line  46)
* string-foldcase:                       rnrs unicode.        (line  48)
* string-for-each:                       Mapping Folding and Unfolding.
                                                              (line  19)
* string-for-each <1>:                   rnrs base.           (line 233)
* string-for-each-index:                 Mapping Folding and Unfolding.
                                                              (line  24)
* string-hash:                           String Comparison.   (line 151)
* string-hash <1>:                       SRFI-69 Hash table algorithms.
                                                              (line  18)
* string-hash <2>:                       rnrs hashtables.     (line 115)
* string-hash-ci:                        String Comparison.   (line 158)
* string-index:                          String Searching.    (line   6)
* string-index-right:                    String Searching.    (line  80)
* string-join:                           String Constructors. (line  46)
* string-length:                         String Selection.    (line  10)
* string-length <1>:                     rnrs base.           (line 217)
* string-locale-ci<?:                    Text Collation.      (line  13)
* string-locale-ci=?:                    Text Collation.      (line  23)
* string-locale-ci>?:                    Text Collation.      (line  15)
* string-locale-downcase:                Character Case Mapping.
                                                              (line  38)
* string-locale-titlecase:               Character Case Mapping.
                                                              (line  43)
* string-locale-upcase:                  Character Case Mapping.
                                                              (line  33)
* string-locale<?:                       Text Collation.      (line   9)
* string-locale>?:                       Text Collation.      (line  11)
* string-map:                            Mapping Folding and Unfolding.
                                                              (line   6)
* string-map!:                           Mapping Folding and Unfolding.
                                                              (line  12)
* string-match:                          Regexp Functions.    (line  24)
* string-normalize-nfc:                  String Comparison.   (line 215)
* string-normalize-nfc <1>:              rnrs unicode.        (line  62)
* string-normalize-nfd:                  String Comparison.   (line 207)
* string-normalize-nfd <1>:              rnrs unicode.        (line  60)
* string-normalize-nfkc:                 String Comparison.   (line 219)
* string-normalize-nfkc <1>:             rnrs unicode.        (line  63)
* string-normalize-nfkd:                 String Comparison.   (line 211)
* string-normalize-nfkd <1>:             rnrs unicode.        (line  61)
* string-null?:                          String Predicates.   (line  16)
* string-pad:                            String Selection.    (line  86)
* string-pad-right:                      String Selection.    (line  87)
* string-prefix-ci?:                     String Searching.    (line  63)
* string-prefix-length:                  String Searching.    (line  32)
* string-prefix-length-ci:               String Searching.    (line  38)
* string-prefix?:                        String Searching.    (line  58)
* string-ref:                            String Selection.    (line  17)
* string-ref <1>:                        rnrs base.           (line 218)
* string-replace:                        Miscellaneous String Operations.
                                                              (line  27)
* string-reverse:                        Reversing and Appending Strings.
                                                              (line   6)
* string-reverse!:                       Reversing and Appending Strings.
                                                              (line  11)
* string-rindex:                         String Searching.    (line  19)
* string-set!:                           String Modification. (line  10)
* string-skip:                           String Searching.    (line  93)
* string-skip-right:                     String Searching.    (line 105)
* string-split:                          List/String Conversion.
                                                              (line  16)
* string-suffix-ci?:                     String Searching.    (line  74)
* string-suffix-length:                  String Searching.    (line  45)
* string-suffix-length-ci:               String Searching.    (line  51)
* string-suffix?:                        String Searching.    (line  69)
* string-tabulate:                       String Constructors. (line  39)
* string-take:                           String Selection.    (line  70)
* string-take-right:                     String Selection.    (line  78)
* string-titlecase:                      Alphabetic Case Mapping.
                                                              (line  62)
* string-titlecase <1>:                  rnrs unicode.        (line  47)
* string-titlecase!:                     Alphabetic Case Mapping.
                                                              (line  66)
* string-tokenize:                       Miscellaneous String Operations.
                                                              (line  33)
* string-trim:                           String Selection.    (line 103)
* string-trim-both:                      String Selection.    (line 105)
* string-trim-right:                     String Selection.    (line 104)
* string-unfold:                         Mapping Folding and Unfolding.
                                                              (line  52)
* string-unfold-right:                   Mapping Folding and Unfolding.
                                                              (line  67)
* string-upcase:                         Alphabetic Case Mapping.
                                                              (line  16)
* string-upcase <1>:                     rnrs unicode.        (line  45)
* string-upcase!:                        Alphabetic Case Mapping.
                                                              (line  21)
* string-xcopy!:                         Miscellaneous String Operations.
                                                              (line  18)
* string<:                               String Comparison.   (line 104)
* string<=:                              String Comparison.   (line 113)
* string<=?:                             String Comparison.   (line  34)
* string<=? <1>:                         rnrs base.           (line 226)
* string<>:                              String Comparison.   (line 100)
* string<?:                              String Comparison.   (line  29)
* string<? <1>:                          rnrs base.           (line 224)
* string=:                               String Comparison.   (line  96)
* string=?:                              String Comparison.   (line  20)
* string=? <1>:                          rnrs base.           (line 223)
* string>:                               String Comparison.   (line 109)
* string>=:                              String Comparison.   (line 117)
* string>=?:                             String Comparison.   (line  44)
* string>=? <1>:                         rnrs base.           (line 227)
* string>?:                              String Comparison.   (line  39)
* string>? <1>:                          rnrs base.           (line 225)
* string?:                               String Predicates.   (line   9)
* string? <1>:                           rnrs base.           (line  71)
* strptime:                              Time.                (line 127)
* strtod:                                Number Input and Output.
                                                              (line  12)
* strtod <1>:                            Number Input and Output.
                                                              (line  25)
* struct-ref:                            Structure Basics.    (line  56)
* struct-ref <1>:                        Inlined Scheme Instructions.
                                                              (line  40)
* struct-set:                            Inlined Scheme Instructions.
                                                              (line  41)
* struct-set!:                           Structure Basics.    (line  64)
* struct-vtable:                         Structure Basics.    (line  72)
* struct-vtable <1>:                     Inlined Scheme Instructions.
                                                              (line  42)
* struct-vtable-name:                    Vtable Contents.     (line  44)
* struct-vtable?:                        Meta-Vtables.        (line  48)
* struct?:                               Structure Basics.    (line  52)
* struct? <1>:                           Inlined Scheme Instructions.
                                                              (line  39)
* sub:                                   Inlined Mathematical Instructions.
                                                              (line  18)
* sub1:                                  Inlined Mathematical Instructions.
                                                              (line  19)
* subr-call:                             Trampoline Instructions.
                                                              (line  19)
* substring:                             String Selection.    (line  34)
* substring <1>:                         rnrs base.           (line 220)
* substring-fill!:                       String Modification. (line  24)
* substring-move!:                       String Modification. (line  33)
* substring/copy:                        String Selection.    (line  52)
* substring/read-only:                   String Selection.    (line  57)
* substring/shared:                      String Selection.    (line  46)
* subtract-duration:                     SRFI-19 Time.        (line  94)
* subtract-duration!:                    SRFI-19 Time.        (line  95)
* supports-source-properties?:           Source Properties.   (line  32)
* sxml->string:                          Reading and Writing XML.
                                                              (line 141)
* sxml->xml:                             Reading and Writing XML.
                                                              (line 136)
* sxml-match:                            sxml-match.          (line  46)
* sxml-match-let:                        sxml-match.          (line 321)
* sxml-match-let*:                       sxml-match.          (line 323)
* sxpath:                                SXPath.              (line 143)
* symbol:                                Symbol Primitives.   (line  47)
* symbol->keyword:                       Keyword Procedures.  (line  14)
* symbol->string:                        Symbol Primitives.   (line  21)
* symbol->string <1>:                    rnrs base.           (line  16)
* symbol-append:                         Symbol Primitives.   (line  58)
* symbol-fref:                           Symbol Props.        (line  29)
* symbol-fset!:                          Symbol Props.        (line  33)
* symbol-hash:                           Symbol Keys.         (line  53)
* symbol-hash <1>:                       rnrs hashtables.     (line 116)
* symbol-interned?:                      Symbol Uninterned.   (line  52)
* symbol-pref:                           Symbol Props.        (line  37)
* symbol-prefix-proc:                    Using Guile Modules. (line  69)
* symbol-property:                       Symbol Props.        (line  45)
* symbol-property-remove!:               Symbol Props.        (line  57)
* symbol-pset!:                          Symbol Props.        (line  41)
* symbol=?:                              rnrs base.           (line 126)
* symbol?:                               Symbol Primitives.   (line   9)
* symbol? <1>:                           rnrs base.           (line  15)
* symlink:                               File System.         (line 209)
* sync:                                  File System.         (line 265)
* sync-q!:                               Queues.              (line  79)
* syntax:                                Syntax Case.         (line  63)
* syntax <1>:                            rnrs syntax-case.    (line  23)
* syntax->datum:                         Syntax Case.         (line 188)
* syntax->datum <1>:                     rnrs syntax-case.    (line  48)
* syntax-case:                           Syntax Case.         (line   9)
* syntax-case <1>:                       rnrs syntax-case.    (line  20)
* syntax-error:                          Syntax Rules.        (line 218)
* syntax-local-binding:                  Syntax Transformer Helpers.
                                                              (line  41)
* syntax-locally-bound-identifiers:      Syntax Transformer Helpers.
                                                              (line 102)
* syntax-module:                         Syntax Transformer Helpers.
                                                              (line  37)
* syntax-parameterize:                   Syntax Parameters.   (line  34)
* syntax-rules:                          Syntax Rules.        (line   9)
* syntax-rules <1>:                      rnrs base.           (line  89)
* syntax-source:                         Syntax Transformer Helpers.
                                                              (line  23)
* syntax-violation:                      rnrs syntax-case.    (line  54)
* syntax-violation <1>:                  rnrs syntax-case.    (line  55)
* syntax-violation-form:                 rnrs conditions.     (line 141)
* syntax-violation-subform:              rnrs conditions.     (line 142)
* syntax-violation?:                     rnrs conditions.     (line 140)
* system:                                Processes.           (line 183)
* system*:                               Processes.           (line 193)
* system-async-mark:                     System asyncs.       (line  26)
* system-error-errno:                    Conventions.         (line  66)
* system-file-name-convention:           File System.         (line 353)
* tail-apply:                            Procedure Call and Return Instructions.
                                                              (line  36)
* tail-call:                             Procedure Call and Return Instructions.
                                                              (line  26)
* tail-call/cc:                          Procedure Call and Return Instructions.
                                                              (line 104)
* tail-call/nargs:                       Procedure Call and Return Instructions.
                                                              (line  43)
* take:                                  SRFI-1 Selectors.    (line  21)
* take!:                                 SRFI-1 Selectors.    (line  22)
* take-after:                            SXPath.              (line 110)
* take-right:                            SRFI-1 Selectors.    (line  31)
* take-until:                            SXPath.              (line 108)
* take-while:                            SRFI-1 Searching.    (line  18)
* take-while!:                           SRFI-1 Searching.    (line  19)
* tan:                                   Scientific.          (line  28)
* tan <1>:                               rnrs base.           (line 148)
* tanh:                                  Scientific.          (line  57)
* tcgetpgrp:                             Terminals and Ptys.  (line  21)
* tcsetpgrp:                             Terminals and Ptys.  (line  34)
* tenth:                                 SRFI-1 Selectors.    (line  15)
* terminated-thread-exception?:          SRFI-18 Exceptions.  (line  38)
* texi->stexi:                           texinfo.             (line  68)
* texi-command-depth:                    texinfo.             (line  51)
* texi-fragment->stexi:                  texinfo.             (line  63)
* text-content-type?:                    Responses.           (line 123)
* textdomain:                            Gettext Support.     (line  74)
* textual-port?:                         R6RS Port Manipulation.
                                                              (line  34)
* the-environment:                       Local Evaluation.    (line  12)
* third:                                 SRFI-1 Selectors.    (line   8)
* thread-cleanup:                        Threads.             (line 101)
* thread-exited?:                        Threads.             (line  66)
* thread-join!:                          SRFI-18 Threads.     (line  75)
* thread-name:                           SRFI-18 Threads.     (line  33)
* thread-sleep!:                         SRFI-18 Threads.     (line  53)
* thread-specific:                       SRFI-18 Threads.     (line  37)
* thread-specific-set!:                  SRFI-18 Threads.     (line  38)
* thread-start!:                         SRFI-18 Threads.     (line  43)
* thread-terminate!:                     SRFI-18 Threads.     (line  59)
* thread-yield!:                         SRFI-18 Threads.     (line  47)
* thread?:                               Threads.             (line  50)
* thread? <1>:                           SRFI-18 Threads.     (line  19)
* throw:                                 Throw.               (line  14)
* thunk?:                                Procedure Properties.
                                                              (line  21)
* time:                                  Profile Commands.    (line   6)
* time->seconds:                         SRFI-18 Time.        (line  20)
* time-difference:                       SRFI-19 Time.        (line  84)
* time-difference!:                      SRFI-19 Time.        (line  85)
* time-monotonic->date:                  SRFI-19 Time/Date conversions.
                                                              (line  19)
* time-monotonic->time-tai:              SRFI-19 Time/Date conversions.
                                                              (line  20)
* time-monotonic->time-tai!:             SRFI-19 Time/Date conversions.
                                                              (line  21)
* time-monotonic->time-utc:              SRFI-19 Time/Date conversions.
                                                              (line  22)
* time-monotonic->time-utc!:             SRFI-19 Time/Date conversions.
                                                              (line  23)
* time-nanosecond:                       SRFI-19 Time.        (line  47)
* time-resolution:                       SRFI-19 Time.        (line  72)
* time-second:                           SRFI-19 Time.        (line  48)
* time-tai->date:                        SRFI-19 Time/Date conversions.
                                                              (line  24)
* time-tai->julian-day:                  SRFI-19 Time/Date conversions.
                                                              (line  25)
* time-tai->modified-julian-day:         SRFI-19 Time/Date conversions.
                                                              (line  26)
* time-tai->time-monotonic:              SRFI-19 Time/Date conversions.
                                                              (line  27)
* time-tai->time-monotonic!:             SRFI-19 Time/Date conversions.
                                                              (line  28)
* time-tai->time-utc:                    SRFI-19 Time/Date conversions.
                                                              (line  29)
* time-tai->time-utc!:                   SRFI-19 Time/Date conversions.
                                                              (line  30)
* time-type:                             SRFI-19 Time.        (line  46)
* time-utc->date:                        SRFI-19 Time/Date conversions.
                                                              (line  31)
* time-utc->julian-day:                  SRFI-19 Time/Date conversions.
                                                              (line  32)
* time-utc->modified-julian-day:         SRFI-19 Time/Date conversions.
                                                              (line  33)
* time-utc->time-monotonic:              SRFI-19 Time/Date conversions.
                                                              (line  34)
* time-utc->time-monotonic!:             SRFI-19 Time/Date conversions.
                                                              (line  35)
* time-utc->time-tai:                    SRFI-19 Time/Date conversions.
                                                              (line  36)
* time-utc->time-tai!:                   SRFI-19 Time/Date conversions.
                                                              (line  37)
* time<=?:                               SRFI-19 Time.        (line  76)
* time<?:                                SRFI-19 Time.        (line  77)
* time=?:                                SRFI-19 Time.        (line  78)
* time>=?:                               SRFI-19 Time.        (line  79)
* time>?:                                SRFI-19 Time.        (line  80)
* time?:                                 SRFI-18 Time.        (line  17)
* time? <1>:                             SRFI-19 Time.        (line  40)
* times:                                 Time.                (line 141)
* tm:gmtoff:                             Time.                (line  51)
* tm:hour:                               Time.                (line  29)
* tm:isdst:                              Time.                (line  47)
* tm:mday:                               Time.                (line  32)
* tm:min:                                Time.                (line  26)
* tm:mon:                                Time.                (line  35)
* tm:sec:                                Time.                (line  23)
* tm:wday:                               Time.                (line  41)
* tm:yday:                               Time.                (line  44)
* tm:year:                               Time.                (line  38)
* tm:zone:                               Time.                (line  60)
* tmpfile:                               File System.         (line 319)
* tmpnam:                                File System.         (line 285)
* tms:clock:                             Time.                (line 147)
* tms:cstime:                            Time.                (line 159)
* tms:cutime:                            Time.                (line 155)
* tms:stime:                             Time.                (line 152)
* tms:utime:                             Time.                (line 150)
* toplevel-ref:                          Top-Level Environment Instructions.
                                                              (line  17)
* toplevel-set:                          Top-Level Environment Instructions.
                                                              (line  45)
* total-processor-count:                 Processes.           (line 355)
* touch:                                 Futures.             (line 104)
* trace:                                 Profile Commands.    (line  12)
* trace-calls-in-procedure:              Tracing Traps.       (line  77)
* trace-calls-to-procedure:              Tracing Traps.       (line  73)
* trace-instructions-in-procedure:       Tracing Traps.       (line  82)
* tracepoint:                            Debug Commands.      (line  66)
* transcoded-port:                       R6RS Port Manipulation.
                                                              (line  38)
* transcoder-codec:                      R6RS Transcoders.    (line 171)
* transcoder-eol-style:                  R6RS Transcoders.    (line 172)
* transcoder-error-handling-mode:        R6RS Transcoders.    (line 173)
* transform-string:                      texinfo string-utils.
                                                              (line  34)
* transpose-array:                       Shared Arrays.       (line 120)
* trap-at-procedure-call:                Low-Level Traps.     (line  37)
* trap-at-procedure-ip-in-range:         Low-Level Traps.     (line  63)
* trap-at-source-location:               Low-Level Traps.     (line  70)
* trap-calls-in-dynamic-extent:          Low-Level Traps.     (line  91)
* trap-calls-to-procedure:               Low-Level Traps.     (line 102)
* trap-enabled?:                         Trap States.         (line  37)
* trap-frame-finish:                     Low-Level Traps.     (line  76)
* trap-in-dynamic-extent:                Low-Level Traps.     (line  83)
* trap-in-procedure:                     Low-Level Traps.     (line  41)
* trap-instructions-in-dynamic-extent:   Low-Level Traps.     (line  97)
* trap-instructions-in-procedure:        Low-Level Traps.     (line  58)
* trap-matching-instructions:            Low-Level Traps.     (line 111)
* trap-name:                             Trap States.         (line  33)
* truncate:                              Arithmetic.          (line  56)
* truncate <1>:                          Random Access.       (line  32)
* truncate <2>:                          rnrs base.           (line 243)
* truncate-file:                         Random Access.       (line  32)
* truncate-quotient:                     Arithmetic.          (line 152)
* truncate-remainder:                    Arithmetic.          (line 153)
* truncate-values:                       Procedure Call and Return Instructions.
                                                              (line  90)
* truncate/:                             Arithmetic.          (line 151)
* truncated-print:                       Pretty Printing.     (line  69)
* try-arbiter:                           Arbiters.            (line  21)
* try-mutex:                             Mutexes and Condition Variables.
                                                              (line  87)
* ttyname:                               Terminals and Ptys.  (line  11)
* typed-array?:                          Array Procedures.    (line  29)
* tzset:                                 Time.                (line 105)
* u16vector:                             SRFI-4 API.          (line  67)
* u16vector->list:                       SRFI-4 API.          (line 175)
* u16vector-length:                      SRFI-4 API.          (line  95)
* u16vector-ref:                         SRFI-4 API.          (line 121)
* u16vector-set!:                        SRFI-4 API.          (line 148)
* u16vector?:                            SRFI-4 API.          (line  11)
* u32vector:                             SRFI-4 API.          (line  69)
* u32vector->list:                       SRFI-4 API.          (line 177)
* u32vector-length:                      SRFI-4 API.          (line  97)
* u32vector-ref:                         SRFI-4 API.          (line 123)
* u32vector-set!:                        SRFI-4 API.          (line 150)
* u32vector?:                            SRFI-4 API.          (line  13)
* u64vector:                             SRFI-4 API.          (line  71)
* u64vector->list:                       SRFI-4 API.          (line 179)
* u64vector-length:                      SRFI-4 API.          (line  99)
* u64vector-ref:                         SRFI-4 API.          (line 125)
* u64vector-set!:                        SRFI-4 API.          (line 152)
* u64vector?:                            SRFI-4 API.          (line  15)
* u8-list->bytevector:                   Bytevectors and Integer Lists.
                                                              (line  18)
* u8vector:                              SRFI-4 API.          (line  65)
* u8vector->list:                        SRFI-4 API.          (line 173)
* u8vector-length:                       SRFI-4 API.          (line  93)
* u8vector-ref:                          SRFI-4 API.          (line 119)
* u8vector-set!:                         SRFI-4 API.          (line 146)
* u8vector?:                             SRFI-4 API.          (line   9)
* ucs-range->char-set:                   Creating Character Sets.
                                                              (line  51)
* ucs-range->char-set!:                  Creating Character Sets.
                                                              (line  63)
* uint-list->bytevector:                 Bytevectors and Integer Lists.
                                                              (line  33)
* umask:                                 Processes.           (line  15)
* uname:                                 System Identification.
                                                              (line   9)
* unbox:                                 SRFI-111.            (line  16)
* uncaught-exception-reason:             SRFI-18 Exceptions.  (line  44)
* uncaught-exception?:                   SRFI-18 Exceptions.  (line  43)
* undefined-violation?:                  rnrs conditions.     (line 149)
* unfold:                                SRFI-1 Fold and Map. (line 110)
* unfold-right:                          SRFI-1 Fold and Map. (line 137)
* unget-bytevector:                      R6RS Binary Input.   (line 110)
* uniform-array-read!:                   Array Procedures.    (line 206)
* uniform-array-write:                   Array Procedures.    (line 221)
* unless:                                Conditionals.        (line  35)
* unless <1>:                            rnrs control.        (line  11)
* unlink:                                File System.         (line 163)
* unlock-mutex:                          Mutexes and Condition Variables.
                                                              (line  94)
* unquote:                               Expression Syntax.   (line  77)
* unquote <1>:                           rnrs base.           (line 110)
* unquote-splicing:                      Expression Syntax.   (line  87)
* unquote-splicing <1>:                  rnrs base.           (line 111)
* unread-char:                           Reading.             (line  67)
* unread-char <1>:                       Ports and File Descriptors.
                                                              (line 166)
* unread-string:                         Reading.             (line  74)
* unread-string <1>:                     Ports and File Descriptors.
                                                              (line 173)
* unsetenv:                              Runtime Environment. (line  80)
* unsyntax:                              rnrs syntax-case.    (line  25)
* unsyntax-splicing:                     rnrs syntax-case.    (line  26)
* unwind:                                Dynamic Environment Instructions.
                                                              (line  19)
* unwind-fluids:                         Dynamic Environment Instructions.
                                                              (line  30)
* unzip1:                                SRFI-1 Length Append etc.
                                                              (line  39)
* unzip2:                                SRFI-1 Length Append etc.
                                                              (line  40)
* unzip3:                                SRFI-1 Length Append etc.
                                                              (line  41)
* unzip4:                                SRFI-1 Length Append etc.
                                                              (line  42)
* unzip5:                                SRFI-1 Length Append etc.
                                                              (line  43)
* up:                                    Debug Commands.      (line  15)
* update-direct-method!:                 Customizing Class Redefinition.
                                                              (line  32)
* update-direct-subclass!:               Customizing Class Redefinition.
                                                              (line  36)
* update-instance-for-different-class:   Changing the Class of an Instance.
                                                              (line  43)
* uri->string:                           URIs.                (line  64)
* uri-decode:                            URIs.                (line  72)
* uri-encode:                            URIs.                (line  95)
* uri-fragment:                          URIs.                (line  55)
* uri-host:                              URIs.                (line  51)
* uri-path:                              URIs.                (line  53)
* uri-port:                              URIs.                (line  52)
* uri-query:                             URIs.                (line  54)
* uri-scheme:                            URIs.                (line  49)
* uri-userinfo:                          URIs.                (line  50)
* uri?:                                  URIs.                (line  48)
* urlify:                                texinfo html.        (line  35)
* use-modules:                           Using Guile Modules. (line  73)
* usleep:                                Signals.             (line 120)
* utf-16-codec:                          R6RS Transcoders.    (line  30)
* utf-8-codec:                           R6RS Transcoders.    (line  29)
* utf16->string:                         Bytevectors as Strings.
                                                              (line  28)
* utf32->string:                         Bytevectors as Strings.
                                                              (line  29)
* utf8->string:                          Bytevectors as Strings.
                                                              (line  27)
* utime:                                 File System.         (line 147)
* utsname:machine:                       System Identification.
                                                              (line  27)
* utsname:nodename:                      System Identification.
                                                              (line  19)
* utsname:release:                       System Identification.
                                                              (line  21)
* utsname:sysname:                       System Identification.
                                                              (line  17)
* utsname:version:                       System Identification.
                                                              (line  24)
* valid-header?:                         HTTP.                (line  98)
* value-history-enabled?:                Value History.       (line  42)
* values:                                Multiple Values.     (line  19)
* values <1>:                            rnrs base.           (line 353)
* variable-bound?:                       Variables.           (line  46)
* variable-bound? <1>:                   Top-Level Environment Instructions.
                                                              (line  72)
* variable-ref:                          Variables.           (line  51)
* variable-ref <1>:                      Top-Level Environment Instructions.
                                                              (line  64)
* variable-set:                          Top-Level Environment Instructions.
                                                              (line  68)
* variable-set!:                         Variables.           (line  56)
* variable-unset!:                       Variables.           (line  61)
* variable?:                             Variables.           (line  65)
* vector:                                Vector Creation.     (line  12)
* vector <1>:                            SRFI-43 Constructors.
                                                              (line  12)
* vector <2>:                            rnrs base.           (line 335)
* vector <3>:                            Data Constructor Instructions.
                                                              (line  61)
* vector->list:                          Vector Creation.     (line  22)
* vector->list <1>:                      SRFI-43 Conversion.  (line   6)
* vector->list <2>:                      rnrs base.           (line 340)
* vector->stream:                        Streams.             (line  69)
* vector-any:                            SRFI-43 Searching.   (line  67)
* vector-append:                         SRFI-43 Constructors.
                                                              (line  69)
* vector-binary-search:                  SRFI-43 Searching.   (line  42)
* vector-concatenate:                    SRFI-43 Constructors.
                                                              (line  76)
* vector-copy:                           Vector Accessors.    (line  56)
* vector-copy <1>:                       SRFI-43 Constructors.
                                                              (line  41)
* vector-copy!:                          SRFI-43 Mutators.    (line  20)
* vector-count:                          SRFI-43 Iteration.   (line  38)
* vector-empty?:                         SRFI-43 Predicates.  (line   9)
* vector-every:                          SRFI-43 Searching.   (line  73)
* vector-fill!:                          Vector Accessors.    (line  51)
* vector-fill! <1>:                      SRFI-43 Mutators.    (line  12)
* vector-fill! <2>:                      rnrs base.           (line 346)
* vector-fold:                           SRFI-43 Iteration.   (line   6)
* vector-fold-right:                     SRFI-43 Iteration.   (line  16)
* vector-for-each:                       SRFI-43 Iteration.   (line  33)
* vector-for-each <1>:                   rnrs base.           (line 331)
* vector-index:                          SRFI-43 Searching.   (line   6)
* vector-index-right:                    SRFI-43 Searching.   (line  18)
* vector-length:                         Vector Accessors.    (line  10)
* vector-length <1>:                     SRFI-43 Selectors.   (line   9)
* vector-length <2>:                     rnrs base.           (line 343)
* vector-map:                            SRFI-43 Iteration.   (line  20)
* vector-map <1>:                        rnrs base.           (line 330)
* vector-map!:                           SRFI-43 Iteration.   (line  27)
* vector-move-left!:                     Vector Accessors.    (line  60)
* vector-move-right!:                    Vector Accessors.    (line  72)
* vector-ref:                            Vector Accessors.    (line  17)
* vector-ref <1>:                        SRFI-43 Selectors.   (line   6)
* vector-ref <2>:                        rnrs base.           (line 344)
* vector-ref <3>:                        Inlined Scheme Instructions.
                                                              (line  37)
* vector-reverse!:                       SRFI-43 Mutators.    (line  16)
* vector-reverse-copy:                   SRFI-43 Constructors.
                                                              (line  62)
* vector-reverse-copy!:                  SRFI-43 Mutators.    (line  28)
* vector-set:                            Inlined Scheme Instructions.
                                                              (line  38)
* vector-set!:                           Vector Accessors.    (line  40)
* vector-set! <1>:                       SRFI-43 Mutators.    (line   6)
* vector-set! <2>:                       rnrs base.           (line 345)
* vector-skip:                           SRFI-43 Searching.   (line  26)
* vector-skip-right:                     SRFI-43 Searching.   (line  34)
* vector-sort:                           rnrs sorting.        (line  10)
* vector-sort!:                          rnrs sorting.        (line  22)
* vector-swap!:                          SRFI-43 Mutators.    (line   9)
* vector-unfold:                         SRFI-43 Constructors.
                                                              (line  17)
* vector-unfold-right:                   SRFI-43 Constructors.
                                                              (line  33)
* vector=:                               SRFI-43 Predicates.  (line  13)
* vector?:                               Vector Creation.     (line  46)
* vector? <1>:                           SRFI-43 Predicates.  (line   6)
* vector? <2>:                           rnrs base.           (line 336)
* version:                               Build Config.        (line   9)
* vhash-assoc:                           VHashes.             (line  67)
* vhash-assq:                            VHashes.             (line  68)
* vhash-assv:                            VHashes.             (line  69)
* vhash-cons:                            VHashes.             (line  53)
* vhash-consq:                           VHashes.             (line  54)
* vhash-consv:                           VHashes.             (line  55)
* vhash-delete:                          VHashes.             (line  81)
* vhash-delq:                            VHashes.             (line  82)
* vhash-delv:                            VHashes.             (line  83)
* vhash-fold:                            VHashes.             (line  93)
* vhash-fold*:                           VHashes.             (line 100)
* vhash-fold-right:                      VHashes.             (line  94)
* vhash-foldq*:                          VHashes.             (line 101)
* vhash-foldv*:                          VHashes.             (line 102)
* vhash?:                                VHashes.             (line  50)
* violation?:                            rnrs conditions.     (line  95)
* vlist->list:                           VLists.              (line 133)
* vlist-append:                          VLists.              (line 127)
* vlist-cons:                            VLists.              (line  67)
* vlist-delete:                          VLists.              (line 118)
* vlist-drop:                            VLists.              (line 106)
* vlist-filter:                          VLists.              (line 114)
* vlist-fold:                            VLists.              (line  83)
* vlist-fold-right:                      VLists.              (line  84)
* vlist-for-each:                        VLists.              (line 103)
* vlist-head:                            VLists.              (line  70)
* vlist-length:                          VLists.              (line  92)
* vlist-map:                             VLists.              (line 100)
* vlist-null?:                           VLists.              (line  64)
* vlist-ref:                             VLists.              (line  88)
* vlist-reverse:                         VLists.              (line  96)
* vlist-tail:                            VLists.              (line  73)
* vlist-take:                            VLists.              (line 110)
* vlist-unfold:                          VLists.              (line 122)
* vlist-unfold-right:                    VLists.              (line 123)
* vlist?:                                VLists.              (line  56)
* vm-abort-continuation-hook:            VM Hooks.            (line  67)
* vm-apply-hook:                         VM Hooks.            (line  57)
* vm-next-hook:                          VM Hooks.            (line  39)
* vm-pop-continuation-hook:              VM Hooks.            (line  48)
* vm-push-continuation-hook:             VM Hooks.            (line  43)
* vm-restore-continuation-hook:          VM Hooks.            (line  72)
* vm-trace-level:                        VM Hooks.            (line  88)
* void:                                  Miscellaneous Instructions.
                                                              (line  28)
* wait-condition-variable:               Mutexes and Condition Variables.
                                                              (line 139)
* waitpid:                               Processes.           (line 126)
* warning?:                              rnrs conditions.     (line  79)
* weak-key-hash-table?:                  Weak hash tables.    (line  18)
* weak-value-hash-table?:                Weak hash tables.    (line  19)
* weak-vector:                           Weak vectors.        (line  12)
* weak-vector-ref:                       Weak vectors.        (line  23)
* weak-vector-set!:                      Weak vectors.        (line  28)
* weak-vector?:                          Weak vectors.        (line  19)
* when:                                  Conditionals.        (line  34)
* when <1>:                              rnrs control.        (line  10)
* while:                                 while do.            (line  64)
* who-condition?:                        rnrs conditions.     (line 114)
* width:                                 Debug Commands.      (line  53)
* wind:                                  Dynamic Environment Instructions.
                                                              (line   9)
* wind-fluids:                           Dynamic Environment Instructions.
                                                              (line  24)
* with-code-coverage:                    Code Coverage.       (line  11)
* with-continuation-barrier:             Continuation Barriers.
                                                              (line  10)
* with-default-trap-handler:             High-Level Traps.    (line  26)
* with-dynamic-state:                    Fluids and Dynamic States.
                                                              (line 132)
* with-ellipsis:                         Syntax Case.         (line 285)
* with-error-to-file:                    File Ports.          (line 142)
* with-exception-handler:                SRFI-18 Exceptions.  (line  17)
* with-exception-handler <1>:            rnrs exceptions.     (line  28)
* with-fluid*:                           Fluids and Dynamic States.
                                                              (line  69)
* with-fluids:                           Fluids and Dynamic States.
                                                              (line  83)
* with-fluids*:                          Fluids and Dynamic States.
                                                              (line  74)
* with-input-from-file:                  File Ports.          (line 138)
* with-input-from-file <1>:              rnrs io simple.      (line  33)
* with-input-from-string:                String Ports.        (line  57)
* with-mutex:                            Mutexes and Condition Variables.
                                                              (line 172)
* with-output-to-file:                   File Ports.          (line 140)
* with-output-to-file <1>:               rnrs io simple.      (line  34)
* with-output-to-string:                 String Ports.        (line  49)
* with-parameters*:                      SRFI-39.             (line  14)
* with-readline-completion-function:     Readline Functions.  (line  76)
* with-ssax-error-to-port:               SSAX.                (line 153)
* with-statprof:                         Statprof.            (line 194)
* with-syntax:                           Syntax Case.         (line 235)
* with-throw-handler:                    Throw Handlers.      (line  12)
* write:                                 Scheme Write.        (line   9)
* write <1>:                             rnrs io simple.      (line  59)
* write <2>:                             rnrs io simple.      (line  60)
* write <3>:                             GOOPS Object Miscellany.
                                                              (line  47)
* write-char:                            Writing.             (line  38)
* write-char <1>:                        rnrs io simple.      (line  61)
* write-char <2>:                        rnrs io simple.      (line  62)
* write-client:                          Web Server.          (line 130)
* write-header:                          HTTP.                (line 117)
* write-headers:                         HTTP.                (line 125)
* write-line:                            Line/Delimited.      (line  65)
* write-objcode:                         Bytecode and Objcode.
                                                              (line  61)
* write-request:                         Requests.            (line  83)
* write-request-body:                    Requests.            (line  93)
* write-request-line:                    HTTP.                (line 149)
* write-response:                        Responses.           (line  56)
* write-response-body:                   Responses.           (line  84)
* write-response-line:                   HTTP.                (line 157)
* write-string/partial:                  Block Reading and Writing.
                                                              (line  40)
* write-with-shared-structure:           SRFI-38.             (line  26)
* write-with-shared-structure <1>:       SRFI-38.             (line  27)
* write-with-shared-structure <2>:       SRFI-38.             (line  28)
* xcons:                                 SRFI-1 Constructors. (line   8)
* xml->sxml:                             Reading and Writing XML.
                                                              (line  12)
* xml-token-head:                        SSAX.                (line 163)
* xml-token-kind:                        SSAX.                (line 161)
* xml-token?:                            SSAX.                (line 155)
* xsubstring:                            Miscellaneous String Operations.
                                                              (line   6)
* yield:                                 Threads.             (line  70)
* zero?:                                 Comparison.          (line  35)
* zero? <1>:                             rnrs base.           (line 184)
* zip:                                   SRFI-1 Length Append etc.
                                                              (line  33)

